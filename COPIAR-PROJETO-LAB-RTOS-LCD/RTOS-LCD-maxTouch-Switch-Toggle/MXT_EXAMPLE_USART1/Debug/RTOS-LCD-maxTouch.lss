
RTOS-LCD-maxTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001bae0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0041bae0  0041bae0  0002bae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b60  20400000  0041bae8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bf18  20400b60  0041c648  00030b60  2**3
                  ALLOC
  4 .stack        00002000  2040ca78  00428560  00030b60  2**0
                  ALLOC
  5 .heap         00000200  2040ea78  0042a560  00030b60  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00030b60  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00030b8e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003339c  00000000  00000000  00030be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005fb1  00000000  00000000  00063f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f59e  00000000  00000000  00069f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001438  00000000  00000000  000794d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016f8  00000000  00000000  0007a90a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000fc39  00000000  00000000  0007c002  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00018d78  00000000  00000000  0008bc3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a223e  00000000  00000000  000a49b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000040f0  00000000  00000000  00146bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 ea 40 20 cd 1d 40 00 cb 1d 40 00 cb 1d 40 00     x.@ ..@...@...@.
  400010:	cb 1d 40 00 cb 1d 40 00 cb 1d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a5 21 40 00 cb 1d 40 00 00 00 00 00 45 22 40 00     .!@...@.....E"@.
  40003c:	ad 22 40 00 cb 1d 40 00 cb 1d 40 00 25 44 40 00     ."@...@...@.%D@.
  40004c:	b9 44 40 00 cb 1d 40 00 cb 1d 40 00 cb 1d 40 00     .D@...@...@...@.
  40005c:	cb 1d 40 00 cb 1d 40 00 00 00 00 00 45 17 40 00     ..@...@.....E.@.
  40006c:	59 17 40 00 6d 17 40 00 cb 1d 40 00 cb 1d 40 00     Y.@.m.@...@...@.
  40007c:	cb 1d 40 00 81 17 40 00 95 17 40 00 cb 1d 40 00     ..@...@...@...@.
  40008c:	cb 1d 40 00 cb 1d 40 00 cb 1d 40 00 cb 1d 40 00     ..@...@...@...@.
  40009c:	cb 1d 40 00 cb 1d 40 00 cb 1d 40 00 cb 1d 40 00     ..@...@...@...@.
  4000ac:	cb 1d 40 00 cb 1d 40 00 5d 02 40 00 cb 1d 40 00     ..@...@.].@...@.
  4000bc:	cb 1d 40 00 cb 1d 40 00 cb 1d 40 00 cb 1d 40 00     ..@...@...@...@.
  4000cc:	cb 1d 40 00 cb 1d 40 00 cb 1d 40 00 cb 1d 40 00     ..@...@...@...@.
  4000dc:	cb 1d 40 00 71 02 40 00 cb 1d 40 00 cb 1d 40 00     ..@.q.@...@...@.
  4000ec:	cb 1d 40 00 cb 1d 40 00 cb 1d 40 00 cb 1d 40 00     ..@...@...@...@.
  4000fc:	cb 1d 40 00 cb 1d 40 00 cb 1d 40 00 cb 1d 40 00     ..@...@...@...@.
  40010c:	cb 1d 40 00 cb 1d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 cb 1d 40 00 cb 1d 40 00 cb 1d 40 00     ......@...@...@.
  40012c:	cb 1d 40 00 cb 1d 40 00 cb 1d 40 00 cb 1d 40 00     ..@...@...@...@.
  40013c:	cb 1d 40 00 cb 1d 40 00 cb 1d 40 00 cb 1d 40 00     ..@...@...@...@.
  40014c:	cb 1d 40 00 cb 1d 40 00 cb 1d 40 00 cb 1d 40 00     ..@...@...@...@.
  40015c:	cb 1d 40 00 cb 1d 40 00 cb 1d 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400b60 	.word	0x20400b60
  400184:	00000000 	.word	0x00000000
  400188:	0041bae8 	.word	0x0041bae8

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0041bae8 	.word	0x0041bae8
  4001c8:	20400b64 	.word	0x20400b64
  4001cc:	0041bae8 	.word	0x0041bae8
  4001d0:	00000000 	.word	0x00000000

004001d4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001d4:	b570      	push	{r4, r5, r6, lr}
  4001d6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001d8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001dc:	4013      	ands	r3, r2
  4001de:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001e0:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001e2:	4e1c      	ldr	r6, [pc, #112]	; (400254 <afec_process_callback+0x80>)
  4001e4:	4d1c      	ldr	r5, [pc, #112]	; (400258 <afec_process_callback+0x84>)
  4001e6:	42a8      	cmp	r0, r5
  4001e8:	bf14      	ite	ne
  4001ea:	2000      	movne	r0, #0
  4001ec:	2001      	moveq	r0, #1
  4001ee:	0105      	lsls	r5, r0, #4
  4001f0:	e00b      	b.n	40020a <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001f2:	2c0e      	cmp	r4, #14
  4001f4:	d81e      	bhi.n	400234 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001f6:	9a01      	ldr	r2, [sp, #4]
  4001f8:	f104 010c 	add.w	r1, r4, #12
  4001fc:	2301      	movs	r3, #1
  4001fe:	408b      	lsls	r3, r1
  400200:	4213      	tst	r3, r2
  400202:	d110      	bne.n	400226 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400204:	3401      	adds	r4, #1
  400206:	2c10      	cmp	r4, #16
  400208:	d022      	beq.n	400250 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40020a:	2c0b      	cmp	r4, #11
  40020c:	d8f1      	bhi.n	4001f2 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40020e:	9a01      	ldr	r2, [sp, #4]
  400210:	2301      	movs	r3, #1
  400212:	40a3      	lsls	r3, r4
  400214:	4213      	tst	r3, r2
  400216:	d0f5      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400218:	192b      	adds	r3, r5, r4
  40021a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40021e:	2b00      	cmp	r3, #0
  400220:	d0f0      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400222:	4798      	blx	r3
  400224:	e7ee      	b.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400226:	192b      	adds	r3, r5, r4
  400228:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40022c:	2b00      	cmp	r3, #0
  40022e:	d0e9      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400230:	4798      	blx	r3
  400232:	e7e7      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400234:	9a01      	ldr	r2, [sp, #4]
  400236:	f104 010f 	add.w	r1, r4, #15
  40023a:	2301      	movs	r3, #1
  40023c:	408b      	lsls	r3, r1
  40023e:	4213      	tst	r3, r2
  400240:	d0e0      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400242:	192b      	adds	r3, r5, r4
  400244:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400248:	2b00      	cmp	r3, #0
  40024a:	d0db      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40024c:	4798      	blx	r3
  40024e:	e7d9      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400250:	b002      	add	sp, #8
  400252:	bd70      	pop	{r4, r5, r6, pc}
  400254:	2040c96c 	.word	0x2040c96c
  400258:	40064000 	.word	0x40064000

0040025c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40025c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40025e:	4802      	ldr	r0, [pc, #8]	; (400268 <AFEC0_Handler+0xc>)
  400260:	4b02      	ldr	r3, [pc, #8]	; (40026c <AFEC0_Handler+0x10>)
  400262:	4798      	blx	r3
  400264:	bd08      	pop	{r3, pc}
  400266:	bf00      	nop
  400268:	4003c000 	.word	0x4003c000
  40026c:	004001d5 	.word	0x004001d5

00400270 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400270:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400272:	4802      	ldr	r0, [pc, #8]	; (40027c <AFEC1_Handler+0xc>)
  400274:	4b02      	ldr	r3, [pc, #8]	; (400280 <AFEC1_Handler+0x10>)
  400276:	4798      	blx	r3
  400278:	bd08      	pop	{r3, pc}
  40027a:	bf00      	nop
  40027c:	40064000 	.word	0x40064000
  400280:	004001d5 	.word	0x004001d5

00400284 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400284:	6980      	ldr	r0, [r0, #24]
}
  400286:	4770      	bx	lr

00400288 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400288:	61c1      	str	r1, [r0, #28]
  40028a:	4770      	bx	lr

0040028c <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  40028c:	68c0      	ldr	r0, [r0, #12]
}
  40028e:	4770      	bx	lr

00400290 <mxt_init>:
* to the maXTouch Xplained Pro.
*
* \param device Pointer to mxt_device struct
*/
void mxt_init(struct mxt_device *device)
{
  400290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400294:	b09c      	sub	sp, #112	; 0x70
  400296:	4604      	mov	r4, r0
  enum status_code status;

  /* T8 configuration object data */
  uint8_t t8_object[] = {
  400298:	4d48      	ldr	r5, [pc, #288]	; (4003bc <mxt_init+0x12c>)
  40029a:	ab19      	add	r3, sp, #100	; 0x64
  40029c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4002a0:	c303      	stmia	r3!, {r0, r1}
  4002a2:	801a      	strh	r2, [r3, #0]
    0x0d, 0x00, 0x05, 0x0a, 0x4b, 0x00, 0x00,
    0x00, 0x32, 0x19
  };

  /* T9 configuration object data */
  uint8_t t9_object[] = {
  4002a4:	ae10      	add	r6, sp, #64	; 0x40
  4002a6:	f105 070c 	add.w	r7, r5, #12
  4002aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4002ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4002ae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4002b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4002b2:	683b      	ldr	r3, [r7, #0]
  4002b4:	6033      	str	r3, [r6, #0]
    0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x02,
    0x02
  };

  /* T46 configuration object data */
  uint8_t t46_object[] = {
  4002b6:	ab0d      	add	r3, sp, #52	; 0x34
  4002b8:	f105 0230 	add.w	r2, r5, #48	; 0x30
  4002bc:	ca07      	ldmia	r2, {r0, r1, r2}
  4002be:	c303      	stmia	r3!, {r0, r1}
  4002c0:	701a      	strb	r2, [r3, #0]
    0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x03,
    0x00, 0x00
  };
  
  /* T56 configuration object data */
  uint8_t t56_object[] = {
  4002c2:	ae04      	add	r6, sp, #16
  4002c4:	353c      	adds	r5, #60	; 0x3c
  4002c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4002c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4002ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4002cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4002ce:	682b      	ldr	r3, [r5, #0]
  4002d0:	7033      	strb	r3, [r6, #0]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
  };

  /* TWI configuration */
  twihs_master_options_t twi_opt = {
  4002d2:	2500      	movs	r5, #0
  4002d4:	9503      	str	r5, [sp, #12]
  4002d6:	4b3a      	ldr	r3, [pc, #232]	; (4003c0 <mxt_init+0x130>)
  4002d8:	9302      	str	r3, [sp, #8]
  4002da:	274a      	movs	r7, #74	; 0x4a
  4002dc:	f88d 700c 	strb.w	r7, [sp, #12]
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  4002e0:	4b38      	ldr	r3, [pc, #224]	; (4003c4 <mxt_init+0x134>)
  4002e2:	9301      	str	r3, [sp, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002e4:	2013      	movs	r0, #19
  4002e6:	4b38      	ldr	r3, [pc, #224]	; (4003c8 <mxt_init+0x138>)
  4002e8:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  4002ea:	4e38      	ldr	r6, [pc, #224]	; (4003cc <mxt_init+0x13c>)
  4002ec:	a901      	add	r1, sp, #4
  4002ee:	4630      	mov	r0, r6
  4002f0:	4b37      	ldr	r3, [pc, #220]	; (4003d0 <mxt_init+0x140>)
  4002f2:	4798      	blx	r3

  status = (enum status_code)twihs_master_setup(MAXTOUCH_TWI_INTERFACE, &twi_opt);
  Assert(status == STATUS_OK);

  /* Initialize the maXTouch device */
  status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  4002f4:	2302      	movs	r3, #2
  4002f6:	463a      	mov	r2, r7
  4002f8:	4631      	mov	r1, r6
  4002fa:	4620      	mov	r0, r4
  4002fc:	4e35      	ldr	r6, [pc, #212]	; (4003d4 <mxt_init+0x144>)
  4002fe:	47b0      	blx	r6
  MAXTOUCH_TWI_ADDRESS, MAXTOUCH_XPRO_CHG_PIO);
  Assert(status == STATUS_OK);

  /* Issue soft reset of maXTouch device by writing a non-zero value to
  * the reset register */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  400300:	462a      	mov	r2, r5
  400302:	2106      	movs	r1, #6
  400304:	4620      	mov	r0, r4
  400306:	4e34      	ldr	r6, [pc, #208]	; (4003d8 <mxt_init+0x148>)
  400308:	47b0      	blx	r6
  40030a:	2201      	movs	r2, #1
  40030c:	4601      	mov	r1, r0
  40030e:	4620      	mov	r0, r4
  400310:	4f32      	ldr	r7, [pc, #200]	; (4003dc <mxt_init+0x14c>)
  400312:	47b8      	blx	r7
  MXT_GEN_COMMANDPROCESSOR_T6, 0)
  + MXT_GEN_COMMANDPROCESSOR_RESET, 0x01);

  /* Wait for the reset of the device to complete */
  delay_ms(MXT_RESET_TIME);
  400314:	4832      	ldr	r0, [pc, #200]	; (4003e0 <mxt_init+0x150>)
  400316:	4b33      	ldr	r3, [pc, #204]	; (4003e4 <mxt_init+0x154>)
  400318:	4798      	blx	r3

  /* Write data to configuration registers in T7 configuration object */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40031a:	462a      	mov	r2, r5
  40031c:	2107      	movs	r1, #7
  40031e:	4620      	mov	r0, r4
  400320:	47b0      	blx	r6
  400322:	2220      	movs	r2, #32
  400324:	4601      	mov	r1, r0
  400326:	4620      	mov	r0, r4
  400328:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 0, 0x20);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40032a:	462a      	mov	r2, r5
  40032c:	2107      	movs	r1, #7
  40032e:	4620      	mov	r0, r4
  400330:	47b0      	blx	r6
  400332:	1c41      	adds	r1, r0, #1
  400334:	2210      	movs	r2, #16
  400336:	b289      	uxth	r1, r1
  400338:	4620      	mov	r0, r4
  40033a:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 1, 0x10);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40033c:	462a      	mov	r2, r5
  40033e:	2107      	movs	r1, #7
  400340:	4620      	mov	r0, r4
  400342:	47b0      	blx	r6
  400344:	1c81      	adds	r1, r0, #2
  400346:	224b      	movs	r2, #75	; 0x4b
  400348:	b289      	uxth	r1, r1
  40034a:	4620      	mov	r0, r4
  40034c:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 2, 0x4b);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40034e:	462a      	mov	r2, r5
  400350:	2107      	movs	r1, #7
  400352:	4620      	mov	r0, r4
  400354:	47b0      	blx	r6
  400356:	1cc1      	adds	r1, r0, #3
  400358:	2284      	movs	r2, #132	; 0x84
  40035a:	b289      	uxth	r1, r1
  40035c:	4620      	mov	r0, r4
  40035e:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 3, 0x84);

  /* Write predefined configuration data to configuration objects */
  mxt_write_config_object(device, mxt_get_object_address(device,
  400360:	462a      	mov	r2, r5
  400362:	2108      	movs	r1, #8
  400364:	4620      	mov	r0, r4
  400366:	47b0      	blx	r6
  400368:	aa19      	add	r2, sp, #100	; 0x64
  40036a:	4601      	mov	r1, r0
  40036c:	4620      	mov	r0, r4
  40036e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4003e8 <mxt_init+0x158>
  400372:	47c0      	blx	r8
  MXT_GEN_ACQUISITIONCONFIG_T8, 0), &t8_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  400374:	462a      	mov	r2, r5
  400376:	2109      	movs	r1, #9
  400378:	4620      	mov	r0, r4
  40037a:	47b0      	blx	r6
  40037c:	aa10      	add	r2, sp, #64	; 0x40
  40037e:	4601      	mov	r1, r0
  400380:	4620      	mov	r0, r4
  400382:	47c0      	blx	r8
  MXT_TOUCH_MULTITOUCHSCREEN_T9, 0), &t9_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  400384:	462a      	mov	r2, r5
  400386:	212e      	movs	r1, #46	; 0x2e
  400388:	4620      	mov	r0, r4
  40038a:	47b0      	blx	r6
  40038c:	aa0d      	add	r2, sp, #52	; 0x34
  40038e:	4601      	mov	r1, r0
  400390:	4620      	mov	r0, r4
  400392:	47c0      	blx	r8
  MXT_SPT_CTE_CONFIGURATION_T46, 0), &t46_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  400394:	462a      	mov	r2, r5
  400396:	2138      	movs	r1, #56	; 0x38
  400398:	4620      	mov	r0, r4
  40039a:	47b0      	blx	r6
  40039c:	aa04      	add	r2, sp, #16
  40039e:	4601      	mov	r1, r0
  4003a0:	4620      	mov	r0, r4
  4003a2:	47c0      	blx	r8
  MXT_PROCI_SHIELDLESS_T56, 0), &t56_object);

  /* Issue recalibration command to maXTouch device by writing a non-zero
  * value to the calibrate register */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  4003a4:	462a      	mov	r2, r5
  4003a6:	2106      	movs	r1, #6
  4003a8:	4620      	mov	r0, r4
  4003aa:	47b0      	blx	r6
  4003ac:	1c81      	adds	r1, r0, #2
  4003ae:	2201      	movs	r2, #1
  4003b0:	b289      	uxth	r1, r1
  4003b2:	4620      	mov	r0, r4
  4003b4:	47b8      	blx	r7
  MXT_GEN_COMMANDPROCESSOR_T6, 0)
  + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01);
  4003b6:	b01c      	add	sp, #112	; 0x70
  4003b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003bc:	00408cd8 	.word	0x00408cd8
  4003c0:	00061a80 	.word	0x00061a80
  4003c4:	08f0d180 	.word	0x08f0d180
  4003c8:	004018c9 	.word	0x004018c9
  4003cc:	40018000 	.word	0x40018000
  4003d0:	00401b15 	.word	0x00401b15
  4003d4:	004003ed 	.word	0x004003ed
  4003d8:	00400685 	.word	0x00400685
  4003dc:	0040073d 	.word	0x0040073d
  4003e0:	003228d8 	.word	0x003228d8
  4003e4:	20400001 	.word	0x20400001
  4003e8:	004006c5 	.word	0x004006c5

004003ec <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003ee:	b087      	sub	sp, #28
  4003f0:	4604      	mov	r4, r0
  4003f2:	460e      	mov	r6, r1
  4003f4:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4003f6:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4003f8:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4003fa:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4003fc:	2500      	movs	r5, #0
  4003fe:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  400400:	2007      	movs	r0, #7
  400402:	4b9d      	ldr	r3, [pc, #628]	; (400678 <mxt_init_device+0x28c>)
  400404:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  400406:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  400408:	9501      	str	r5, [sp, #4]
  40040a:	9505      	str	r5, [sp, #20]
  40040c:	2302      	movs	r3, #2
  40040e:	9302      	str	r3, [sp, #8]
  400410:	9003      	str	r0, [sp, #12]
  400412:	2307      	movs	r3, #7
  400414:	9304      	str	r3, [sp, #16]
  400416:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40041a:	a901      	add	r1, sp, #4
  40041c:	4630      	mov	r0, r6
  40041e:	4b97      	ldr	r3, [pc, #604]	; (40067c <mxt_init_device+0x290>)
  400420:	4798      	blx	r3
  400422:	1b40      	subs	r0, r0, r5
  400424:	bf18      	it	ne
  400426:	2001      	movne	r0, #1
  400428:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  40042a:	b108      	cbz	r0, 400430 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  40042c:	b007      	add	sp, #28
  40042e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400430:	6825      	ldr	r5, [r4, #0]
  400432:	79a8      	ldrb	r0, [r5, #6]
  400434:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400438:	0040      	lsls	r0, r0, #1
  40043a:	4b8f      	ldr	r3, [pc, #572]	; (400678 <mxt_init_device+0x28c>)
  40043c:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  40043e:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400440:	2300      	movs	r3, #0
  400442:	9301      	str	r3, [sp, #4]
  400444:	9304      	str	r3, [sp, #16]
  400446:	9305      	str	r3, [sp, #20]
  400448:	2307      	movs	r3, #7
  40044a:	f88d 3004 	strb.w	r3, [sp, #4]
  40044e:	2302      	movs	r3, #2
  400450:	9302      	str	r3, [sp, #8]
  400452:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  400454:	79ab      	ldrb	r3, [r5, #6]
  400456:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40045a:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  40045c:	9304      	str	r3, [sp, #16]
  40045e:	7b23      	ldrb	r3, [r4, #12]
  400460:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400464:	a901      	add	r1, sp, #4
  400466:	68a0      	ldr	r0, [r4, #8]
  400468:	4b84      	ldr	r3, [pc, #528]	; (40067c <mxt_init_device+0x290>)
  40046a:	4798      	blx	r3
  40046c:	3000      	adds	r0, #0
  40046e:	bf18      	it	ne
  400470:	2001      	movne	r0, #1
  400472:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  400474:	2800      	cmp	r0, #0
  400476:	d1d9      	bne.n	40042c <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  400478:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  40047a:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  40047c:	79bb      	ldrb	r3, [r7, #6]
  40047e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  400482:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  400484:	3607      	adds	r6, #7
  400486:	b2b6      	uxth	r6, r6
  400488:	463a      	mov	r2, r7
  40048a:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  40048c:	2100      	movs	r1, #0
		result ^= crcpoly;
  40048e:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400680 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400492:	f892 e001 	ldrb.w	lr, [r2, #1]
  400496:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400498:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  40049c:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  4004a0:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  4004a4:	bf18      	it	ne
  4004a6:	ea81 010c 	eorne.w	r1, r1, ip
  4004aa:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  4004ac:	42ba      	cmp	r2, r7
  4004ae:	d1f0      	bne.n	400492 <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4004b0:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4004b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4004b6:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  4004ba:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4004be:	d003      	beq.n	4004c8 <mxt_init_device+0xdc>
		result ^= crcpoly;
  4004c0:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4004c4:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4004c8:	f1a6 0708 	sub.w	r7, r6, #8
  4004cc:	2f01      	cmp	r7, #1
  4004ce:	dd12      	ble.n	4004f6 <mxt_init_device+0x10a>
  4004d0:	2301      	movs	r3, #1
		result ^= crcpoly;
  4004d2:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400680 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  4004d6:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4004d8:	784d      	ldrb	r5, [r1, #1]
  4004da:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4004dc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  4004e0:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  4004e4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  4004e8:	bf18      	it	ne
  4004ea:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4004ee:	3302      	adds	r3, #2
  4004f0:	b29b      	uxth	r3, r3
  4004f2:	42bb      	cmp	r3, r7
  4004f4:	dbef      	blt.n	4004d6 <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4004f6:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4004f8:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4004fc:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  400500:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  400504:	d003      	beq.n	40050e <mxt_init_device+0x122>
		result ^= crcpoly;
  400506:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  40050a:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  40050e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  400512:	2300      	movs	r3, #0
  400514:	9301      	str	r3, [sp, #4]
  400516:	9305      	str	r3, [sp, #20]
  400518:	f88d 6004 	strb.w	r6, [sp, #4]
  40051c:	0a36      	lsrs	r6, r6, #8
  40051e:	f88d 6005 	strb.w	r6, [sp, #5]
  400522:	2302      	movs	r3, #2
  400524:	9302      	str	r3, [sp, #8]
  400526:	f8cd d00c 	str.w	sp, [sp, #12]
  40052a:	2303      	movs	r3, #3
  40052c:	9304      	str	r3, [sp, #16]
  40052e:	7b23      	ldrb	r3, [r4, #12]
  400530:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400534:	a901      	add	r1, sp, #4
  400536:	68a0      	ldr	r0, [r4, #8]
  400538:	4b50      	ldr	r3, [pc, #320]	; (40067c <mxt_init_device+0x290>)
  40053a:	4798      	blx	r3
  40053c:	b328      	cbz	r0, 40058a <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  40053e:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  400542:	42ab      	cmp	r3, r5
  400544:	f040 808b 	bne.w	40065e <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400548:	6825      	ldr	r5, [r4, #0]
  40054a:	79a8      	ldrb	r0, [r5, #6]
  40054c:	b198      	cbz	r0, 400576 <mxt_init_device+0x18a>
  40054e:	2300      	movs	r3, #0
  400550:	3301      	adds	r3, #1
  400552:	b2da      	uxtb	r2, r3
  400554:	4290      	cmp	r0, r2
  400556:	d8fb      	bhi.n	400550 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  400558:	6862      	ldr	r2, [r4, #4]
  40055a:	1e43      	subs	r3, r0, #1
  40055c:	b2db      	uxtb	r3, r3
  40055e:	3301      	adds	r3, #1
  400560:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400564:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  400568:	2000      	movs	r0, #0
  40056a:	7953      	ldrb	r3, [r2, #5]
  40056c:	4418      	add	r0, r3
  40056e:	b2c0      	uxtb	r0, r0
  400570:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400572:	4291      	cmp	r1, r2
  400574:	d1f9      	bne.n	40056a <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  400576:	0040      	lsls	r0, r0, #1
  400578:	4b3f      	ldr	r3, [pc, #252]	; (400678 <mxt_init_device+0x28c>)
  40057a:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  40057c:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40057e:	79ab      	ldrb	r3, [r5, #6]
  400580:	b173      	cbz	r3, 4005a0 <mxt_init_device+0x1b4>
  400582:	2700      	movs	r7, #0
  400584:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400586:	46be      	mov	lr, r7
  400588:	e037      	b.n	4005fa <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  40058a:	f89d 2002 	ldrb.w	r2, [sp, #2]
  40058e:	f89d 3000 	ldrb.w	r3, [sp]
  400592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400596:	f89d 2001 	ldrb.w	r2, [sp, #1]
  40059a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40059e:	e7d0      	b.n	400542 <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  4005a0:	f06f 0003 	mvn.w	r0, #3
  4005a4:	e742      	b.n	40042c <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4005a6:	3001      	adds	r0, #1
  4005a8:	b2c0      	uxtb	r0, r0
  4005aa:	6862      	ldr	r2, [r4, #4]
  4005ac:	1953      	adds	r3, r2, r5
  4005ae:	7919      	ldrb	r1, [r3, #4]
  4005b0:	4281      	cmp	r1, r0
  4005b2:	d31c      	bcc.n	4005ee <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  4005b4:	795b      	ldrb	r3, [r3, #5]
  4005b6:	2b00      	cmp	r3, #0
  4005b8:	d0f5      	beq.n	4005a6 <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4005ba:	6862      	ldr	r2, [r4, #4]
  4005bc:	442a      	add	r2, r5
  4005be:	7953      	ldrb	r3, [r2, #5]
  4005c0:	2b00      	cmp	r3, #0
  4005c2:	d0f0      	beq.n	4005a6 <mxt_init_device+0x1ba>
  4005c4:	4633      	mov	r3, r6
							device->object_list[i].type;
  4005c6:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  4005c8:	6962      	ldr	r2, [r4, #20]
  4005ca:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  4005ce:	6962      	ldr	r2, [r4, #20]
  4005d0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4005d4:	7050      	strb	r0, [r2, #1]
					id_index++;
  4005d6:	3301      	adds	r3, #1
  4005d8:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4005da:	6862      	ldr	r2, [r4, #4]
  4005dc:	442a      	add	r2, r5
  4005de:	1b99      	subs	r1, r3, r6
  4005e0:	f892 c005 	ldrb.w	ip, [r2, #5]
  4005e4:	b2c9      	uxtb	r1, r1
  4005e6:	458c      	cmp	ip, r1
  4005e8:	d8ed      	bhi.n	4005c6 <mxt_init_device+0x1da>
					id_index++;
  4005ea:	461e      	mov	r6, r3
  4005ec:	e7db      	b.n	4005a6 <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4005ee:	3701      	adds	r7, #1
  4005f0:	b2ff      	uxtb	r7, r7
  4005f2:	6823      	ldr	r3, [r4, #0]
  4005f4:	799b      	ldrb	r3, [r3, #6]
  4005f6:	429f      	cmp	r7, r3
  4005f8:	d207      	bcs.n	40060a <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4005fa:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  4005fe:	005a      	lsls	r2, r3, #1
  400600:	4615      	mov	r5, r2
  400602:	6863      	ldr	r3, [r4, #4]
  400604:	4413      	add	r3, r2
  400606:	4670      	mov	r0, lr
  400608:	e7d4      	b.n	4005b4 <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40060a:	b35b      	cbz	r3, 400664 <mxt_init_device+0x278>
  40060c:	4610      	mov	r0, r2
  40060e:	3b01      	subs	r3, #1
  400610:	b2db      	uxtb	r3, r3
  400612:	3301      	adds	r3, #1
  400614:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400618:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  40061c:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  40061e:	7943      	ldrb	r3, [r0, #5]
  400620:	4419      	add	r1, r3
  400622:	b2c9      	uxtb	r1, r1
  400624:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400626:	4282      	cmp	r2, r0
  400628:	d1f9      	bne.n	40061e <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  40062a:	b1f1      	cbz	r1, 40066a <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  40062c:	6962      	ldr	r2, [r4, #20]
  40062e:	7813      	ldrb	r3, [r2, #0]
  400630:	2b09      	cmp	r3, #9
  400632:	d00f      	beq.n	400654 <mxt_init_device+0x268>
  400634:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  400636:	3301      	adds	r3, #1
  400638:	b2db      	uxtb	r3, r3
  40063a:	428b      	cmp	r3, r1
  40063c:	d00c      	beq.n	400658 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  40063e:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  400642:	2809      	cmp	r0, #9
  400644:	d1f7      	bne.n	400636 <mxt_init_device+0x24a>
			return i;
  400646:	b25b      	sxtb	r3, r3
	if (status == -1) {
  400648:	f1b3 3fff 	cmp.w	r3, #4294967295
  40064c:	d010      	beq.n	400670 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  40064e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400650:	2000      	movs	r0, #0
  400652:	e6eb      	b.n	40042c <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  400654:	2300      	movs	r3, #0
  400656:	e7f6      	b.n	400646 <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  400658:	f06f 0003 	mvn.w	r0, #3
  40065c:	e6e6      	b.n	40042c <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  40065e:	f06f 0003 	mvn.w	r0, #3
  400662:	e6e3      	b.n	40042c <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400664:	f06f 0003 	mvn.w	r0, #3
  400668:	e6e0      	b.n	40042c <mxt_init_device+0x40>
  40066a:	f06f 0003 	mvn.w	r0, #3
  40066e:	e6dd      	b.n	40042c <mxt_init_device+0x40>
  400670:	f06f 0003 	mvn.w	r0, #3
  400674:	e6da      	b.n	40042c <mxt_init_device+0x40>
  400676:	bf00      	nop
  400678:	00405ddd 	.word	0x00405ddd
  40067c:	00401b49 	.word	0x00401b49
  400680:	0080001b 	.word	0x0080001b

00400684 <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  400684:	6803      	ldr	r3, [r0, #0]
  400686:	799a      	ldrb	r2, [r3, #6]
  400688:	b1d2      	cbz	r2, 4006c0 <mxt_get_object_address+0x3c>
{
  40068a:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  40068c:	6844      	ldr	r4, [r0, #4]
  40068e:	7823      	ldrb	r3, [r4, #0]
  400690:	428b      	cmp	r3, r1
  400692:	d00e      	beq.n	4006b2 <mxt_get_object_address+0x2e>
  400694:	1da3      	adds	r3, r4, #6
  400696:	3a01      	subs	r2, #1
  400698:	b2d2      	uxtb	r2, r2
  40069a:	3201      	adds	r2, #1
  40069c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4006a0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  4006a4:	4293      	cmp	r3, r2
  4006a6:	d009      	beq.n	4006bc <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  4006a8:	461c      	mov	r4, r3
  4006aa:	f813 0b06 	ldrb.w	r0, [r3], #6
  4006ae:	4288      	cmp	r0, r1
  4006b0:	d1f8      	bne.n	4006a4 <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  4006b2:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  4006b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006ba:	4770      	bx	lr
	return 0;
  4006bc:	2000      	movs	r0, #0
  4006be:	e7fa      	b.n	4006b6 <mxt_get_object_address+0x32>
  4006c0:	2000      	movs	r0, #0
  4006c2:	4770      	bx	lr

004006c4 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  4006c4:	b530      	push	{r4, r5, lr}
  4006c6:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4006c8:	2300      	movs	r3, #0
  4006ca:	9301      	str	r3, [sp, #4]
  4006cc:	9304      	str	r3, [sp, #16]
  4006ce:	9305      	str	r3, [sp, #20]
  4006d0:	f88d 1004 	strb.w	r1, [sp, #4]
  4006d4:	0a0b      	lsrs	r3, r1, #8
  4006d6:	f88d 3005 	strb.w	r3, [sp, #5]
  4006da:	2302      	movs	r3, #2
  4006dc:	9302      	str	r3, [sp, #8]
  4006de:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4006e0:	6803      	ldr	r3, [r0, #0]
  4006e2:	799a      	ldrb	r2, [r3, #6]
  4006e4:	b1ba      	cbz	r2, 400716 <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4006e6:	6844      	ldr	r4, [r0, #4]
  4006e8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4006ec:	428b      	cmp	r3, r1
  4006ee:	d00f      	beq.n	400710 <mxt_write_config_object+0x4c>
  4006f0:	1da3      	adds	r3, r4, #6
  4006f2:	3a01      	subs	r2, #1
  4006f4:	b2d2      	uxtb	r2, r2
  4006f6:	3201      	adds	r2, #1
  4006f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4006fc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400700:	4293      	cmp	r3, r2
  400702:	d016      	beq.n	400732 <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  400704:	461c      	mov	r4, r3
  400706:	3306      	adds	r3, #6
  400708:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  40070c:	428d      	cmp	r5, r1
  40070e:	d1f7      	bne.n	400700 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  400710:	78e2      	ldrb	r2, [r4, #3]
  400712:	3201      	adds	r2, #1
  400714:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  400716:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  400718:	7b03      	ldrb	r3, [r0, #12]
  40071a:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  40071e:	a901      	add	r1, sp, #4
  400720:	6880      	ldr	r0, [r0, #8]
  400722:	4b05      	ldr	r3, [pc, #20]	; (400738 <mxt_write_config_object+0x74>)
  400724:	4798      	blx	r3
  400726:	3000      	adds	r0, #0
  400728:	bf18      	it	ne
  40072a:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  40072c:	4240      	negs	r0, r0
  40072e:	b007      	add	sp, #28
  400730:	bd30      	pop	{r4, r5, pc}
	return 0;
  400732:	2200      	movs	r2, #0
  400734:	e7ef      	b.n	400716 <mxt_write_config_object+0x52>
  400736:	bf00      	nop
  400738:	00401bf5 	.word	0x00401bf5

0040073c <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  40073c:	b500      	push	{lr}
  40073e:	b089      	sub	sp, #36	; 0x24
  400740:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400744:	2300      	movs	r3, #0
  400746:	9303      	str	r3, [sp, #12]
  400748:	9307      	str	r3, [sp, #28]
  40074a:	f88d 100c 	strb.w	r1, [sp, #12]
  40074e:	0a09      	lsrs	r1, r1, #8
  400750:	f88d 100d 	strb.w	r1, [sp, #13]
  400754:	2302      	movs	r3, #2
  400756:	9304      	str	r3, [sp, #16]
  400758:	f10d 0307 	add.w	r3, sp, #7
  40075c:	9305      	str	r3, [sp, #20]
  40075e:	2301      	movs	r3, #1
  400760:	9306      	str	r3, [sp, #24]
  400762:	7b03      	ldrb	r3, [r0, #12]
  400764:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400768:	a903      	add	r1, sp, #12
  40076a:	6880      	ldr	r0, [r0, #8]
  40076c:	4b04      	ldr	r3, [pc, #16]	; (400780 <mxt_write_config_reg+0x44>)
  40076e:	4798      	blx	r3
  400770:	3000      	adds	r0, #0
  400772:	bf18      	it	ne
  400774:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  400776:	4240      	negs	r0, r0
  400778:	b009      	add	sp, #36	; 0x24
  40077a:	f85d fb04 	ldr.w	pc, [sp], #4
  40077e:	bf00      	nop
  400780:	00401bf5 	.word	0x00401bf5

00400784 <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  400784:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400786:	4b07      	ldr	r3, [pc, #28]	; (4007a4 <mxt_is_message_pending+0x20>)
  400788:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  40078c:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40078e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400790:	f002 021f 	and.w	r2, r2, #31
  400794:	2301      	movs	r3, #1
  400796:	fa03 f202 	lsl.w	r2, r3, r2
  40079a:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  40079c:	bf0c      	ite	eq
  40079e:	4618      	moveq	r0, r3
  4007a0:	2000      	movne	r0, #0
  4007a2:	4770      	bx	lr
  4007a4:	00200707 	.word	0x00200707

004007a8 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  4007a8:	b530      	push	{r4, r5, lr}
  4007aa:	b087      	sub	sp, #28
  4007ac:	4604      	mov	r4, r0
  4007ae:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  4007b0:	2200      	movs	r2, #0
  4007b2:	2105      	movs	r1, #5
  4007b4:	4b0d      	ldr	r3, [pc, #52]	; (4007ec <mxt_read_message+0x44>)
  4007b6:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4007b8:	2300      	movs	r3, #0
  4007ba:	9301      	str	r3, [sp, #4]
  4007bc:	9305      	str	r3, [sp, #20]
  4007be:	f88d 0004 	strb.w	r0, [sp, #4]
  4007c2:	0a00      	lsrs	r0, r0, #8
  4007c4:	f88d 0005 	strb.w	r0, [sp, #5]
  4007c8:	2302      	movs	r3, #2
  4007ca:	9302      	str	r3, [sp, #8]
  4007cc:	9503      	str	r5, [sp, #12]
  4007ce:	2309      	movs	r3, #9
  4007d0:	9304      	str	r3, [sp, #16]
  4007d2:	7b23      	ldrb	r3, [r4, #12]
  4007d4:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4007d8:	a901      	add	r1, sp, #4
  4007da:	68a0      	ldr	r0, [r4, #8]
  4007dc:	4b04      	ldr	r3, [pc, #16]	; (4007f0 <mxt_read_message+0x48>)
  4007de:	4798      	blx	r3
  4007e0:	3000      	adds	r0, #0
  4007e2:	bf18      	it	ne
  4007e4:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  4007e6:	4240      	negs	r0, r0
  4007e8:	b007      	add	sp, #28
  4007ea:	bd30      	pop	{r4, r5, pc}
  4007ec:	00400685 	.word	0x00400685
  4007f0:	00401b49 	.word	0x00401b49

004007f4 <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  4007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4007f6:	b085      	sub	sp, #20
  4007f8:	4604      	mov	r4, r0
  4007fa:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  4007fc:	4d17      	ldr	r5, [pc, #92]	; (40085c <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4007fe:	4f18      	ldr	r7, [pc, #96]	; (400860 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  400800:	4620      	mov	r0, r4
  400802:	47a8      	blx	r5
  400804:	b328      	cbz	r0, 400852 <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  400806:	a901      	add	r1, sp, #4
  400808:	4620      	mov	r0, r4
  40080a:	47b8      	blx	r7
  40080c:	4603      	mov	r3, r0
  40080e:	bb10      	cbnz	r0, 400856 <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  400810:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400814:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  400816:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  40081a:	2a09      	cmp	r2, #9
  40081c:	d1f0      	bne.n	400800 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  40081e:	7f22      	ldrb	r2, [r4, #28]
  400820:	1a9b      	subs	r3, r3, r2
  400822:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  400824:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400828:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  40082a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  40082e:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  400832:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  400834:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  400838:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  40083a:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  40083e:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  400842:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  400846:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  400848:	f89d 3009 	ldrb.w	r3, [sp, #9]
  40084c:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  40084e:	2300      	movs	r3, #0
  400850:	e001      	b.n	400856 <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  400852:	f06f 0303 	mvn.w	r3, #3
}
  400856:	4618      	mov	r0, r3
  400858:	b005      	add	sp, #20
  40085a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40085c:	00400785 	.word	0x00400785
  400860:	004007a9 	.word	0x004007a9

00400864 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400864:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400866:	4810      	ldr	r0, [pc, #64]	; (4008a8 <sysclk_init+0x44>)
  400868:	4b10      	ldr	r3, [pc, #64]	; (4008ac <sysclk_init+0x48>)
  40086a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40086c:	213e      	movs	r1, #62	; 0x3e
  40086e:	2000      	movs	r0, #0
  400870:	4b0f      	ldr	r3, [pc, #60]	; (4008b0 <sysclk_init+0x4c>)
  400872:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400874:	4c0f      	ldr	r4, [pc, #60]	; (4008b4 <sysclk_init+0x50>)
  400876:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400878:	2800      	cmp	r0, #0
  40087a:	d0fc      	beq.n	400876 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40087c:	4b0e      	ldr	r3, [pc, #56]	; (4008b8 <sysclk_init+0x54>)
  40087e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400880:	4a0e      	ldr	r2, [pc, #56]	; (4008bc <sysclk_init+0x58>)
  400882:	4b0f      	ldr	r3, [pc, #60]	; (4008c0 <sysclk_init+0x5c>)
  400884:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400886:	4c0f      	ldr	r4, [pc, #60]	; (4008c4 <sysclk_init+0x60>)
  400888:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40088a:	2800      	cmp	r0, #0
  40088c:	d0fc      	beq.n	400888 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40088e:	2002      	movs	r0, #2
  400890:	4b0d      	ldr	r3, [pc, #52]	; (4008c8 <sysclk_init+0x64>)
  400892:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400894:	2000      	movs	r0, #0
  400896:	4b0d      	ldr	r3, [pc, #52]	; (4008cc <sysclk_init+0x68>)
  400898:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40089a:	4b0d      	ldr	r3, [pc, #52]	; (4008d0 <sysclk_init+0x6c>)
  40089c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40089e:	480d      	ldr	r0, [pc, #52]	; (4008d4 <sysclk_init+0x70>)
  4008a0:	4b02      	ldr	r3, [pc, #8]	; (4008ac <sysclk_init+0x48>)
  4008a2:	4798      	blx	r3
  4008a4:	bd10      	pop	{r4, pc}
  4008a6:	bf00      	nop
  4008a8:	07270e00 	.word	0x07270e00
  4008ac:	00401fa1 	.word	0x00401fa1
  4008b0:	00401845 	.word	0x00401845
  4008b4:	00401899 	.word	0x00401899
  4008b8:	004018a9 	.word	0x004018a9
  4008bc:	20183f01 	.word	0x20183f01
  4008c0:	400e0600 	.word	0x400e0600
  4008c4:	004018b9 	.word	0x004018b9
  4008c8:	004017a9 	.word	0x004017a9
  4008cc:	004017e1 	.word	0x004017e1
  4008d0:	00401e95 	.word	0x00401e95
  4008d4:	11e1a300 	.word	0x11e1a300

004008d8 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4008d8:	b510      	push	{r4, lr}
  4008da:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4008dc:	4b10      	ldr	r3, [pc, #64]	; (400920 <spi_master_init+0x48>)
  4008de:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4008e0:	2380      	movs	r3, #128	; 0x80
  4008e2:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4008e4:	6863      	ldr	r3, [r4, #4]
  4008e6:	f043 0301 	orr.w	r3, r3, #1
  4008ea:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4008ec:	6863      	ldr	r3, [r4, #4]
  4008ee:	f043 0310 	orr.w	r3, r3, #16
  4008f2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4008f4:	6863      	ldr	r3, [r4, #4]
  4008f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4008fa:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4008fc:	2100      	movs	r1, #0
  4008fe:	4620      	mov	r0, r4
  400900:	4b08      	ldr	r3, [pc, #32]	; (400924 <spi_master_init+0x4c>)
  400902:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400904:	6863      	ldr	r3, [r4, #4]
  400906:	f023 0302 	bic.w	r3, r3, #2
  40090a:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  40090c:	6863      	ldr	r3, [r4, #4]
  40090e:	f023 0304 	bic.w	r3, r3, #4
  400912:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400914:	2100      	movs	r1, #0
  400916:	4620      	mov	r0, r4
  400918:	4b03      	ldr	r3, [pc, #12]	; (400928 <spi_master_init+0x50>)
  40091a:	4798      	blx	r3
  40091c:	bd10      	pop	{r4, pc}
  40091e:	bf00      	nop
  400920:	004018e9 	.word	0x004018e9
  400924:	00401915 	.word	0x00401915
  400928:	0040192b 	.word	0x0040192b

0040092c <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  40092c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400930:	4604      	mov	r4, r0
  400932:	460d      	mov	r5, r1
  400934:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  400936:	4915      	ldr	r1, [pc, #84]	; (40098c <spi_master_setup_device+0x60>)
  400938:	4618      	mov	r0, r3
  40093a:	4b15      	ldr	r3, [pc, #84]	; (400990 <spi_master_setup_device+0x64>)
  40093c:	4798      	blx	r3
  40093e:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400940:	2300      	movs	r3, #0
  400942:	461a      	mov	r2, r3
  400944:	6829      	ldr	r1, [r5, #0]
  400946:	4620      	mov	r0, r4
  400948:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4009a8 <spi_master_setup_device+0x7c>
  40094c:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  40094e:	2208      	movs	r2, #8
  400950:	6829      	ldr	r1, [r5, #0]
  400952:	4620      	mov	r0, r4
  400954:	4b0f      	ldr	r3, [pc, #60]	; (400994 <spi_master_setup_device+0x68>)
  400956:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400958:	b2fa      	uxtb	r2, r7
  40095a:	6829      	ldr	r1, [r5, #0]
  40095c:	4620      	mov	r0, r4
  40095e:	4b0e      	ldr	r3, [pc, #56]	; (400998 <spi_master_setup_device+0x6c>)
  400960:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400962:	2208      	movs	r2, #8
  400964:	6829      	ldr	r1, [r5, #0]
  400966:	4620      	mov	r0, r4
  400968:	4b0c      	ldr	r3, [pc, #48]	; (40099c <spi_master_setup_device+0x70>)
  40096a:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  40096c:	0872      	lsrs	r2, r6, #1
  40096e:	6829      	ldr	r1, [r5, #0]
  400970:	4620      	mov	r0, r4
  400972:	4b0b      	ldr	r3, [pc, #44]	; (4009a0 <spi_master_setup_device+0x74>)
  400974:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400976:	f086 0201 	eor.w	r2, r6, #1
  40097a:	f002 0201 	and.w	r2, r2, #1
  40097e:	6829      	ldr	r1, [r5, #0]
  400980:	4620      	mov	r0, r4
  400982:	4b08      	ldr	r3, [pc, #32]	; (4009a4 <spi_master_setup_device+0x78>)
  400984:	4798      	blx	r3
  400986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40098a:	bf00      	nop
  40098c:	08f0d180 	.word	0x08f0d180
  400990:	00401a07 	.word	0x00401a07
  400994:	004019f3 	.word	0x004019f3
  400998:	00401a1d 	.word	0x00401a1d
  40099c:	004019ad 	.word	0x004019ad
  4009a0:	00401971 	.word	0x00401971
  4009a4:	0040198f 	.word	0x0040198f
  4009a8:	00401a45 	.word	0x00401a45

004009ac <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  4009ac:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4009ae:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  4009b0:	f013 0f04 	tst.w	r3, #4
  4009b4:	d006      	beq.n	4009c4 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  4009b6:	6809      	ldr	r1, [r1, #0]
  4009b8:	290f      	cmp	r1, #15
  4009ba:	d900      	bls.n	4009be <spi_select_device+0x12>
  4009bc:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4009be:	4b06      	ldr	r3, [pc, #24]	; (4009d8 <spi_select_device+0x2c>)
  4009c0:	4798      	blx	r3
  4009c2:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4009c4:	6809      	ldr	r1, [r1, #0]
  4009c6:	2903      	cmp	r1, #3
  4009c8:	d8f8      	bhi.n	4009bc <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  4009ca:	2301      	movs	r3, #1
  4009cc:	fa03 f101 	lsl.w	r1, r3, r1
  4009d0:	43c9      	mvns	r1, r1
  4009d2:	4b01      	ldr	r3, [pc, #4]	; (4009d8 <spi_select_device+0x2c>)
  4009d4:	4798      	blx	r3
		}
	}
}
  4009d6:	e7f1      	b.n	4009bc <spi_select_device+0x10>
  4009d8:	00401915 	.word	0x00401915

004009dc <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4009dc:	b11a      	cbz	r2, 4009e6 <spi_write_packet+0xa>
{
  4009de:	b410      	push	{r4}
  4009e0:	460c      	mov	r4, r1
  4009e2:	4411      	add	r1, r2
  4009e4:	e006      	b.n	4009f4 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4009e6:	2000      	movs	r0, #0
  4009e8:	4770      	bx	lr
		val = data[i];
  4009ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4009ee:	60c3      	str	r3, [r0, #12]
	while (len) {
  4009f0:	42a1      	cmp	r1, r4
  4009f2:	d00c      	beq.n	400a0e <spi_write_packet+0x32>
{
  4009f4:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4009f8:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  4009fa:	f012 0f02 	tst.w	r2, #2
  4009fe:	d1f4      	bne.n	4009ea <spi_write_packet+0xe>
			if (!timeout--) {
  400a00:	3b01      	subs	r3, #1
  400a02:	d1f9      	bne.n	4009f8 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  400a04:	f06f 0002 	mvn.w	r0, #2
}
  400a08:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a0c:	4770      	bx	lr
	return STATUS_OK;
  400a0e:	2000      	movs	r0, #0
  400a10:	e7fa      	b.n	400a08 <spi_write_packet+0x2c>

00400a12 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  400a12:	b13a      	cbz	r2, 400a24 <spi_read_packet+0x12>
{
  400a14:	b470      	push	{r4, r5, r6}
  400a16:	4615      	mov	r5, r2
  400a18:	460c      	mov	r4, r1
  400a1a:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a1c:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400a1e:	f240 2101 	movw	r1, #513	; 0x201
  400a22:	e012      	b.n	400a4a <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  400a24:	2000      	movs	r0, #0
  400a26:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a28:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  400a2a:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400a2e:	6902      	ldr	r2, [r0, #16]
  400a30:	ea31 0202 	bics.w	r2, r1, r2
  400a34:	d004      	beq.n	400a40 <spi_read_packet+0x2e>
			if (!timeout--) {
  400a36:	3b01      	subs	r3, #1
  400a38:	d1f9      	bne.n	400a2e <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  400a3a:	f06f 0002 	mvn.w	r0, #2
  400a3e:	e00e      	b.n	400a5e <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400a40:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  400a42:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  400a46:	42a5      	cmp	r5, r4
  400a48:	d00b      	beq.n	400a62 <spi_read_packet+0x50>
{
  400a4a:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400a4e:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400a50:	f012 0f02 	tst.w	r2, #2
  400a54:	d1e8      	bne.n	400a28 <spi_read_packet+0x16>
			if (!timeout--) {
  400a56:	3b01      	subs	r3, #1
  400a58:	d1f9      	bne.n	400a4e <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  400a5a:	f06f 0002 	mvn.w	r0, #2
}
  400a5e:	bc70      	pop	{r4, r5, r6}
  400a60:	4770      	bx	lr
	return STATUS_OK;
  400a62:	2000      	movs	r0, #0
  400a64:	e7fb      	b.n	400a5e <spi_read_packet+0x4c>
	...

00400a68 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400a6c:	b980      	cbnz	r0, 400a90 <_read+0x28>
  400a6e:	460c      	mov	r4, r1
  400a70:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400a72:	2a00      	cmp	r2, #0
  400a74:	dd0f      	ble.n	400a96 <_read+0x2e>
  400a76:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400a78:	4e08      	ldr	r6, [pc, #32]	; (400a9c <_read+0x34>)
  400a7a:	4d09      	ldr	r5, [pc, #36]	; (400aa0 <_read+0x38>)
  400a7c:	6830      	ldr	r0, [r6, #0]
  400a7e:	4621      	mov	r1, r4
  400a80:	682b      	ldr	r3, [r5, #0]
  400a82:	4798      	blx	r3
		ptr++;
  400a84:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400a86:	42bc      	cmp	r4, r7
  400a88:	d1f8      	bne.n	400a7c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400a8a:	4640      	mov	r0, r8
  400a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400a90:	f04f 38ff 	mov.w	r8, #4294967295
  400a94:	e7f9      	b.n	400a8a <_read+0x22>
	for (; len > 0; --len) {
  400a96:	4680      	mov	r8, r0
  400a98:	e7f7      	b.n	400a8a <_read+0x22>
  400a9a:	bf00      	nop
  400a9c:	2040c9f4 	.word	0x2040c9f4
  400aa0:	2040c9ec 	.word	0x2040c9ec

00400aa4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400aa4:	3801      	subs	r0, #1
  400aa6:	2802      	cmp	r0, #2
  400aa8:	d815      	bhi.n	400ad6 <_write+0x32>
{
  400aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400aae:	460e      	mov	r6, r1
  400ab0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400ab2:	b19a      	cbz	r2, 400adc <_write+0x38>
  400ab4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400ab6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400af0 <_write+0x4c>
  400aba:	4f0c      	ldr	r7, [pc, #48]	; (400aec <_write+0x48>)
  400abc:	f8d8 0000 	ldr.w	r0, [r8]
  400ac0:	f815 1b01 	ldrb.w	r1, [r5], #1
  400ac4:	683b      	ldr	r3, [r7, #0]
  400ac6:	4798      	blx	r3
  400ac8:	2800      	cmp	r0, #0
  400aca:	db0a      	blt.n	400ae2 <_write+0x3e>
  400acc:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400ace:	3c01      	subs	r4, #1
  400ad0:	d1f4      	bne.n	400abc <_write+0x18>
  400ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400ad6:	f04f 30ff 	mov.w	r0, #4294967295
  400ada:	4770      	bx	lr
	for (; len != 0; --len) {
  400adc:	4610      	mov	r0, r2
  400ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400ae2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400aea:	bf00      	nop
  400aec:	2040c9f0 	.word	0x2040c9f0
  400af0:	2040c9f4 	.word	0x2040c9f4

00400af4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400af8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400afc:	4b9e      	ldr	r3, [pc, #632]	; (400d78 <board_init+0x284>)
  400afe:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400b00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b04:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400b08:	4b9c      	ldr	r3, [pc, #624]	; (400d7c <board_init+0x288>)
  400b0a:	2200      	movs	r2, #0
  400b0c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400b10:	695a      	ldr	r2, [r3, #20]
  400b12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400b16:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400b18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b1c:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400b20:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400b24:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400b28:	f007 0007 	and.w	r0, r7, #7
  400b2c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400b2e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400b32:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400b36:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400b3a:	f3bf 8f4f 	dsb	sy
  400b3e:	f04f 34ff 	mov.w	r4, #4294967295
  400b42:	fa04 fc00 	lsl.w	ip, r4, r0
  400b46:	fa06 f000 	lsl.w	r0, r6, r0
  400b4a:	fa04 f40e 	lsl.w	r4, r4, lr
  400b4e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400b52:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400b54:	463a      	mov	r2, r7
  400b56:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400b58:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400b5c:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400b60:	3a01      	subs	r2, #1
  400b62:	4423      	add	r3, r4
  400b64:	f1b2 3fff 	cmp.w	r2, #4294967295
  400b68:	d1f6      	bne.n	400b58 <board_init+0x64>
        } while(sets--);
  400b6a:	3e01      	subs	r6, #1
  400b6c:	4460      	add	r0, ip
  400b6e:	f1b6 3fff 	cmp.w	r6, #4294967295
  400b72:	d1ef      	bne.n	400b54 <board_init+0x60>
  400b74:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400b78:	4b80      	ldr	r3, [pc, #512]	; (400d7c <board_init+0x288>)
  400b7a:	695a      	ldr	r2, [r3, #20]
  400b7c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400b80:	615a      	str	r2, [r3, #20]
  400b82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b86:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b8a:	4a7d      	ldr	r2, [pc, #500]	; (400d80 <board_init+0x28c>)
  400b8c:	497d      	ldr	r1, [pc, #500]	; (400d84 <board_init+0x290>)
  400b8e:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b90:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400b94:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400b96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b9a:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400b9e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400ba2:	f022 0201 	bic.w	r2, r2, #1
  400ba6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400baa:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400bae:	f022 0201 	bic.w	r2, r2, #1
  400bb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400bb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bba:	f3bf 8f6f 	isb	sy
  400bbe:	200a      	movs	r0, #10
  400bc0:	4c71      	ldr	r4, [pc, #452]	; (400d88 <board_init+0x294>)
  400bc2:	47a0      	blx	r4
  400bc4:	200b      	movs	r0, #11
  400bc6:	47a0      	blx	r4
  400bc8:	200c      	movs	r0, #12
  400bca:	47a0      	blx	r4
  400bcc:	2010      	movs	r0, #16
  400bce:	47a0      	blx	r4
  400bd0:	2011      	movs	r0, #17
  400bd2:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bd4:	4e6d      	ldr	r6, [pc, #436]	; (400d8c <board_init+0x298>)
  400bd6:	f44f 7880 	mov.w	r8, #256	; 0x100
  400bda:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bde:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400be2:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400be6:	4c6a      	ldr	r4, [pc, #424]	; (400d90 <board_init+0x29c>)
  400be8:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400bec:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bee:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400bf2:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400bf4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bf8:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  400bfa:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  400bfc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400c00:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400c06:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c08:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400c0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400c0e:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400c10:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400c14:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400c18:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400c1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400c20:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c22:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c26:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c28:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c2a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c2e:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400c30:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400c34:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c36:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400c38:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400c3c:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c3e:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400c40:	4a54      	ldr	r2, [pc, #336]	; (400d94 <board_init+0x2a0>)
  400c42:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400c46:	f043 0310 	orr.w	r3, r3, #16
  400c4a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400c4e:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  400c52:	2310      	movs	r3, #16
  400c54:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c5a:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c5c:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400c62:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400c64:	4319      	orrs	r1, r3
  400c66:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400c68:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400c6a:	4319      	orrs	r1, r3
  400c6c:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c6e:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400c70:	2208      	movs	r2, #8
  400c72:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c74:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c78:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c7a:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c7c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c80:	6f21      	ldr	r1, [r4, #112]	; 0x70
  400c82:	f021 0108 	bic.w	r1, r1, #8
  400c86:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c88:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400c8a:	f021 0108 	bic.w	r1, r1, #8
  400c8e:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c90:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  400c92:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c94:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c98:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c9a:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c9c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400ca0:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400ca2:	f022 0210 	bic.w	r2, r2, #16
  400ca6:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ca8:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400caa:	f022 0210 	bic.w	r2, r2, #16
  400cae:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400cb0:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400cb2:	2300      	movs	r3, #0
  400cb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400cb8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400cbc:	4630      	mov	r0, r6
  400cbe:	4f36      	ldr	r7, [pc, #216]	; (400d98 <board_init+0x2a4>)
  400cc0:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400cc2:	2300      	movs	r3, #0
  400cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400cc8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400ccc:	4630      	mov	r0, r6
  400cce:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400cd0:	2301      	movs	r3, #1
  400cd2:	22ff      	movs	r2, #255	; 0xff
  400cd4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400cd8:	4630      	mov	r0, r6
  400cda:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400cdc:	2301      	movs	r3, #1
  400cde:	223f      	movs	r2, #63	; 0x3f
  400ce0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ce4:	482d      	ldr	r0, [pc, #180]	; (400d9c <board_init+0x2a8>)
  400ce6:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400ce8:	2301      	movs	r3, #1
  400cea:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400cee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400cf2:	4620      	mov	r0, r4
  400cf4:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400cf6:	2301      	movs	r3, #1
  400cf8:	4642      	mov	r2, r8
  400cfa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400cfe:	4630      	mov	r0, r6
  400d00:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400d02:	2301      	movs	r3, #1
  400d04:	462a      	mov	r2, r5
  400d06:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400d0a:	4630      	mov	r0, r6
  400d0c:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400d0e:	2301      	movs	r3, #1
  400d10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400d14:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400d18:	4821      	ldr	r0, [pc, #132]	; (400da0 <board_init+0x2ac>)
  400d1a:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  400d1c:	2300      	movs	r3, #0
  400d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400d22:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d26:	4630      	mov	r0, r6
  400d28:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  400d2a:	f44f 7100 	mov.w	r1, #512	; 0x200
  400d2e:	4630      	mov	r0, r6
  400d30:	4b1c      	ldr	r3, [pc, #112]	; (400da4 <board_init+0x2b0>)
  400d32:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400d34:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d38:	2074      	movs	r0, #116	; 0x74
  400d3a:	4c1b      	ldr	r4, [pc, #108]	; (400da8 <board_init+0x2b4>)
  400d3c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400d3e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d42:	2075      	movs	r0, #117	; 0x75
  400d44:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400d46:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d4a:	2076      	movs	r0, #118	; 0x76
  400d4c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400d4e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d52:	207b      	movs	r0, #123	; 0x7b
  400d54:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400d56:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400d5a:	2018      	movs	r0, #24
  400d5c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400d5e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400d62:	2006      	movs	r0, #6
  400d64:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  400d66:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400d6a:	2053      	movs	r0, #83	; 0x53
  400d6c:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400d6e:	2053      	movs	r0, #83	; 0x53
  400d70:	4b0e      	ldr	r3, [pc, #56]	; (400dac <board_init+0x2b8>)
  400d72:	4798      	blx	r3
  400d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d78:	400e1850 	.word	0x400e1850
  400d7c:	e000ed00 	.word	0xe000ed00
  400d80:	400e0c00 	.word	0x400e0c00
  400d84:	5a00080c 	.word	0x5a00080c
  400d88:	004018c9 	.word	0x004018c9
  400d8c:	400e1200 	.word	0x400e1200
  400d90:	400e0e00 	.word	0x400e0e00
  400d94:	40088000 	.word	0x40088000
  400d98:	0040144d 	.word	0x0040144d
  400d9c:	400e1600 	.word	0x400e1600
  400da0:	400e1400 	.word	0x400e1400
  400da4:	00401359 	.word	0x00401359
  400da8:	00401555 	.word	0x00401555
  400dac:	0040151d 	.word	0x0040151d

00400db0 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400db0:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400db2:	6804      	ldr	r4, [r0, #0]
  400db4:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400db8:	d302      	bcc.n	400dc0 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400dba:	f240 143f 	movw	r4, #319	; 0x13f
  400dbe:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  400dc0:	6814      	ldr	r4, [r2, #0]
  400dc2:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400dc6:	d302      	bcc.n	400dce <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400dc8:	f240 143f 	movw	r4, #319	; 0x13f
  400dcc:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  400dce:	680c      	ldr	r4, [r1, #0]
  400dd0:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400dd4:	d302      	bcc.n	400ddc <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400dd6:	f240 14df 	movw	r4, #479	; 0x1df
  400dda:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400ddc:	681c      	ldr	r4, [r3, #0]
  400dde:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400de2:	d302      	bcc.n	400dea <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400de4:	f240 14df 	movw	r4, #479	; 0x1df
  400de8:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400dea:	6804      	ldr	r4, [r0, #0]
  400dec:	6815      	ldr	r5, [r2, #0]
  400dee:	42ac      	cmp	r4, r5
  400df0:	d901      	bls.n	400df6 <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  400df2:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  400df4:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400df6:	680a      	ldr	r2, [r1, #0]
  400df8:	6818      	ldr	r0, [r3, #0]
  400dfa:	4282      	cmp	r2, r0
  400dfc:	d901      	bls.n	400e02 <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  400dfe:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  400e00:	601a      	str	r2, [r3, #0]
	}
}
  400e02:	bc30      	pop	{r4, r5}
  400e04:	4770      	bx	lr
	...

00400e08 <ili9488_write_ram_prepare>:
{
  400e08:	b510      	push	{r4, lr}
  400e0a:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400e0c:	2006      	movs	r0, #6
  400e0e:	4b0a      	ldr	r3, [pc, #40]	; (400e38 <ili9488_write_ram_prepare+0x30>)
  400e10:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  400e12:	2300      	movs	r3, #0
  400e14:	2203      	movs	r2, #3
  400e16:	212c      	movs	r1, #44	; 0x2c
  400e18:	4808      	ldr	r0, [pc, #32]	; (400e3c <ili9488_write_ram_prepare+0x34>)
  400e1a:	4c09      	ldr	r4, [pc, #36]	; (400e40 <ili9488_write_ram_prepare+0x38>)
  400e1c:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400e1e:	2300      	movs	r3, #0
  400e20:	9301      	str	r3, [sp, #4]
  400e22:	9b01      	ldr	r3, [sp, #4]
  400e24:	2bfe      	cmp	r3, #254	; 0xfe
  400e26:	d805      	bhi.n	400e34 <ili9488_write_ram_prepare+0x2c>
  400e28:	9b01      	ldr	r3, [sp, #4]
  400e2a:	3301      	adds	r3, #1
  400e2c:	9301      	str	r3, [sp, #4]
  400e2e:	9b01      	ldr	r3, [sp, #4]
  400e30:	2bfe      	cmp	r3, #254	; 0xfe
  400e32:	d9f9      	bls.n	400e28 <ili9488_write_ram_prepare+0x20>
}
  400e34:	b002      	add	sp, #8
  400e36:	bd10      	pop	{r4, pc}
  400e38:	00401539 	.word	0x00401539
  400e3c:	40008000 	.word	0x40008000
  400e40:	0040193d 	.word	0x0040193d

00400e44 <ili9488_write_register>:
{
  400e44:	b570      	push	{r4, r5, r6, lr}
  400e46:	b082      	sub	sp, #8
  400e48:	4605      	mov	r5, r0
  400e4a:	460e      	mov	r6, r1
  400e4c:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400e4e:	2006      	movs	r0, #6
  400e50:	4b14      	ldr	r3, [pc, #80]	; (400ea4 <ili9488_write_register+0x60>)
  400e52:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  400e54:	2300      	movs	r3, #0
  400e56:	2203      	movs	r2, #3
  400e58:	4629      	mov	r1, r5
  400e5a:	4813      	ldr	r0, [pc, #76]	; (400ea8 <ili9488_write_register+0x64>)
  400e5c:	4d13      	ldr	r5, [pc, #76]	; (400eac <ili9488_write_register+0x68>)
  400e5e:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  400e60:	2300      	movs	r3, #0
  400e62:	9301      	str	r3, [sp, #4]
  400e64:	9b01      	ldr	r3, [sp, #4]
  400e66:	2bfe      	cmp	r3, #254	; 0xfe
  400e68:	d805      	bhi.n	400e76 <ili9488_write_register+0x32>
  400e6a:	9b01      	ldr	r3, [sp, #4]
  400e6c:	3301      	adds	r3, #1
  400e6e:	9301      	str	r3, [sp, #4]
  400e70:	9b01      	ldr	r3, [sp, #4]
  400e72:	2bfe      	cmp	r3, #254	; 0xfe
  400e74:	d9f9      	bls.n	400e6a <ili9488_write_register+0x26>
	if(size > 0) {
  400e76:	b90c      	cbnz	r4, 400e7c <ili9488_write_register+0x38>
}
  400e78:	b002      	add	sp, #8
  400e7a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  400e7c:	2006      	movs	r0, #6
  400e7e:	4b0c      	ldr	r3, [pc, #48]	; (400eb0 <ili9488_write_register+0x6c>)
  400e80:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  400e82:	4622      	mov	r2, r4
  400e84:	4631      	mov	r1, r6
  400e86:	4808      	ldr	r0, [pc, #32]	; (400ea8 <ili9488_write_register+0x64>)
  400e88:	4b0a      	ldr	r3, [pc, #40]	; (400eb4 <ili9488_write_register+0x70>)
  400e8a:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  400e8c:	2300      	movs	r3, #0
  400e8e:	9301      	str	r3, [sp, #4]
  400e90:	9b01      	ldr	r3, [sp, #4]
  400e92:	2b5e      	cmp	r3, #94	; 0x5e
  400e94:	d8f0      	bhi.n	400e78 <ili9488_write_register+0x34>
  400e96:	9b01      	ldr	r3, [sp, #4]
  400e98:	3301      	adds	r3, #1
  400e9a:	9301      	str	r3, [sp, #4]
  400e9c:	9b01      	ldr	r3, [sp, #4]
  400e9e:	2b5e      	cmp	r3, #94	; 0x5e
  400ea0:	d9f9      	bls.n	400e96 <ili9488_write_register+0x52>
  400ea2:	e7e9      	b.n	400e78 <ili9488_write_register+0x34>
  400ea4:	00401539 	.word	0x00401539
  400ea8:	40008000 	.word	0x40008000
  400eac:	0040193d 	.word	0x0040193d
  400eb0:	0040151d 	.word	0x0040151d
  400eb4:	004009dd 	.word	0x004009dd

00400eb8 <ili9488_write_ram_buffer>:
{
  400eb8:	b530      	push	{r4, r5, lr}
  400eba:	b083      	sub	sp, #12
  400ebc:	4604      	mov	r4, r0
  400ebe:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  400ec0:	2006      	movs	r0, #6
  400ec2:	4b0a      	ldr	r3, [pc, #40]	; (400eec <ili9488_write_ram_buffer+0x34>)
  400ec4:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  400ec6:	462a      	mov	r2, r5
  400ec8:	4621      	mov	r1, r4
  400eca:	4809      	ldr	r0, [pc, #36]	; (400ef0 <ili9488_write_ram_buffer+0x38>)
  400ecc:	4b09      	ldr	r3, [pc, #36]	; (400ef4 <ili9488_write_ram_buffer+0x3c>)
  400ece:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  400ed0:	2300      	movs	r3, #0
  400ed2:	9301      	str	r3, [sp, #4]
  400ed4:	9b01      	ldr	r3, [sp, #4]
  400ed6:	2bfe      	cmp	r3, #254	; 0xfe
  400ed8:	d805      	bhi.n	400ee6 <ili9488_write_ram_buffer+0x2e>
  400eda:	9b01      	ldr	r3, [sp, #4]
  400edc:	3301      	adds	r3, #1
  400ede:	9301      	str	r3, [sp, #4]
  400ee0:	9b01      	ldr	r3, [sp, #4]
  400ee2:	2bfe      	cmp	r3, #254	; 0xfe
  400ee4:	d9f9      	bls.n	400eda <ili9488_write_ram_buffer+0x22>
}
  400ee6:	b003      	add	sp, #12
  400ee8:	bd30      	pop	{r4, r5, pc}
  400eea:	bf00      	nop
  400eec:	0040151d 	.word	0x0040151d
  400ef0:	40008000 	.word	0x40008000
  400ef4:	004009dd 	.word	0x004009dd

00400ef8 <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  400ef8:	4601      	mov	r1, r0
  400efa:	b130      	cbz	r0, 400f0a <ili9488_delay+0x12>
  400efc:	4a03      	ldr	r2, [pc, #12]	; (400f0c <ili9488_delay+0x14>)
{
  400efe:	4b04      	ldr	r3, [pc, #16]	; (400f10 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400f00:	3b01      	subs	r3, #1
  400f02:	d1fd      	bne.n	400f00 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  400f04:	4291      	cmp	r1, r2
  400f06:	d8fa      	bhi.n	400efe <ili9488_delay+0x6>
  400f08:	4770      	bx	lr
  400f0a:	4770      	bx	lr
  400f0c:	000186a1 	.word	0x000186a1
  400f10:	000186a0 	.word	0x000186a0

00400f14 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400f14:	b500      	push	{lr}
  400f16:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400f18:	b958      	cbnz	r0, 400f32 <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400f1a:	2348      	movs	r3, #72	; 0x48
  400f1c:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400f20:	2201      	movs	r2, #1
  400f22:	f10d 0107 	add.w	r1, sp, #7
  400f26:	2036      	movs	r0, #54	; 0x36
  400f28:	4b04      	ldr	r3, [pc, #16]	; (400f3c <ili9488_set_display_direction+0x28>)
  400f2a:	4798      	blx	r3
}
  400f2c:	b003      	add	sp, #12
  400f2e:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  400f32:	23e8      	movs	r3, #232	; 0xe8
  400f34:	f88d 3007 	strb.w	r3, [sp, #7]
  400f38:	e7f2      	b.n	400f20 <ili9488_set_display_direction+0xc>
  400f3a:	bf00      	nop
  400f3c:	00400e45 	.word	0x00400e45

00400f40 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400f40:	b510      	push	{r4, lr}
  400f42:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  400f44:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  400f48:	3a01      	subs	r2, #1
  400f4a:	4402      	add	r2, r0
  400f4c:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  400f50:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  400f54:	3b01      	subs	r3, #1
  400f56:	4419      	add	r1, r3
  400f58:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  400f5c:	0a03      	lsrs	r3, r0, #8
  400f5e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  400f62:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  400f66:	f3c2 2307 	ubfx	r3, r2, #8, #8
  400f6a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  400f6e:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400f72:	2204      	movs	r2, #4
  400f74:	eb0d 0102 	add.w	r1, sp, r2
  400f78:	202a      	movs	r0, #42	; 0x2a
  400f7a:	4c10      	ldr	r4, [pc, #64]	; (400fbc <ili9488_set_window+0x7c>)
  400f7c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400f7e:	2200      	movs	r2, #0
  400f80:	4611      	mov	r1, r2
  400f82:	4610      	mov	r0, r2
  400f84:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  400f86:	f89d 300b 	ldrb.w	r3, [sp, #11]
  400f8a:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  400f8e:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400f92:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  400f96:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400f9a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  400f9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
  400fa2:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400fa6:	2204      	movs	r2, #4
  400fa8:	eb0d 0102 	add.w	r1, sp, r2
  400fac:	202b      	movs	r0, #43	; 0x2b
  400fae:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400fb0:	2200      	movs	r2, #0
  400fb2:	4611      	mov	r1, r2
  400fb4:	4610      	mov	r0, r2
  400fb6:	47a0      	blx	r4
}
  400fb8:	b004      	add	sp, #16
  400fba:	bd10      	pop	{r4, pc}
  400fbc:	00400e45 	.word	0x00400e45

00400fc0 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400fc0:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  400fc2:	2200      	movs	r2, #0
  400fc4:	4611      	mov	r1, r2
  400fc6:	2029      	movs	r0, #41	; 0x29
  400fc8:	4b01      	ldr	r3, [pc, #4]	; (400fd0 <ili9488_display_on+0x10>)
  400fca:	4798      	blx	r3
  400fcc:	bd08      	pop	{r3, pc}
  400fce:	bf00      	nop
  400fd0:	00400e45 	.word	0x00400e45

00400fd4 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  400fd4:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  400fd6:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  400fda:	f3c0 2107 	ubfx	r1, r0, #8, #8
  400fde:	4b06      	ldr	r3, [pc, #24]	; (400ff8 <ili9488_set_foreground_color+0x24>)
  400fe0:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
		g_ul_pixel_cache[i++] = ul_color>>16;
  400fe4:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  400fe6:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  400fe8:	7098      	strb	r0, [r3, #2]
  400fea:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400fec:	4293      	cmp	r3, r2
  400fee:	d1f9      	bne.n	400fe4 <ili9488_set_foreground_color+0x10>
	}
#endif
}
  400ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ff4:	4770      	bx	lr
  400ff6:	bf00      	nop
  400ff8:	20400b7c 	.word	0x20400b7c

00400ffc <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400ffc:	b510      	push	{r4, lr}
  400ffe:	b084      	sub	sp, #16
  401000:	f8ad 0006 	strh.w	r0, [sp, #6]
  401004:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  401008:	0a03      	lsrs	r3, r0, #8
  40100a:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  40100e:	b2c0      	uxtb	r0, r0
  401010:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  401014:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  401018:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  40101c:	2204      	movs	r2, #4
  40101e:	a903      	add	r1, sp, #12
  401020:	202a      	movs	r0, #42	; 0x2a
  401022:	4c0e      	ldr	r4, [pc, #56]	; (40105c <ili9488_set_cursor_position+0x60>)
  401024:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401026:	2200      	movs	r2, #0
  401028:	4611      	mov	r1, r2
  40102a:	4610      	mov	r0, r2
  40102c:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  40102e:	f89d 2005 	ldrb.w	r2, [sp, #5]
  401032:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  401036:	f89d 3004 	ldrb.w	r3, [sp, #4]
  40103a:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  40103e:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  401042:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  401046:	2204      	movs	r2, #4
  401048:	a903      	add	r1, sp, #12
  40104a:	202b      	movs	r0, #43	; 0x2b
  40104c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40104e:	2200      	movs	r2, #0
  401050:	4611      	mov	r1, r2
  401052:	4610      	mov	r0, r2
  401054:	47a0      	blx	r4
}
  401056:	b004      	add	sp, #16
  401058:	bd10      	pop	{r4, pc}
  40105a:	bf00      	nop
  40105c:	00400e45 	.word	0x00400e45

00401060 <ili9488_init>:
{
  401060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401064:	b087      	sub	sp, #28
  401066:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  401068:	2703      	movs	r7, #3
  40106a:	ae06      	add	r6, sp, #24
  40106c:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  401070:	4d5d      	ldr	r5, [pc, #372]	; (4011e8 <ili9488_init+0x188>)
  401072:	4628      	mov	r0, r5
  401074:	4b5d      	ldr	r3, [pc, #372]	; (4011ec <ili9488_init+0x18c>)
  401076:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  401078:	2400      	movs	r4, #0
  40107a:	9400      	str	r4, [sp, #0]
  40107c:	4b5c      	ldr	r3, [pc, #368]	; (4011f0 <ili9488_init+0x190>)
  40107e:	463a      	mov	r2, r7
  401080:	4631      	mov	r1, r6
  401082:	4628      	mov	r0, r5
  401084:	f8df 8198 	ldr.w	r8, [pc, #408]	; 401220 <ili9488_init+0x1c0>
  401088:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  40108a:	4622      	mov	r2, r4
  40108c:	4639      	mov	r1, r7
  40108e:	4628      	mov	r0, r5
  401090:	4b58      	ldr	r3, [pc, #352]	; (4011f4 <ili9488_init+0x194>)
  401092:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  401094:	4631      	mov	r1, r6
  401096:	4628      	mov	r0, r5
  401098:	4b57      	ldr	r3, [pc, #348]	; (4011f8 <ili9488_init+0x198>)
  40109a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40109c:	2001      	movs	r0, #1
  40109e:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  4010a0:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  4010a2:	4622      	mov	r2, r4
  4010a4:	4621      	mov	r1, r4
  4010a6:	4e55      	ldr	r6, [pc, #340]	; (4011fc <ili9488_init+0x19c>)
  4010a8:	47b0      	blx	r6
	ili9488_delay(200);
  4010aa:	20c8      	movs	r0, #200	; 0xc8
  4010ac:	4d54      	ldr	r5, [pc, #336]	; (401200 <ili9488_init+0x1a0>)
  4010ae:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  4010b0:	4622      	mov	r2, r4
  4010b2:	4621      	mov	r1, r4
  4010b4:	2011      	movs	r0, #17
  4010b6:	47b0      	blx	r6
	ili9488_delay(200);
  4010b8:	20c8      	movs	r0, #200	; 0xc8
  4010ba:	47a8      	blx	r5
	reg = 0x81;
  4010bc:	2381      	movs	r3, #129	; 0x81
  4010be:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  4010c2:	f88d 400b 	strb.w	r4, [sp, #11]
  4010c6:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  4010c8:	f04f 0801 	mov.w	r8, #1
  4010cc:	4f4b      	ldr	r7, [pc, #300]	; (4011fc <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  4010ce:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  4010d0:	4642      	mov	r2, r8
  4010d2:	f10d 010a 	add.w	r1, sp, #10
  4010d6:	20fb      	movs	r0, #251	; 0xfb
  4010d8:	47b8      	blx	r7
		reg++;
  4010da:	f89d 300a 	ldrb.w	r3, [sp, #10]
  4010de:	3301      	adds	r3, #1
  4010e0:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  4010e4:	9503      	str	r5, [sp, #12]
  4010e6:	9b03      	ldr	r3, [sp, #12]
  4010e8:	2bfe      	cmp	r3, #254	; 0xfe
  4010ea:	d805      	bhi.n	4010f8 <ili9488_init+0x98>
  4010ec:	9b03      	ldr	r3, [sp, #12]
  4010ee:	3301      	adds	r3, #1
  4010f0:	9303      	str	r3, [sp, #12]
  4010f2:	9b03      	ldr	r3, [sp, #12]
  4010f4:	2bfe      	cmp	r3, #254	; 0xfe
  4010f6:	d9f9      	bls.n	4010ec <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  4010f8:	462a      	mov	r2, r5
  4010fa:	4629      	mov	r1, r5
  4010fc:	20d3      	movs	r0, #211	; 0xd3
  4010fe:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  401100:	2006      	movs	r0, #6
  401102:	4b40      	ldr	r3, [pc, #256]	; (401204 <ili9488_init+0x1a4>)
  401104:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  401106:	4642      	mov	r2, r8
  401108:	f10d 0109 	add.w	r1, sp, #9
  40110c:	4836      	ldr	r0, [pc, #216]	; (4011e8 <ili9488_init+0x188>)
  40110e:	4b3e      	ldr	r3, [pc, #248]	; (401208 <ili9488_init+0x1a8>)
  401110:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  401112:	9503      	str	r5, [sp, #12]
  401114:	9b03      	ldr	r3, [sp, #12]
  401116:	2bfe      	cmp	r3, #254	; 0xfe
  401118:	d805      	bhi.n	401126 <ili9488_init+0xc6>
  40111a:	9b03      	ldr	r3, [sp, #12]
  40111c:	3301      	adds	r3, #1
  40111e:	9303      	str	r3, [sp, #12]
  401120:	9b03      	ldr	r3, [sp, #12]
  401122:	2bfe      	cmp	r3, #254	; 0xfe
  401124:	d9f9      	bls.n	40111a <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  401126:	f89d 3009 	ldrb.w	r3, [sp, #9]
  40112a:	40b3      	lsls	r3, r6
  40112c:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  40112e:	4642      	mov	r2, r8
  401130:	f10d 010b 	add.w	r1, sp, #11
  401134:	20fb      	movs	r0, #251	; 0xfb
  401136:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  401138:	9503      	str	r5, [sp, #12]
  40113a:	9a03      	ldr	r2, [sp, #12]
  40113c:	f640 73fe 	movw	r3, #4094	; 0xffe
  401140:	429a      	cmp	r2, r3
  401142:	d806      	bhi.n	401152 <ili9488_init+0xf2>
  401144:	461a      	mov	r2, r3
  401146:	9b03      	ldr	r3, [sp, #12]
  401148:	3301      	adds	r3, #1
  40114a:	9303      	str	r3, [sp, #12]
  40114c:	9b03      	ldr	r3, [sp, #12]
  40114e:	4293      	cmp	r3, r2
  401150:	d9f9      	bls.n	401146 <ili9488_init+0xe6>
  401152:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  401154:	f116 0f08 	cmn.w	r6, #8
  401158:	d1ba      	bne.n	4010d0 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  40115a:	f249 4388 	movw	r3, #38024	; 0x9488
  40115e:	429c      	cmp	r4, r3
  401160:	d003      	beq.n	40116a <ili9488_init+0x10a>
		return 1;
  401162:	2001      	movs	r0, #1
}
  401164:	b007      	add	sp, #28
  401166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  40116a:	ad06      	add	r5, sp, #24
  40116c:	2348      	movs	r3, #72	; 0x48
  40116e:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  401172:	2201      	movs	r2, #1
  401174:	4629      	mov	r1, r5
  401176:	2036      	movs	r0, #54	; 0x36
  401178:	4e20      	ldr	r6, [pc, #128]	; (4011fc <ili9488_init+0x19c>)
  40117a:	47b0      	blx	r6
	ili9488_delay(100);
  40117c:	2064      	movs	r0, #100	; 0x64
  40117e:	4c20      	ldr	r4, [pc, #128]	; (401200 <ili9488_init+0x1a0>)
  401180:	47a0      	blx	r4
	param = 0x04;
  401182:	2304      	movs	r3, #4
  401184:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  401188:	2201      	movs	r2, #1
  40118a:	4629      	mov	r1, r5
  40118c:	20cf      	movs	r0, #207	; 0xcf
  40118e:	47b0      	blx	r6
	ili9488_delay(100);
  401190:	2064      	movs	r0, #100	; 0x64
  401192:	47a0      	blx	r4
	param = 0x06;
  401194:	2306      	movs	r3, #6
  401196:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  40119a:	2201      	movs	r2, #1
  40119c:	4629      	mov	r1, r5
  40119e:	203a      	movs	r0, #58	; 0x3a
  4011a0:	47b0      	blx	r6
	ili9488_delay(100);
  4011a2:	2064      	movs	r0, #100	; 0x64
  4011a4:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  4011a6:	2200      	movs	r2, #0
  4011a8:	4611      	mov	r1, r2
  4011aa:	2013      	movs	r0, #19
  4011ac:	47b0      	blx	r6
	ili9488_delay(100);
  4011ae:	2064      	movs	r0, #100	; 0x64
  4011b0:	47a0      	blx	r4
	ili9488_display_on();
  4011b2:	4b16      	ldr	r3, [pc, #88]	; (40120c <ili9488_init+0x1ac>)
  4011b4:	4798      	blx	r3
	ili9488_delay(100);
  4011b6:	2064      	movs	r0, #100	; 0x64
  4011b8:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  4011ba:	2000      	movs	r0, #0
  4011bc:	4b14      	ldr	r3, [pc, #80]	; (401210 <ili9488_init+0x1b0>)
  4011be:	4798      	blx	r3
	ili9488_delay(100);
  4011c0:	2064      	movs	r0, #100	; 0x64
  4011c2:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  4011c4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  4011c8:	f8b9 2000 	ldrh.w	r2, [r9]
  4011cc:	2100      	movs	r1, #0
  4011ce:	4608      	mov	r0, r1
  4011d0:	4c10      	ldr	r4, [pc, #64]	; (401214 <ili9488_init+0x1b4>)
  4011d2:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  4011d4:	f8d9 0008 	ldr.w	r0, [r9, #8]
  4011d8:	4b0f      	ldr	r3, [pc, #60]	; (401218 <ili9488_init+0x1b8>)
  4011da:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  4011dc:	2100      	movs	r1, #0
  4011de:	4608      	mov	r0, r1
  4011e0:	4b0e      	ldr	r3, [pc, #56]	; (40121c <ili9488_init+0x1bc>)
  4011e2:	4798      	blx	r3
	return 0;
  4011e4:	2000      	movs	r0, #0
  4011e6:	e7bd      	b.n	401164 <ili9488_init+0x104>
  4011e8:	40008000 	.word	0x40008000
  4011ec:	004008d9 	.word	0x004008d9
  4011f0:	01312d00 	.word	0x01312d00
  4011f4:	004019ad 	.word	0x004019ad
  4011f8:	004009ad 	.word	0x004009ad
  4011fc:	00400e45 	.word	0x00400e45
  401200:	00400ef9 	.word	0x00400ef9
  401204:	0040151d 	.word	0x0040151d
  401208:	00400a13 	.word	0x00400a13
  40120c:	00400fc1 	.word	0x00400fc1
  401210:	00400f15 	.word	0x00400f15
  401214:	00400f41 	.word	0x00400f41
  401218:	00400fd5 	.word	0x00400fd5
  40121c:	00400ffd 	.word	0x00400ffd
  401220:	0040092d 	.word	0x0040092d

00401224 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  401224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401228:	b084      	sub	sp, #16
  40122a:	9003      	str	r0, [sp, #12]
  40122c:	9102      	str	r1, [sp, #8]
  40122e:	9201      	str	r2, [sp, #4]
  401230:	aa04      	add	r2, sp, #16
  401232:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  401236:	4613      	mov	r3, r2
  401238:	aa01      	add	r2, sp, #4
  40123a:	a902      	add	r1, sp, #8
  40123c:	a803      	add	r0, sp, #12
  40123e:	4c22      	ldr	r4, [pc, #136]	; (4012c8 <ili9488_draw_filled_rectangle+0xa4>)
  401240:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  401242:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  401246:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  40124a:	9b00      	ldr	r3, [sp, #0]
  40124c:	3301      	adds	r3, #1
  40124e:	1a5b      	subs	r3, r3, r1
  401250:	9a01      	ldr	r2, [sp, #4]
  401252:	3201      	adds	r2, #1
  401254:	1a12      	subs	r2, r2, r0
  401256:	b29b      	uxth	r3, r3
  401258:	b292      	uxth	r2, r2
  40125a:	4c1c      	ldr	r4, [pc, #112]	; (4012cc <ili9488_draw_filled_rectangle+0xa8>)
  40125c:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  40125e:	4b1c      	ldr	r3, [pc, #112]	; (4012d0 <ili9488_draw_filled_rectangle+0xac>)
  401260:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  401262:	9903      	ldr	r1, [sp, #12]
  401264:	9d01      	ldr	r5, [sp, #4]
  401266:	1a69      	subs	r1, r5, r1
  401268:	9d00      	ldr	r5, [sp, #0]
  40126a:	3501      	adds	r5, #1
  40126c:	9b02      	ldr	r3, [sp, #8]
  40126e:	1aed      	subs	r5, r5, r3
  401270:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401274:	4b17      	ldr	r3, [pc, #92]	; (4012d4 <ili9488_draw_filled_rectangle+0xb0>)
  401276:	fba3 2305 	umull	r2, r3, r3, r5
  40127a:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  40127c:	b163      	cbz	r3, 401298 <ili9488_draw_filled_rectangle+0x74>
  40127e:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  401280:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4012dc <ili9488_draw_filled_rectangle+0xb8>
  401284:	f44f 7770 	mov.w	r7, #960	; 0x3c0
  401288:	4e13      	ldr	r6, [pc, #76]	; (4012d8 <ili9488_draw_filled_rectangle+0xb4>)
  40128a:	4639      	mov	r1, r7
  40128c:	4640      	mov	r0, r8
  40128e:	47b0      	blx	r6
	while (blocks--) {
  401290:	3c01      	subs	r4, #1
  401292:	f1b4 3fff 	cmp.w	r4, #4294967295
  401296:	d1f8      	bne.n	40128a <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  401298:	490e      	ldr	r1, [pc, #56]	; (4012d4 <ili9488_draw_filled_rectangle+0xb0>)
  40129a:	fba1 3105 	umull	r3, r1, r1, r5
  40129e:	0a09      	lsrs	r1, r1, #8
  4012a0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4012a4:	eba5 1181 	sub.w	r1, r5, r1, lsl #6
  4012a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4012ac:	480b      	ldr	r0, [pc, #44]	; (4012dc <ili9488_draw_filled_rectangle+0xb8>)
  4012ae:	4b0a      	ldr	r3, [pc, #40]	; (4012d8 <ili9488_draw_filled_rectangle+0xb4>)
  4012b0:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4012b2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4012b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4012ba:	2100      	movs	r1, #0
  4012bc:	4608      	mov	r0, r1
  4012be:	4c03      	ldr	r4, [pc, #12]	; (4012cc <ili9488_draw_filled_rectangle+0xa8>)
  4012c0:	47a0      	blx	r4

}
  4012c2:	b004      	add	sp, #16
  4012c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012c8:	00400db1 	.word	0x00400db1
  4012cc:	00400f41 	.word	0x00400f41
  4012d0:	00400e09 	.word	0x00400e09
  4012d4:	cccccccd 	.word	0xcccccccd
  4012d8:	00400eb9 	.word	0x00400eb9
  4012dc:	20400b7c 	.word	0x20400b7c

004012e0 <ili9488_draw_pixmap>:
 * \param ul_height height of the picture.
 * \param p_ul_pixmap pixmap of the image.
 */
void ili9488_draw_pixmap(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height, const ili9488_color_t *p_ul_pixmap)
{
  4012e0:	b510      	push	{r4, lr}
  4012e2:	b084      	sub	sp, #16
	uint32_t size;
	uint32_t dwX1, dwY1, dwX2, dwY2;
	dwX1 = ul_x;
  4012e4:	9003      	str	r0, [sp, #12]
	dwY1 = ul_y;
  4012e6:	9102      	str	r1, [sp, #8]
	dwX2 = ul_x + ul_width - 1;
  4012e8:	3a01      	subs	r2, #1
  4012ea:	4410      	add	r0, r2
  4012ec:	9001      	str	r0, [sp, #4]
	dwY2 = ul_y + ul_height - 1;
  4012ee:	3b01      	subs	r3, #1
  4012f0:	4419      	add	r1, r3
  4012f2:	ab04      	add	r3, sp, #16
  4012f4:	f843 1d10 	str.w	r1, [r3, #-16]!

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&dwX1, &dwY1, &dwX2, &dwY2);
  4012f8:	aa01      	add	r2, sp, #4
  4012fa:	a902      	add	r1, sp, #8
  4012fc:	a803      	add	r0, sp, #12
  4012fe:	4c13      	ldr	r4, [pc, #76]	; (40134c <ili9488_draw_pixmap+0x6c>)
  401300:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(dwX1, dwY1, (dwX2 - dwX1 + 1), (dwY2 - dwY1 + 1));
  401302:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  401306:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  40130a:	9b00      	ldr	r3, [sp, #0]
  40130c:	3301      	adds	r3, #1
  40130e:	1a5b      	subs	r3, r3, r1
  401310:	9a01      	ldr	r2, [sp, #4]
  401312:	3201      	adds	r2, #1
  401314:	1a12      	subs	r2, r2, r0
  401316:	b29b      	uxth	r3, r3
  401318:	b292      	uxth	r2, r2
  40131a:	4c0d      	ldr	r4, [pc, #52]	; (401350 <ili9488_draw_pixmap+0x70>)
  40131c:	47a0      	blx	r4

	size = (dwX2 - dwX1) * (dwY2 - dwY1);
  40131e:	9903      	ldr	r1, [sp, #12]
  401320:	9a01      	ldr	r2, [sp, #4]
  401322:	1a51      	subs	r1, r2, r1
  401324:	9a02      	ldr	r2, [sp, #8]
  401326:	9b00      	ldr	r3, [sp, #0]
  401328:	1a9a      	subs	r2, r3, r2
  40132a:	fb02 f201 	mul.w	r2, r2, r1

	ili9488_write_register(ILI9488_CMD_MEMORY_WRITE, p_ul_pixmap, size * LCD_DATA_COLOR_UNIT);
  40132e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401332:	9906      	ldr	r1, [sp, #24]
  401334:	202c      	movs	r0, #44	; 0x2c
  401336:	4b07      	ldr	r3, [pc, #28]	; (401354 <ili9488_draw_pixmap+0x74>)
  401338:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  40133a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  40133e:	f44f 72a0 	mov.w	r2, #320	; 0x140
  401342:	2100      	movs	r1, #0
  401344:	4608      	mov	r0, r1
  401346:	47a0      	blx	r4
}
  401348:	b004      	add	sp, #16
  40134a:	bd10      	pop	{r4, pc}
  40134c:	00400db1 	.word	0x00400db1
  401350:	00400f41 	.word	0x00400f41
  401354:	00400e45 	.word	0x00400e45

00401358 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401358:	6301      	str	r1, [r0, #48]	; 0x30
  40135a:	4770      	bx	lr

0040135c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40135c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40135e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401362:	d03a      	beq.n	4013da <pio_set_peripheral+0x7e>
  401364:	d813      	bhi.n	40138e <pio_set_peripheral+0x32>
  401366:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40136a:	d025      	beq.n	4013b8 <pio_set_peripheral+0x5c>
  40136c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401370:	d10a      	bne.n	401388 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401372:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401374:	4313      	orrs	r3, r2
  401376:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401378:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40137a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40137c:	400b      	ands	r3, r1
  40137e:	ea23 0302 	bic.w	r3, r3, r2
  401382:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401384:	6042      	str	r2, [r0, #4]
  401386:	4770      	bx	lr
	switch (ul_type) {
  401388:	2900      	cmp	r1, #0
  40138a:	d1fb      	bne.n	401384 <pio_set_peripheral+0x28>
  40138c:	4770      	bx	lr
  40138e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401392:	d021      	beq.n	4013d8 <pio_set_peripheral+0x7c>
  401394:	d809      	bhi.n	4013aa <pio_set_peripheral+0x4e>
  401396:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40139a:	d1f3      	bne.n	401384 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40139c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40139e:	4313      	orrs	r3, r2
  4013a0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4013a2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4013a4:	4313      	orrs	r3, r2
  4013a6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4013a8:	e7ec      	b.n	401384 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4013aa:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4013ae:	d013      	beq.n	4013d8 <pio_set_peripheral+0x7c>
  4013b0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4013b4:	d010      	beq.n	4013d8 <pio_set_peripheral+0x7c>
  4013b6:	e7e5      	b.n	401384 <pio_set_peripheral+0x28>
{
  4013b8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013ba:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013bc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4013be:	43d3      	mvns	r3, r2
  4013c0:	4021      	ands	r1, r4
  4013c2:	461c      	mov	r4, r3
  4013c4:	4019      	ands	r1, r3
  4013c6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4013c8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4013ca:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4013cc:	400b      	ands	r3, r1
  4013ce:	4023      	ands	r3, r4
  4013d0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4013d2:	6042      	str	r2, [r0, #4]
}
  4013d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013d8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013da:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013dc:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4013de:	400b      	ands	r3, r1
  4013e0:	ea23 0302 	bic.w	r3, r3, r2
  4013e4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4013e6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4013e8:	4313      	orrs	r3, r2
  4013ea:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4013ec:	e7ca      	b.n	401384 <pio_set_peripheral+0x28>

004013ee <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4013ee:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4013f0:	f012 0f01 	tst.w	r2, #1
  4013f4:	d10d      	bne.n	401412 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4013f6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4013f8:	f012 0f0a 	tst.w	r2, #10
  4013fc:	d00b      	beq.n	401416 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4013fe:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401400:	f012 0f02 	tst.w	r2, #2
  401404:	d109      	bne.n	40141a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401406:	f012 0f08 	tst.w	r2, #8
  40140a:	d008      	beq.n	40141e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40140c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401410:	e005      	b.n	40141e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401412:	6641      	str	r1, [r0, #100]	; 0x64
  401414:	e7f0      	b.n	4013f8 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401416:	6241      	str	r1, [r0, #36]	; 0x24
  401418:	e7f2      	b.n	401400 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40141a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40141e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401420:	6001      	str	r1, [r0, #0]
  401422:	4770      	bx	lr

00401424 <pio_set_output>:
{
  401424:	b410      	push	{r4}
  401426:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401428:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40142a:	b94c      	cbnz	r4, 401440 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40142c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40142e:	b14b      	cbz	r3, 401444 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401430:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401432:	b94a      	cbnz	r2, 401448 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401434:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401436:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401438:	6001      	str	r1, [r0, #0]
}
  40143a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40143e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401440:	6641      	str	r1, [r0, #100]	; 0x64
  401442:	e7f4      	b.n	40142e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401444:	6541      	str	r1, [r0, #84]	; 0x54
  401446:	e7f4      	b.n	401432 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401448:	6301      	str	r1, [r0, #48]	; 0x30
  40144a:	e7f4      	b.n	401436 <pio_set_output+0x12>

0040144c <pio_configure>:
{
  40144c:	b570      	push	{r4, r5, r6, lr}
  40144e:	b082      	sub	sp, #8
  401450:	4605      	mov	r5, r0
  401452:	4616      	mov	r6, r2
  401454:	461c      	mov	r4, r3
	switch (ul_type) {
  401456:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40145a:	d014      	beq.n	401486 <pio_configure+0x3a>
  40145c:	d90a      	bls.n	401474 <pio_configure+0x28>
  40145e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401462:	d024      	beq.n	4014ae <pio_configure+0x62>
  401464:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401468:	d021      	beq.n	4014ae <pio_configure+0x62>
  40146a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40146e:	d017      	beq.n	4014a0 <pio_configure+0x54>
		return 0;
  401470:	2000      	movs	r0, #0
  401472:	e01a      	b.n	4014aa <pio_configure+0x5e>
	switch (ul_type) {
  401474:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401478:	d005      	beq.n	401486 <pio_configure+0x3a>
  40147a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40147e:	d002      	beq.n	401486 <pio_configure+0x3a>
  401480:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401484:	d1f4      	bne.n	401470 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401486:	4632      	mov	r2, r6
  401488:	4628      	mov	r0, r5
  40148a:	4b11      	ldr	r3, [pc, #68]	; (4014d0 <pio_configure+0x84>)
  40148c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40148e:	f014 0f01 	tst.w	r4, #1
  401492:	d102      	bne.n	40149a <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401494:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  401496:	2001      	movs	r0, #1
  401498:	e007      	b.n	4014aa <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40149a:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  40149c:	2001      	movs	r0, #1
  40149e:	e004      	b.n	4014aa <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4014a0:	461a      	mov	r2, r3
  4014a2:	4631      	mov	r1, r6
  4014a4:	4b0b      	ldr	r3, [pc, #44]	; (4014d4 <pio_configure+0x88>)
  4014a6:	4798      	blx	r3
	return 1;
  4014a8:	2001      	movs	r0, #1
}
  4014aa:	b002      	add	sp, #8
  4014ac:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4014ae:	f004 0301 	and.w	r3, r4, #1
  4014b2:	9300      	str	r3, [sp, #0]
  4014b4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4014b8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4014bc:	bf14      	ite	ne
  4014be:	2200      	movne	r2, #0
  4014c0:	2201      	moveq	r2, #1
  4014c2:	4631      	mov	r1, r6
  4014c4:	4628      	mov	r0, r5
  4014c6:	4c04      	ldr	r4, [pc, #16]	; (4014d8 <pio_configure+0x8c>)
  4014c8:	47a0      	blx	r4
	return 1;
  4014ca:	2001      	movs	r0, #1
		break;
  4014cc:	e7ed      	b.n	4014aa <pio_configure+0x5e>
  4014ce:	bf00      	nop
  4014d0:	0040135d 	.word	0x0040135d
  4014d4:	004013ef 	.word	0x004013ef
  4014d8:	00401425 	.word	0x00401425

004014dc <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4014dc:	f012 0f10 	tst.w	r2, #16
  4014e0:	d012      	beq.n	401508 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4014e2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4014e6:	f012 0f20 	tst.w	r2, #32
  4014ea:	d007      	beq.n	4014fc <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4014ec:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4014f0:	f012 0f40 	tst.w	r2, #64	; 0x40
  4014f4:	d005      	beq.n	401502 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4014f6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4014fa:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4014fc:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  401500:	e7f6      	b.n	4014f0 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  401502:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  401506:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  401508:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40150c:	4770      	bx	lr

0040150e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40150e:	6401      	str	r1, [r0, #64]	; 0x40
  401510:	4770      	bx	lr

00401512 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401512:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401514:	4770      	bx	lr

00401516 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401516:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401518:	4770      	bx	lr
	...

0040151c <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40151c:	4b05      	ldr	r3, [pc, #20]	; (401534 <pio_set_pin_high+0x18>)
  40151e:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  401522:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  401524:	f000 001f 	and.w	r0, r0, #31
  401528:	2201      	movs	r2, #1
  40152a:	fa02 f000 	lsl.w	r0, r2, r0
  40152e:	6318      	str	r0, [r3, #48]	; 0x30
  401530:	4770      	bx	lr
  401532:	bf00      	nop
  401534:	00200707 	.word	0x00200707

00401538 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401538:	4b05      	ldr	r3, [pc, #20]	; (401550 <pio_set_pin_low+0x18>)
  40153a:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  40153e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  401540:	f000 001f 	and.w	r0, r0, #31
  401544:	2201      	movs	r2, #1
  401546:	fa02 f000 	lsl.w	r0, r2, r0
  40154a:	6358      	str	r0, [r3, #52]	; 0x34
  40154c:	4770      	bx	lr
  40154e:	bf00      	nop
  401550:	00200707 	.word	0x00200707

00401554 <pio_configure_pin>:
{
  401554:	b570      	push	{r4, r5, r6, lr}
  401556:	b082      	sub	sp, #8
  401558:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40155a:	4c46      	ldr	r4, [pc, #280]	; (401674 <pio_configure_pin+0x120>)
  40155c:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  401560:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401562:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40156a:	d059      	beq.n	401620 <pio_configure_pin+0xcc>
  40156c:	d80a      	bhi.n	401584 <pio_configure_pin+0x30>
  40156e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401572:	d02f      	beq.n	4015d4 <pio_configure_pin+0x80>
  401574:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401578:	d03f      	beq.n	4015fa <pio_configure_pin+0xa6>
  40157a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40157e:	d016      	beq.n	4015ae <pio_configure_pin+0x5a>
		return 0;
  401580:	2000      	movs	r0, #0
  401582:	e012      	b.n	4015aa <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  401584:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401588:	d05d      	beq.n	401646 <pio_configure_pin+0xf2>
  40158a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40158e:	d05a      	beq.n	401646 <pio_configure_pin+0xf2>
  401590:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401594:	d1f4      	bne.n	401580 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401596:	f000 011f 	and.w	r1, r0, #31
  40159a:	2601      	movs	r6, #1
  40159c:	462a      	mov	r2, r5
  40159e:	fa06 f101 	lsl.w	r1, r6, r1
  4015a2:	4620      	mov	r0, r4
  4015a4:	4b34      	ldr	r3, [pc, #208]	; (401678 <pio_configure_pin+0x124>)
  4015a6:	4798      	blx	r3
	return 1;
  4015a8:	4630      	mov	r0, r6
}
  4015aa:	b002      	add	sp, #8
  4015ac:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4015ae:	f000 001f 	and.w	r0, r0, #31
  4015b2:	2601      	movs	r6, #1
  4015b4:	4086      	lsls	r6, r0
  4015b6:	4632      	mov	r2, r6
  4015b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4015bc:	4620      	mov	r0, r4
  4015be:	4b2f      	ldr	r3, [pc, #188]	; (40167c <pio_configure_pin+0x128>)
  4015c0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4015c2:	f015 0f01 	tst.w	r5, #1
  4015c6:	d102      	bne.n	4015ce <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4015c8:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4015ca:	2001      	movs	r0, #1
  4015cc:	e7ed      	b.n	4015aa <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4015ce:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4015d0:	2001      	movs	r0, #1
  4015d2:	e7ea      	b.n	4015aa <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4015d4:	f000 001f 	and.w	r0, r0, #31
  4015d8:	2601      	movs	r6, #1
  4015da:	4086      	lsls	r6, r0
  4015dc:	4632      	mov	r2, r6
  4015de:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4015e2:	4620      	mov	r0, r4
  4015e4:	4b25      	ldr	r3, [pc, #148]	; (40167c <pio_configure_pin+0x128>)
  4015e6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4015e8:	f015 0f01 	tst.w	r5, #1
  4015ec:	d102      	bne.n	4015f4 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4015ee:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4015f0:	2001      	movs	r0, #1
  4015f2:	e7da      	b.n	4015aa <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4015f4:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4015f6:	2001      	movs	r0, #1
  4015f8:	e7d7      	b.n	4015aa <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4015fa:	f000 001f 	and.w	r0, r0, #31
  4015fe:	2601      	movs	r6, #1
  401600:	4086      	lsls	r6, r0
  401602:	4632      	mov	r2, r6
  401604:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401608:	4620      	mov	r0, r4
  40160a:	4b1c      	ldr	r3, [pc, #112]	; (40167c <pio_configure_pin+0x128>)
  40160c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40160e:	f015 0f01 	tst.w	r5, #1
  401612:	d102      	bne.n	40161a <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  401614:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401616:	2001      	movs	r0, #1
  401618:	e7c7      	b.n	4015aa <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40161a:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40161c:	2001      	movs	r0, #1
  40161e:	e7c4      	b.n	4015aa <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401620:	f000 001f 	and.w	r0, r0, #31
  401624:	2601      	movs	r6, #1
  401626:	4086      	lsls	r6, r0
  401628:	4632      	mov	r2, r6
  40162a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40162e:	4620      	mov	r0, r4
  401630:	4b12      	ldr	r3, [pc, #72]	; (40167c <pio_configure_pin+0x128>)
  401632:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401634:	f015 0f01 	tst.w	r5, #1
  401638:	d102      	bne.n	401640 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  40163a:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40163c:	2001      	movs	r0, #1
  40163e:	e7b4      	b.n	4015aa <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401640:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401642:	2001      	movs	r0, #1
  401644:	e7b1      	b.n	4015aa <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401646:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40164a:	f000 011f 	and.w	r1, r0, #31
  40164e:	2601      	movs	r6, #1
  401650:	ea05 0306 	and.w	r3, r5, r6
  401654:	9300      	str	r3, [sp, #0]
  401656:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40165a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40165e:	bf14      	ite	ne
  401660:	2200      	movne	r2, #0
  401662:	2201      	moveq	r2, #1
  401664:	fa06 f101 	lsl.w	r1, r6, r1
  401668:	4620      	mov	r0, r4
  40166a:	4c05      	ldr	r4, [pc, #20]	; (401680 <pio_configure_pin+0x12c>)
  40166c:	47a0      	blx	r4
	return 1;
  40166e:	4630      	mov	r0, r6
		break;
  401670:	e79b      	b.n	4015aa <pio_configure_pin+0x56>
  401672:	bf00      	nop
  401674:	00200707 	.word	0x00200707
  401678:	004013ef 	.word	0x004013ef
  40167c:	0040135d 	.word	0x0040135d
  401680:	00401425 	.word	0x00401425

00401684 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401688:	4604      	mov	r4, r0
  40168a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40168c:	4b0e      	ldr	r3, [pc, #56]	; (4016c8 <pio_handler_process+0x44>)
  40168e:	4798      	blx	r3
  401690:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401692:	4620      	mov	r0, r4
  401694:	4b0d      	ldr	r3, [pc, #52]	; (4016cc <pio_handler_process+0x48>)
  401696:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401698:	4005      	ands	r5, r0
  40169a:	d013      	beq.n	4016c4 <pio_handler_process+0x40>
  40169c:	4c0c      	ldr	r4, [pc, #48]	; (4016d0 <pio_handler_process+0x4c>)
  40169e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4016a2:	e003      	b.n	4016ac <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4016a4:	42b4      	cmp	r4, r6
  4016a6:	d00d      	beq.n	4016c4 <pio_handler_process+0x40>
  4016a8:	3410      	adds	r4, #16
		while (status != 0) {
  4016aa:	b15d      	cbz	r5, 4016c4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4016ac:	6820      	ldr	r0, [r4, #0]
  4016ae:	4540      	cmp	r0, r8
  4016b0:	d1f8      	bne.n	4016a4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4016b2:	6861      	ldr	r1, [r4, #4]
  4016b4:	4229      	tst	r1, r5
  4016b6:	d0f5      	beq.n	4016a4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4016b8:	68e3      	ldr	r3, [r4, #12]
  4016ba:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4016bc:	6863      	ldr	r3, [r4, #4]
  4016be:	ea25 0503 	bic.w	r5, r5, r3
  4016c2:	e7ef      	b.n	4016a4 <pio_handler_process+0x20>
  4016c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4016c8:	00401513 	.word	0x00401513
  4016cc:	00401517 	.word	0x00401517
  4016d0:	20400f3c 	.word	0x20400f3c

004016d4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4016d6:	4c18      	ldr	r4, [pc, #96]	; (401738 <pio_handler_set+0x64>)
  4016d8:	6826      	ldr	r6, [r4, #0]
  4016da:	2e06      	cmp	r6, #6
  4016dc:	d82a      	bhi.n	401734 <pio_handler_set+0x60>
  4016de:	f04f 0c00 	mov.w	ip, #0
  4016e2:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4016e4:	4f15      	ldr	r7, [pc, #84]	; (40173c <pio_handler_set+0x68>)
  4016e6:	e004      	b.n	4016f2 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4016e8:	3401      	adds	r4, #1
  4016ea:	b2e4      	uxtb	r4, r4
  4016ec:	46a4      	mov	ip, r4
  4016ee:	42a6      	cmp	r6, r4
  4016f0:	d309      	bcc.n	401706 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4016f2:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4016f4:	0125      	lsls	r5, r4, #4
  4016f6:	597d      	ldr	r5, [r7, r5]
  4016f8:	428d      	cmp	r5, r1
  4016fa:	d1f5      	bne.n	4016e8 <pio_handler_set+0x14>
  4016fc:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  401700:	686d      	ldr	r5, [r5, #4]
  401702:	4295      	cmp	r5, r2
  401704:	d1f0      	bne.n	4016e8 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401706:	4d0d      	ldr	r5, [pc, #52]	; (40173c <pio_handler_set+0x68>)
  401708:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  40170c:	eb05 040e 	add.w	r4, r5, lr
  401710:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401714:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  401716:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401718:	9906      	ldr	r1, [sp, #24]
  40171a:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  40171c:	3601      	adds	r6, #1
  40171e:	4566      	cmp	r6, ip
  401720:	d005      	beq.n	40172e <pio_handler_set+0x5a>
  401722:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401724:	461a      	mov	r2, r3
  401726:	4b06      	ldr	r3, [pc, #24]	; (401740 <pio_handler_set+0x6c>)
  401728:	4798      	blx	r3

	return 0;
  40172a:	2000      	movs	r0, #0
  40172c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  40172e:	4902      	ldr	r1, [pc, #8]	; (401738 <pio_handler_set+0x64>)
  401730:	600e      	str	r6, [r1, #0]
  401732:	e7f6      	b.n	401722 <pio_handler_set+0x4e>
		return 1;
  401734:	2001      	movs	r0, #1
}
  401736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401738:	20400fac 	.word	0x20400fac
  40173c:	20400f3c 	.word	0x20400f3c
  401740:	004014dd 	.word	0x004014dd

00401744 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401744:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401746:	210a      	movs	r1, #10
  401748:	4801      	ldr	r0, [pc, #4]	; (401750 <PIOA_Handler+0xc>)
  40174a:	4b02      	ldr	r3, [pc, #8]	; (401754 <PIOA_Handler+0x10>)
  40174c:	4798      	blx	r3
  40174e:	bd08      	pop	{r3, pc}
  401750:	400e0e00 	.word	0x400e0e00
  401754:	00401685 	.word	0x00401685

00401758 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401758:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40175a:	210b      	movs	r1, #11
  40175c:	4801      	ldr	r0, [pc, #4]	; (401764 <PIOB_Handler+0xc>)
  40175e:	4b02      	ldr	r3, [pc, #8]	; (401768 <PIOB_Handler+0x10>)
  401760:	4798      	blx	r3
  401762:	bd08      	pop	{r3, pc}
  401764:	400e1000 	.word	0x400e1000
  401768:	00401685 	.word	0x00401685

0040176c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40176c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40176e:	210c      	movs	r1, #12
  401770:	4801      	ldr	r0, [pc, #4]	; (401778 <PIOC_Handler+0xc>)
  401772:	4b02      	ldr	r3, [pc, #8]	; (40177c <PIOC_Handler+0x10>)
  401774:	4798      	blx	r3
  401776:	bd08      	pop	{r3, pc}
  401778:	400e1200 	.word	0x400e1200
  40177c:	00401685 	.word	0x00401685

00401780 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401780:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401782:	2110      	movs	r1, #16
  401784:	4801      	ldr	r0, [pc, #4]	; (40178c <PIOD_Handler+0xc>)
  401786:	4b02      	ldr	r3, [pc, #8]	; (401790 <PIOD_Handler+0x10>)
  401788:	4798      	blx	r3
  40178a:	bd08      	pop	{r3, pc}
  40178c:	400e1400 	.word	0x400e1400
  401790:	00401685 	.word	0x00401685

00401794 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401794:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401796:	2111      	movs	r1, #17
  401798:	4801      	ldr	r0, [pc, #4]	; (4017a0 <PIOE_Handler+0xc>)
  40179a:	4b02      	ldr	r3, [pc, #8]	; (4017a4 <PIOE_Handler+0x10>)
  40179c:	4798      	blx	r3
  40179e:	bd08      	pop	{r3, pc}
  4017a0:	400e1600 	.word	0x400e1600
  4017a4:	00401685 	.word	0x00401685

004017a8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4017a8:	2803      	cmp	r0, #3
  4017aa:	d011      	beq.n	4017d0 <pmc_mck_set_division+0x28>
  4017ac:	2804      	cmp	r0, #4
  4017ae:	d012      	beq.n	4017d6 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4017b0:	2802      	cmp	r0, #2
  4017b2:	bf0c      	ite	eq
  4017b4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4017b8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4017ba:	4a08      	ldr	r2, [pc, #32]	; (4017dc <pmc_mck_set_division+0x34>)
  4017bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4017c2:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4017c4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4017c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4017c8:	f013 0f08 	tst.w	r3, #8
  4017cc:	d0fb      	beq.n	4017c6 <pmc_mck_set_division+0x1e>
}
  4017ce:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4017d0:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4017d4:	e7f1      	b.n	4017ba <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4017d6:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4017da:	e7ee      	b.n	4017ba <pmc_mck_set_division+0x12>
  4017dc:	400e0600 	.word	0x400e0600

004017e0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4017e0:	4a17      	ldr	r2, [pc, #92]	; (401840 <pmc_switch_mck_to_pllack+0x60>)
  4017e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4017e8:	4318      	orrs	r0, r3
  4017ea:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4017ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4017ee:	f013 0f08 	tst.w	r3, #8
  4017f2:	d10a      	bne.n	40180a <pmc_switch_mck_to_pllack+0x2a>
  4017f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4017f8:	4911      	ldr	r1, [pc, #68]	; (401840 <pmc_switch_mck_to_pllack+0x60>)
  4017fa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4017fc:	f012 0f08 	tst.w	r2, #8
  401800:	d103      	bne.n	40180a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401802:	3b01      	subs	r3, #1
  401804:	d1f9      	bne.n	4017fa <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401806:	2001      	movs	r0, #1
  401808:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40180a:	4a0d      	ldr	r2, [pc, #52]	; (401840 <pmc_switch_mck_to_pllack+0x60>)
  40180c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40180e:	f023 0303 	bic.w	r3, r3, #3
  401812:	f043 0302 	orr.w	r3, r3, #2
  401816:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401818:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40181a:	f013 0f08 	tst.w	r3, #8
  40181e:	d10a      	bne.n	401836 <pmc_switch_mck_to_pllack+0x56>
  401820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401824:	4906      	ldr	r1, [pc, #24]	; (401840 <pmc_switch_mck_to_pllack+0x60>)
  401826:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401828:	f012 0f08 	tst.w	r2, #8
  40182c:	d105      	bne.n	40183a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40182e:	3b01      	subs	r3, #1
  401830:	d1f9      	bne.n	401826 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401832:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401834:	4770      	bx	lr
	return 0;
  401836:	2000      	movs	r0, #0
  401838:	4770      	bx	lr
  40183a:	2000      	movs	r0, #0
  40183c:	4770      	bx	lr
  40183e:	bf00      	nop
  401840:	400e0600 	.word	0x400e0600

00401844 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401844:	b9a0      	cbnz	r0, 401870 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401846:	480e      	ldr	r0, [pc, #56]	; (401880 <pmc_switch_mainck_to_xtal+0x3c>)
  401848:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40184a:	0209      	lsls	r1, r1, #8
  40184c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40184e:	4a0d      	ldr	r2, [pc, #52]	; (401884 <pmc_switch_mainck_to_xtal+0x40>)
  401850:	401a      	ands	r2, r3
  401852:	4b0d      	ldr	r3, [pc, #52]	; (401888 <pmc_switch_mainck_to_xtal+0x44>)
  401854:	4313      	orrs	r3, r2
  401856:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401858:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40185a:	4602      	mov	r2, r0
  40185c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40185e:	f013 0f01 	tst.w	r3, #1
  401862:	d0fb      	beq.n	40185c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401864:	4a06      	ldr	r2, [pc, #24]	; (401880 <pmc_switch_mainck_to_xtal+0x3c>)
  401866:	6a11      	ldr	r1, [r2, #32]
  401868:	4b08      	ldr	r3, [pc, #32]	; (40188c <pmc_switch_mainck_to_xtal+0x48>)
  40186a:	430b      	orrs	r3, r1
  40186c:	6213      	str	r3, [r2, #32]
  40186e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401870:	4903      	ldr	r1, [pc, #12]	; (401880 <pmc_switch_mainck_to_xtal+0x3c>)
  401872:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401874:	4a06      	ldr	r2, [pc, #24]	; (401890 <pmc_switch_mainck_to_xtal+0x4c>)
  401876:	401a      	ands	r2, r3
  401878:	4b06      	ldr	r3, [pc, #24]	; (401894 <pmc_switch_mainck_to_xtal+0x50>)
  40187a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40187c:	620b      	str	r3, [r1, #32]
  40187e:	4770      	bx	lr
  401880:	400e0600 	.word	0x400e0600
  401884:	ffc8fffc 	.word	0xffc8fffc
  401888:	00370001 	.word	0x00370001
  40188c:	01370000 	.word	0x01370000
  401890:	fec8fffc 	.word	0xfec8fffc
  401894:	01370002 	.word	0x01370002

00401898 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401898:	4b02      	ldr	r3, [pc, #8]	; (4018a4 <pmc_osc_is_ready_mainck+0xc>)
  40189a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40189c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4018a0:	4770      	bx	lr
  4018a2:	bf00      	nop
  4018a4:	400e0600 	.word	0x400e0600

004018a8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4018a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4018ac:	4b01      	ldr	r3, [pc, #4]	; (4018b4 <pmc_disable_pllack+0xc>)
  4018ae:	629a      	str	r2, [r3, #40]	; 0x28
  4018b0:	4770      	bx	lr
  4018b2:	bf00      	nop
  4018b4:	400e0600 	.word	0x400e0600

004018b8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4018b8:	4b02      	ldr	r3, [pc, #8]	; (4018c4 <pmc_is_locked_pllack+0xc>)
  4018ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4018bc:	f000 0002 	and.w	r0, r0, #2
  4018c0:	4770      	bx	lr
  4018c2:	bf00      	nop
  4018c4:	400e0600 	.word	0x400e0600

004018c8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4018c8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4018cc:	4b05      	ldr	r3, [pc, #20]	; (4018e4 <pmc_enable_periph_clk+0x1c>)
  4018ce:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4018d2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4018d6:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4018da:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4018de:	2000      	movs	r0, #0
  4018e0:	4770      	bx	lr
  4018e2:	bf00      	nop
  4018e4:	400e0600 	.word	0x400e0600

004018e8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4018e8:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4018ea:	4b07      	ldr	r3, [pc, #28]	; (401908 <spi_enable_clock+0x20>)
  4018ec:	4298      	cmp	r0, r3
  4018ee:	d003      	beq.n	4018f8 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4018f0:	4b06      	ldr	r3, [pc, #24]	; (40190c <spi_enable_clock+0x24>)
  4018f2:	4298      	cmp	r0, r3
  4018f4:	d004      	beq.n	401900 <spi_enable_clock+0x18>
  4018f6:	bd08      	pop	{r3, pc}
  4018f8:	2015      	movs	r0, #21
  4018fa:	4b05      	ldr	r3, [pc, #20]	; (401910 <spi_enable_clock+0x28>)
  4018fc:	4798      	blx	r3
  4018fe:	bd08      	pop	{r3, pc}
  401900:	202a      	movs	r0, #42	; 0x2a
  401902:	4b03      	ldr	r3, [pc, #12]	; (401910 <spi_enable_clock+0x28>)
  401904:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  401906:	e7f6      	b.n	4018f6 <spi_enable_clock+0xe>
  401908:	40008000 	.word	0x40008000
  40190c:	40058000 	.word	0x40058000
  401910:	004018c9 	.word	0x004018c9

00401914 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401914:	6843      	ldr	r3, [r0, #4]
  401916:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40191a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40191c:	6843      	ldr	r3, [r0, #4]
  40191e:	0409      	lsls	r1, r1, #16
  401920:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401924:	4319      	orrs	r1, r3
  401926:	6041      	str	r1, [r0, #4]
  401928:	4770      	bx	lr

0040192a <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  40192a:	6843      	ldr	r3, [r0, #4]
  40192c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401930:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401932:	6843      	ldr	r3, [r0, #4]
  401934:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401938:	6041      	str	r1, [r0, #4]
  40193a:	4770      	bx	lr

0040193c <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40193c:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40193e:	f643 2499 	movw	r4, #15001	; 0x3a99
  401942:	6905      	ldr	r5, [r0, #16]
  401944:	f015 0f02 	tst.w	r5, #2
  401948:	d103      	bne.n	401952 <spi_write+0x16>
		if (!timeout--) {
  40194a:	3c01      	subs	r4, #1
  40194c:	d1f9      	bne.n	401942 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  40194e:	2001      	movs	r0, #1
  401950:	e00c      	b.n	40196c <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401952:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401954:	f014 0f02 	tst.w	r4, #2
  401958:	d006      	beq.n	401968 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40195a:	0412      	lsls	r2, r2, #16
  40195c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401960:	4311      	orrs	r1, r2
		if (uc_last) {
  401962:	b10b      	cbz	r3, 401968 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  401964:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  401968:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40196a:	2000      	movs	r0, #0
}
  40196c:	bc30      	pop	{r4, r5}
  40196e:	4770      	bx	lr

00401970 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401970:	b932      	cbnz	r2, 401980 <spi_set_clock_polarity+0x10>
  401972:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401976:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401978:	f023 0301 	bic.w	r3, r3, #1
  40197c:	6303      	str	r3, [r0, #48]	; 0x30
  40197e:	4770      	bx	lr
  401980:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  401984:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401986:	f043 0301 	orr.w	r3, r3, #1
  40198a:	6303      	str	r3, [r0, #48]	; 0x30
  40198c:	4770      	bx	lr

0040198e <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  40198e:	b932      	cbnz	r2, 40199e <spi_set_clock_phase+0x10>
  401990:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401994:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401996:	f023 0302 	bic.w	r3, r3, #2
  40199a:	6303      	str	r3, [r0, #48]	; 0x30
  40199c:	4770      	bx	lr
  40199e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4019a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019a4:	f043 0302 	orr.w	r3, r3, #2
  4019a8:	6303      	str	r3, [r0, #48]	; 0x30
  4019aa:	4770      	bx	lr

004019ac <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4019ac:	2a04      	cmp	r2, #4
  4019ae:	d003      	beq.n	4019b8 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4019b0:	b16a      	cbz	r2, 4019ce <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4019b2:	2a08      	cmp	r2, #8
  4019b4:	d016      	beq.n	4019e4 <spi_configure_cs_behavior+0x38>
  4019b6:	4770      	bx	lr
  4019b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4019bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019be:	f023 0308 	bic.w	r3, r3, #8
  4019c2:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4019c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019c6:	f043 0304 	orr.w	r3, r3, #4
  4019ca:	6303      	str	r3, [r0, #48]	; 0x30
  4019cc:	4770      	bx	lr
  4019ce:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4019d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019d4:	f023 0308 	bic.w	r3, r3, #8
  4019d8:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4019da:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019dc:	f023 0304 	bic.w	r3, r3, #4
  4019e0:	6303      	str	r3, [r0, #48]	; 0x30
  4019e2:	4770      	bx	lr
  4019e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4019e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019ea:	f043 0308 	orr.w	r3, r3, #8
  4019ee:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4019f0:	e7e1      	b.n	4019b6 <spi_configure_cs_behavior+0xa>

004019f2 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4019f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4019f6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4019f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4019fc:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4019fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401a00:	431a      	orrs	r2, r3
  401a02:	630a      	str	r2, [r1, #48]	; 0x30
  401a04:	4770      	bx	lr

00401a06 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401a06:	1e43      	subs	r3, r0, #1
  401a08:	4419      	add	r1, r3
  401a0a:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401a0e:	1e43      	subs	r3, r0, #1
  401a10:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  401a12:	bf94      	ite	ls
  401a14:	b200      	sxthls	r0, r0
		return -1;
  401a16:	f04f 30ff 	movhi.w	r0, #4294967295
}
  401a1a:	4770      	bx	lr

00401a1c <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  401a1c:	b17a      	cbz	r2, 401a3e <spi_set_baudrate_div+0x22>
{
  401a1e:	b410      	push	{r4}
  401a20:	4614      	mov	r4, r2
  401a22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401a26:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401a28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401a2c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401a2e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401a30:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401a34:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401a36:	2000      	movs	r0, #0
}
  401a38:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a3c:	4770      	bx	lr
        return -1;
  401a3e:	f04f 30ff 	mov.w	r0, #4294967295
  401a42:	4770      	bx	lr

00401a44 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401a44:	b410      	push	{r4}
  401a46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401a4a:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401a4c:	b280      	uxth	r0, r0
  401a4e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401a50:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401a52:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  401a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401a5a:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a60:	4770      	bx	lr
	...

00401a64 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401a64:	4b28      	ldr	r3, [pc, #160]	; (401b08 <twihs_set_speed+0xa4>)
  401a66:	4299      	cmp	r1, r3
  401a68:	d84b      	bhi.n	401b02 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401a6a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401a6e:	4299      	cmp	r1, r3
  401a70:	d92d      	bls.n	401ace <twihs_set_speed+0x6a>
{
  401a72:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401a74:	4c25      	ldr	r4, [pc, #148]	; (401b0c <twihs_set_speed+0xa8>)
  401a76:	fba4 3402 	umull	r3, r4, r4, r2
  401a7a:	0ba4      	lsrs	r4, r4, #14
  401a7c:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401a7e:	4b24      	ldr	r3, [pc, #144]	; (401b10 <twihs_set_speed+0xac>)
  401a80:	440b      	add	r3, r1
  401a82:	009b      	lsls	r3, r3, #2
  401a84:	fbb2 f2f3 	udiv	r2, r2, r3
  401a88:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401a8a:	2cff      	cmp	r4, #255	; 0xff
  401a8c:	d91d      	bls.n	401aca <twihs_set_speed+0x66>
  401a8e:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401a90:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  401a92:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401a94:	2cff      	cmp	r4, #255	; 0xff
  401a96:	d901      	bls.n	401a9c <twihs_set_speed+0x38>
  401a98:	2906      	cmp	r1, #6
  401a9a:	d9f9      	bls.n	401a90 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401a9c:	2aff      	cmp	r2, #255	; 0xff
  401a9e:	d907      	bls.n	401ab0 <twihs_set_speed+0x4c>
  401aa0:	2906      	cmp	r1, #6
  401aa2:	d805      	bhi.n	401ab0 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  401aa4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  401aa6:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401aa8:	2aff      	cmp	r2, #255	; 0xff
  401aaa:	d901      	bls.n	401ab0 <twihs_set_speed+0x4c>
  401aac:	2906      	cmp	r1, #6
  401aae:	d9f9      	bls.n	401aa4 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401ab0:	0213      	lsls	r3, r2, #8
  401ab2:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401ab4:	0409      	lsls	r1, r1, #16
  401ab6:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401aba:	430b      	orrs	r3, r1
  401abc:	b2e4      	uxtb	r4, r4
  401abe:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401ac0:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401ac2:	2000      	movs	r0, #0
}
  401ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ac8:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401aca:	2100      	movs	r1, #0
  401acc:	e7e6      	b.n	401a9c <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401ace:	0049      	lsls	r1, r1, #1
  401ad0:	fbb2 f2f1 	udiv	r2, r2, r1
  401ad4:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ad6:	2aff      	cmp	r2, #255	; 0xff
  401ad8:	d911      	bls.n	401afe <twihs_set_speed+0x9a>
  401ada:	2300      	movs	r3, #0
			ckdiv++;
  401adc:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401ade:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ae0:	2aff      	cmp	r2, #255	; 0xff
  401ae2:	d901      	bls.n	401ae8 <twihs_set_speed+0x84>
  401ae4:	2b06      	cmp	r3, #6
  401ae6:	d9f9      	bls.n	401adc <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401ae8:	0211      	lsls	r1, r2, #8
  401aea:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401aec:	041b      	lsls	r3, r3, #16
  401aee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401af2:	430b      	orrs	r3, r1
  401af4:	b2d2      	uxtb	r2, r2
  401af6:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401af8:	6102      	str	r2, [r0, #16]
	return PASS;
  401afa:	2000      	movs	r0, #0
  401afc:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401afe:	2300      	movs	r3, #0
  401b00:	e7f2      	b.n	401ae8 <twihs_set_speed+0x84>
		return FAIL;
  401b02:	2001      	movs	r0, #1
  401b04:	4770      	bx	lr
  401b06:	bf00      	nop
  401b08:	00061a80 	.word	0x00061a80
  401b0c:	057619f1 	.word	0x057619f1
  401b10:	3ffd1200 	.word	0x3ffd1200

00401b14 <twihs_master_init>:
{
  401b14:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401b16:	f04f 32ff 	mov.w	r2, #4294967295
  401b1a:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401b1c:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401b1e:	2280      	movs	r2, #128	; 0x80
  401b20:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401b22:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401b24:	2208      	movs	r2, #8
  401b26:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401b28:	2220      	movs	r2, #32
  401b2a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401b2c:	2204      	movs	r2, #4
  401b2e:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401b30:	680a      	ldr	r2, [r1, #0]
  401b32:	6849      	ldr	r1, [r1, #4]
  401b34:	4b03      	ldr	r3, [pc, #12]	; (401b44 <twihs_master_init+0x30>)
  401b36:	4798      	blx	r3
}
  401b38:	2801      	cmp	r0, #1
  401b3a:	bf14      	ite	ne
  401b3c:	2000      	movne	r0, #0
  401b3e:	2001      	moveq	r0, #1
  401b40:	bd08      	pop	{r3, pc}
  401b42:	bf00      	nop
  401b44:	00401a65 	.word	0x00401a65

00401b48 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401b48:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401b4a:	2a00      	cmp	r2, #0
  401b4c:	d04c      	beq.n	401be8 <twihs_master_read+0xa0>
{
  401b4e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401b50:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401b52:	2600      	movs	r6, #0
  401b54:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401b56:	684b      	ldr	r3, [r1, #4]
  401b58:	021b      	lsls	r3, r3, #8
  401b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401b5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401b62:	7c0d      	ldrb	r5, [r1, #16]
  401b64:	042d      	lsls	r5, r5, #16
  401b66:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401b6a:	432b      	orrs	r3, r5
  401b6c:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401b6e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401b70:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401b72:	b15d      	cbz	r5, 401b8c <twihs_master_read+0x44>
	val = addr[0];
  401b74:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401b76:	2d01      	cmp	r5, #1
  401b78:	dd02      	ble.n	401b80 <twihs_master_read+0x38>
		val |= addr[1];
  401b7a:	784e      	ldrb	r6, [r1, #1]
  401b7c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401b80:	2d02      	cmp	r5, #2
  401b82:	dd04      	ble.n	401b8e <twihs_master_read+0x46>
		val |= addr[2];
  401b84:	7889      	ldrb	r1, [r1, #2]
  401b86:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401b8a:	e000      	b.n	401b8e <twihs_master_read+0x46>
		return 0;
  401b8c:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401b8e:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401b90:	2301      	movs	r3, #1
  401b92:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401b94:	2502      	movs	r5, #2
  401b96:	e012      	b.n	401bbe <twihs_master_read+0x76>
  401b98:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401b9a:	f013 0f02 	tst.w	r3, #2
  401b9e:	d01b      	beq.n	401bd8 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401ba0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401ba2:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401ba4:	6a03      	ldr	r3, [r0, #32]
  401ba6:	f013 0f01 	tst.w	r3, #1
  401baa:	d0fb      	beq.n	401ba4 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401bac:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401bae:	2000      	movs	r0, #0
}
  401bb0:	bc70      	pop	{r4, r5, r6}
  401bb2:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401bb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401bb6:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401bba:	3a01      	subs	r2, #1
  401bbc:	d0f2      	beq.n	401ba4 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401bbe:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401bc0:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bc4:	d114      	bne.n	401bf0 <twihs_master_read+0xa8>
  401bc6:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401bca:	2a01      	cmp	r2, #1
  401bcc:	d0e4      	beq.n	401b98 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401bce:	f013 0f02 	tst.w	r3, #2
  401bd2:	d1ef      	bne.n	401bb4 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401bd4:	2a00      	cmp	r2, #0
  401bd6:	d0e5      	beq.n	401ba4 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401bd8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401bda:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bde:	d105      	bne.n	401bec <twihs_master_read+0xa4>
		if (!timeout--) {
  401be0:	3901      	subs	r1, #1
  401be2:	d1f2      	bne.n	401bca <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401be4:	2009      	movs	r0, #9
  401be6:	e7e3      	b.n	401bb0 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401be8:	2001      	movs	r0, #1
  401bea:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401bec:	2005      	movs	r0, #5
  401bee:	e7df      	b.n	401bb0 <twihs_master_read+0x68>
  401bf0:	2005      	movs	r0, #5
  401bf2:	e7dd      	b.n	401bb0 <twihs_master_read+0x68>

00401bf4 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401bf4:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401bf6:	2b00      	cmp	r3, #0
  401bf8:	d043      	beq.n	401c82 <twihs_master_write+0x8e>
{
  401bfa:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401bfc:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401bfe:	2600      	movs	r6, #0
  401c00:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401c02:	7c0a      	ldrb	r2, [r1, #16]
  401c04:	0412      	lsls	r2, r2, #16
  401c06:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401c0a:	684d      	ldr	r5, [r1, #4]
  401c0c:	022d      	lsls	r5, r5, #8
  401c0e:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401c12:	432a      	orrs	r2, r5
  401c14:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401c16:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401c18:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401c1a:	b15d      	cbz	r5, 401c34 <twihs_master_write+0x40>
	val = addr[0];
  401c1c:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401c1e:	2d01      	cmp	r5, #1
  401c20:	dd02      	ble.n	401c28 <twihs_master_write+0x34>
		val |= addr[1];
  401c22:	784e      	ldrb	r6, [r1, #1]
  401c24:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401c28:	2d02      	cmp	r5, #2
  401c2a:	dd04      	ble.n	401c36 <twihs_master_write+0x42>
		val |= addr[2];
  401c2c:	7889      	ldrb	r1, [r1, #2]
  401c2e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401c32:	e000      	b.n	401c36 <twihs_master_write+0x42>
		return 0;
  401c34:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401c36:	60c2      	str	r2, [r0, #12]
  401c38:	e004      	b.n	401c44 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401c3a:	f814 2b01 	ldrb.w	r2, [r4], #1
  401c3e:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401c40:	3b01      	subs	r3, #1
  401c42:	d00f      	beq.n	401c64 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401c44:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401c46:	f412 7f80 	tst.w	r2, #256	; 0x100
  401c4a:	d11e      	bne.n	401c8a <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401c4c:	f012 0f04 	tst.w	r2, #4
  401c50:	d1f3      	bne.n	401c3a <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401c52:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401c54:	f412 7f80 	tst.w	r2, #256	; 0x100
  401c58:	d115      	bne.n	401c86 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401c5a:	f012 0f04 	tst.w	r2, #4
  401c5e:	d1ec      	bne.n	401c3a <twihs_master_write+0x46>
	while (cnt > 0) {
  401c60:	2b00      	cmp	r3, #0
  401c62:	d1f6      	bne.n	401c52 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401c64:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401c66:	f413 7f80 	tst.w	r3, #256	; 0x100
  401c6a:	d111      	bne.n	401c90 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401c6c:	f013 0f04 	tst.w	r3, #4
  401c70:	d0f8      	beq.n	401c64 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401c72:	2302      	movs	r3, #2
  401c74:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401c76:	6a03      	ldr	r3, [r0, #32]
  401c78:	f013 0f01 	tst.w	r3, #1
  401c7c:	d0fb      	beq.n	401c76 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401c7e:	2000      	movs	r0, #0
  401c80:	e004      	b.n	401c8c <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401c82:	2001      	movs	r0, #1
  401c84:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401c86:	2005      	movs	r0, #5
  401c88:	e000      	b.n	401c8c <twihs_master_write+0x98>
  401c8a:	2005      	movs	r0, #5
}
  401c8c:	bc70      	pop	{r4, r5, r6}
  401c8e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401c90:	2005      	movs	r0, #5
  401c92:	e7fb      	b.n	401c8c <twihs_master_write+0x98>

00401c94 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401c94:	6943      	ldr	r3, [r0, #20]
  401c96:	f013 0f02 	tst.w	r3, #2
  401c9a:	d002      	beq.n	401ca2 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401c9c:	61c1      	str	r1, [r0, #28]
	return 0;
  401c9e:	2000      	movs	r0, #0
  401ca0:	4770      	bx	lr
		return 1;
  401ca2:	2001      	movs	r0, #1
}
  401ca4:	4770      	bx	lr

00401ca6 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401ca6:	6943      	ldr	r3, [r0, #20]
  401ca8:	f013 0f01 	tst.w	r3, #1
  401cac:	d003      	beq.n	401cb6 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401cae:	6983      	ldr	r3, [r0, #24]
  401cb0:	700b      	strb	r3, [r1, #0]
	return 0;
  401cb2:	2000      	movs	r0, #0
  401cb4:	4770      	bx	lr
		return 1;
  401cb6:	2001      	movs	r0, #1
}
  401cb8:	4770      	bx	lr

00401cba <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401cba:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401cbc:	010b      	lsls	r3, r1, #4
  401cbe:	4293      	cmp	r3, r2
  401cc0:	d914      	bls.n	401cec <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401cc2:	00c9      	lsls	r1, r1, #3
  401cc4:	084b      	lsrs	r3, r1, #1
  401cc6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401cca:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401cce:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401cd0:	1e5c      	subs	r4, r3, #1
  401cd2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401cd6:	428c      	cmp	r4, r1
  401cd8:	d901      	bls.n	401cde <usart_set_async_baudrate+0x24>
		return 1;
  401cda:	2001      	movs	r0, #1
  401cdc:	e017      	b.n	401d0e <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401cde:	6841      	ldr	r1, [r0, #4]
  401ce0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401ce4:	6041      	str	r1, [r0, #4]
  401ce6:	e00c      	b.n	401d02 <usart_set_async_baudrate+0x48>
		return 1;
  401ce8:	2001      	movs	r0, #1
  401cea:	e010      	b.n	401d0e <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401cec:	0859      	lsrs	r1, r3, #1
  401cee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401cf2:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401cf6:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401cf8:	1e5c      	subs	r4, r3, #1
  401cfa:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401cfe:	428c      	cmp	r4, r1
  401d00:	d8f2      	bhi.n	401ce8 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401d02:	0412      	lsls	r2, r2, #16
  401d04:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401d08:	431a      	orrs	r2, r3
  401d0a:	6202      	str	r2, [r0, #32]

	return 0;
  401d0c:	2000      	movs	r0, #0
}
  401d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d12:	4770      	bx	lr

00401d14 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401d14:	4b08      	ldr	r3, [pc, #32]	; (401d38 <usart_reset+0x24>)
  401d16:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401d1a:	2300      	movs	r3, #0
  401d1c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401d1e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401d20:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401d22:	2388      	movs	r3, #136	; 0x88
  401d24:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401d26:	2324      	movs	r3, #36	; 0x24
  401d28:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
  401d2e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401d30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401d34:	6003      	str	r3, [r0, #0]
  401d36:	4770      	bx	lr
  401d38:	55534100 	.word	0x55534100

00401d3c <usart_init_rs232>:
{
  401d3c:	b570      	push	{r4, r5, r6, lr}
  401d3e:	4605      	mov	r5, r0
  401d40:	460c      	mov	r4, r1
  401d42:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401d44:	4b0f      	ldr	r3, [pc, #60]	; (401d84 <usart_init_rs232+0x48>)
  401d46:	4798      	blx	r3
	ul_reg_val = 0;
  401d48:	2200      	movs	r2, #0
  401d4a:	4b0f      	ldr	r3, [pc, #60]	; (401d88 <usart_init_rs232+0x4c>)
  401d4c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401d4e:	b1a4      	cbz	r4, 401d7a <usart_init_rs232+0x3e>
  401d50:	4632      	mov	r2, r6
  401d52:	6821      	ldr	r1, [r4, #0]
  401d54:	4628      	mov	r0, r5
  401d56:	4b0d      	ldr	r3, [pc, #52]	; (401d8c <usart_init_rs232+0x50>)
  401d58:	4798      	blx	r3
  401d5a:	4602      	mov	r2, r0
  401d5c:	b978      	cbnz	r0, 401d7e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401d5e:	6863      	ldr	r3, [r4, #4]
  401d60:	68a1      	ldr	r1, [r4, #8]
  401d62:	430b      	orrs	r3, r1
  401d64:	6921      	ldr	r1, [r4, #16]
  401d66:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401d68:	68e1      	ldr	r1, [r4, #12]
  401d6a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401d6c:	4906      	ldr	r1, [pc, #24]	; (401d88 <usart_init_rs232+0x4c>)
  401d6e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401d70:	6869      	ldr	r1, [r5, #4]
  401d72:	430b      	orrs	r3, r1
  401d74:	606b      	str	r3, [r5, #4]
}
  401d76:	4610      	mov	r0, r2
  401d78:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401d7a:	2201      	movs	r2, #1
  401d7c:	e7fb      	b.n	401d76 <usart_init_rs232+0x3a>
  401d7e:	2201      	movs	r2, #1
  401d80:	e7f9      	b.n	401d76 <usart_init_rs232+0x3a>
  401d82:	bf00      	nop
  401d84:	00401d15 	.word	0x00401d15
  401d88:	20400fb0 	.word	0x20400fb0
  401d8c:	00401cbb 	.word	0x00401cbb

00401d90 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401d90:	2340      	movs	r3, #64	; 0x40
  401d92:	6003      	str	r3, [r0, #0]
  401d94:	4770      	bx	lr

00401d96 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401d96:	2310      	movs	r3, #16
  401d98:	6003      	str	r3, [r0, #0]
  401d9a:	4770      	bx	lr

00401d9c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401d9c:	6943      	ldr	r3, [r0, #20]
  401d9e:	f013 0f02 	tst.w	r3, #2
  401da2:	d004      	beq.n	401dae <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401da4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401da8:	61c1      	str	r1, [r0, #28]
	return 0;
  401daa:	2000      	movs	r0, #0
  401dac:	4770      	bx	lr
		return 1;
  401dae:	2001      	movs	r0, #1
}
  401db0:	4770      	bx	lr

00401db2 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401db2:	6943      	ldr	r3, [r0, #20]
  401db4:	f013 0f01 	tst.w	r3, #1
  401db8:	d005      	beq.n	401dc6 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401dba:	6983      	ldr	r3, [r0, #24]
  401dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401dc0:	600b      	str	r3, [r1, #0]
	return 0;
  401dc2:	2000      	movs	r0, #0
  401dc4:	4770      	bx	lr
		return 1;
  401dc6:	2001      	movs	r0, #1
}
  401dc8:	4770      	bx	lr

00401dca <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401dca:	e7fe      	b.n	401dca <Dummy_Handler>

00401dcc <Reset_Handler>:
{
  401dcc:	b500      	push	{lr}
  401dce:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401dd0:	4b25      	ldr	r3, [pc, #148]	; (401e68 <Reset_Handler+0x9c>)
  401dd2:	4a26      	ldr	r2, [pc, #152]	; (401e6c <Reset_Handler+0xa0>)
  401dd4:	429a      	cmp	r2, r3
  401dd6:	d010      	beq.n	401dfa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401dd8:	4b25      	ldr	r3, [pc, #148]	; (401e70 <Reset_Handler+0xa4>)
  401dda:	4a23      	ldr	r2, [pc, #140]	; (401e68 <Reset_Handler+0x9c>)
  401ddc:	429a      	cmp	r2, r3
  401dde:	d20c      	bcs.n	401dfa <Reset_Handler+0x2e>
  401de0:	3b01      	subs	r3, #1
  401de2:	1a9b      	subs	r3, r3, r2
  401de4:	f023 0303 	bic.w	r3, r3, #3
  401de8:	3304      	adds	r3, #4
  401dea:	4413      	add	r3, r2
  401dec:	491f      	ldr	r1, [pc, #124]	; (401e6c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401dee:	f851 0b04 	ldr.w	r0, [r1], #4
  401df2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401df6:	429a      	cmp	r2, r3
  401df8:	d1f9      	bne.n	401dee <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401dfa:	4b1e      	ldr	r3, [pc, #120]	; (401e74 <Reset_Handler+0xa8>)
  401dfc:	4a1e      	ldr	r2, [pc, #120]	; (401e78 <Reset_Handler+0xac>)
  401dfe:	429a      	cmp	r2, r3
  401e00:	d20a      	bcs.n	401e18 <Reset_Handler+0x4c>
  401e02:	3b01      	subs	r3, #1
  401e04:	1a9b      	subs	r3, r3, r2
  401e06:	f023 0303 	bic.w	r3, r3, #3
  401e0a:	3304      	adds	r3, #4
  401e0c:	4413      	add	r3, r2
                *pDest++ = 0;
  401e0e:	2100      	movs	r1, #0
  401e10:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401e14:	4293      	cmp	r3, r2
  401e16:	d1fb      	bne.n	401e10 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401e18:	4a18      	ldr	r2, [pc, #96]	; (401e7c <Reset_Handler+0xb0>)
  401e1a:	4b19      	ldr	r3, [pc, #100]	; (401e80 <Reset_Handler+0xb4>)
  401e1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401e20:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401e22:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401e26:	fab3 f383 	clz	r3, r3
  401e2a:	095b      	lsrs	r3, r3, #5
  401e2c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401e2e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401e30:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401e34:	2200      	movs	r2, #0
  401e36:	4b13      	ldr	r3, [pc, #76]	; (401e84 <Reset_Handler+0xb8>)
  401e38:	701a      	strb	r2, [r3, #0]
	return flags;
  401e3a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401e3c:	4a12      	ldr	r2, [pc, #72]	; (401e88 <Reset_Handler+0xbc>)
  401e3e:	6813      	ldr	r3, [r2, #0]
  401e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401e44:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401e46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401e4a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401e4e:	b129      	cbz	r1, 401e5c <Reset_Handler+0x90>
		cpu_irq_enable();
  401e50:	2201      	movs	r2, #1
  401e52:	4b0c      	ldr	r3, [pc, #48]	; (401e84 <Reset_Handler+0xb8>)
  401e54:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401e56:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401e5a:	b662      	cpsie	i
        __libc_init_array();
  401e5c:	4b0b      	ldr	r3, [pc, #44]	; (401e8c <Reset_Handler+0xc0>)
  401e5e:	4798      	blx	r3
        main();
  401e60:	4b0b      	ldr	r3, [pc, #44]	; (401e90 <Reset_Handler+0xc4>)
  401e62:	4798      	blx	r3
  401e64:	e7fe      	b.n	401e64 <Reset_Handler+0x98>
  401e66:	bf00      	nop
  401e68:	20400000 	.word	0x20400000
  401e6c:	0041bae8 	.word	0x0041bae8
  401e70:	20400b60 	.word	0x20400b60
  401e74:	2040ca78 	.word	0x2040ca78
  401e78:	20400b60 	.word	0x20400b60
  401e7c:	e000ed00 	.word	0xe000ed00
  401e80:	00400000 	.word	0x00400000
  401e84:	2040000a 	.word	0x2040000a
  401e88:	e000ed88 	.word	0xe000ed88
  401e8c:	00405d65 	.word	0x00405d65
  401e90:	00405459 	.word	0x00405459

00401e94 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401e94:	4b3b      	ldr	r3, [pc, #236]	; (401f84 <SystemCoreClockUpdate+0xf0>)
  401e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e98:	f003 0303 	and.w	r3, r3, #3
  401e9c:	2b01      	cmp	r3, #1
  401e9e:	d01d      	beq.n	401edc <SystemCoreClockUpdate+0x48>
  401ea0:	b183      	cbz	r3, 401ec4 <SystemCoreClockUpdate+0x30>
  401ea2:	2b02      	cmp	r3, #2
  401ea4:	d036      	beq.n	401f14 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401ea6:	4b37      	ldr	r3, [pc, #220]	; (401f84 <SystemCoreClockUpdate+0xf0>)
  401ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401eae:	2b70      	cmp	r3, #112	; 0x70
  401eb0:	d05f      	beq.n	401f72 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401eb2:	4b34      	ldr	r3, [pc, #208]	; (401f84 <SystemCoreClockUpdate+0xf0>)
  401eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401eb6:	4934      	ldr	r1, [pc, #208]	; (401f88 <SystemCoreClockUpdate+0xf4>)
  401eb8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401ebc:	680b      	ldr	r3, [r1, #0]
  401ebe:	40d3      	lsrs	r3, r2
  401ec0:	600b      	str	r3, [r1, #0]
  401ec2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401ec4:	4b31      	ldr	r3, [pc, #196]	; (401f8c <SystemCoreClockUpdate+0xf8>)
  401ec6:	695b      	ldr	r3, [r3, #20]
  401ec8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401ecc:	bf14      	ite	ne
  401ece:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401ed2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401ed6:	4b2c      	ldr	r3, [pc, #176]	; (401f88 <SystemCoreClockUpdate+0xf4>)
  401ed8:	601a      	str	r2, [r3, #0]
  401eda:	e7e4      	b.n	401ea6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401edc:	4b29      	ldr	r3, [pc, #164]	; (401f84 <SystemCoreClockUpdate+0xf0>)
  401ede:	6a1b      	ldr	r3, [r3, #32]
  401ee0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401ee4:	d003      	beq.n	401eee <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401ee6:	4a2a      	ldr	r2, [pc, #168]	; (401f90 <SystemCoreClockUpdate+0xfc>)
  401ee8:	4b27      	ldr	r3, [pc, #156]	; (401f88 <SystemCoreClockUpdate+0xf4>)
  401eea:	601a      	str	r2, [r3, #0]
  401eec:	e7db      	b.n	401ea6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401eee:	4a29      	ldr	r2, [pc, #164]	; (401f94 <SystemCoreClockUpdate+0x100>)
  401ef0:	4b25      	ldr	r3, [pc, #148]	; (401f88 <SystemCoreClockUpdate+0xf4>)
  401ef2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401ef4:	4b23      	ldr	r3, [pc, #140]	; (401f84 <SystemCoreClockUpdate+0xf0>)
  401ef6:	6a1b      	ldr	r3, [r3, #32]
  401ef8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401efc:	2b10      	cmp	r3, #16
  401efe:	d005      	beq.n	401f0c <SystemCoreClockUpdate+0x78>
  401f00:	2b20      	cmp	r3, #32
  401f02:	d1d0      	bne.n	401ea6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401f04:	4a22      	ldr	r2, [pc, #136]	; (401f90 <SystemCoreClockUpdate+0xfc>)
  401f06:	4b20      	ldr	r3, [pc, #128]	; (401f88 <SystemCoreClockUpdate+0xf4>)
  401f08:	601a      	str	r2, [r3, #0]
          break;
  401f0a:	e7cc      	b.n	401ea6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401f0c:	4a22      	ldr	r2, [pc, #136]	; (401f98 <SystemCoreClockUpdate+0x104>)
  401f0e:	4b1e      	ldr	r3, [pc, #120]	; (401f88 <SystemCoreClockUpdate+0xf4>)
  401f10:	601a      	str	r2, [r3, #0]
          break;
  401f12:	e7c8      	b.n	401ea6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401f14:	4b1b      	ldr	r3, [pc, #108]	; (401f84 <SystemCoreClockUpdate+0xf0>)
  401f16:	6a1b      	ldr	r3, [r3, #32]
  401f18:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401f1c:	d016      	beq.n	401f4c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401f1e:	4a1c      	ldr	r2, [pc, #112]	; (401f90 <SystemCoreClockUpdate+0xfc>)
  401f20:	4b19      	ldr	r3, [pc, #100]	; (401f88 <SystemCoreClockUpdate+0xf4>)
  401f22:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401f24:	4b17      	ldr	r3, [pc, #92]	; (401f84 <SystemCoreClockUpdate+0xf0>)
  401f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f28:	f003 0303 	and.w	r3, r3, #3
  401f2c:	2b02      	cmp	r3, #2
  401f2e:	d1ba      	bne.n	401ea6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401f30:	4a14      	ldr	r2, [pc, #80]	; (401f84 <SystemCoreClockUpdate+0xf0>)
  401f32:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401f34:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401f36:	4814      	ldr	r0, [pc, #80]	; (401f88 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401f38:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401f3c:	6803      	ldr	r3, [r0, #0]
  401f3e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401f42:	b2d2      	uxtb	r2, r2
  401f44:	fbb3 f3f2 	udiv	r3, r3, r2
  401f48:	6003      	str	r3, [r0, #0]
  401f4a:	e7ac      	b.n	401ea6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401f4c:	4a11      	ldr	r2, [pc, #68]	; (401f94 <SystemCoreClockUpdate+0x100>)
  401f4e:	4b0e      	ldr	r3, [pc, #56]	; (401f88 <SystemCoreClockUpdate+0xf4>)
  401f50:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401f52:	4b0c      	ldr	r3, [pc, #48]	; (401f84 <SystemCoreClockUpdate+0xf0>)
  401f54:	6a1b      	ldr	r3, [r3, #32]
  401f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401f5a:	2b10      	cmp	r3, #16
  401f5c:	d005      	beq.n	401f6a <SystemCoreClockUpdate+0xd6>
  401f5e:	2b20      	cmp	r3, #32
  401f60:	d1e0      	bne.n	401f24 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401f62:	4a0b      	ldr	r2, [pc, #44]	; (401f90 <SystemCoreClockUpdate+0xfc>)
  401f64:	4b08      	ldr	r3, [pc, #32]	; (401f88 <SystemCoreClockUpdate+0xf4>)
  401f66:	601a      	str	r2, [r3, #0]
          break;
  401f68:	e7dc      	b.n	401f24 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401f6a:	4a0b      	ldr	r2, [pc, #44]	; (401f98 <SystemCoreClockUpdate+0x104>)
  401f6c:	4b06      	ldr	r3, [pc, #24]	; (401f88 <SystemCoreClockUpdate+0xf4>)
  401f6e:	601a      	str	r2, [r3, #0]
          break;
  401f70:	e7d8      	b.n	401f24 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401f72:	4a05      	ldr	r2, [pc, #20]	; (401f88 <SystemCoreClockUpdate+0xf4>)
  401f74:	6813      	ldr	r3, [r2, #0]
  401f76:	4909      	ldr	r1, [pc, #36]	; (401f9c <SystemCoreClockUpdate+0x108>)
  401f78:	fba1 1303 	umull	r1, r3, r1, r3
  401f7c:	085b      	lsrs	r3, r3, #1
  401f7e:	6013      	str	r3, [r2, #0]
  401f80:	4770      	bx	lr
  401f82:	bf00      	nop
  401f84:	400e0600 	.word	0x400e0600
  401f88:	2040000c 	.word	0x2040000c
  401f8c:	400e1810 	.word	0x400e1810
  401f90:	00b71b00 	.word	0x00b71b00
  401f94:	003d0900 	.word	0x003d0900
  401f98:	007a1200 	.word	0x007a1200
  401f9c:	aaaaaaab 	.word	0xaaaaaaab

00401fa0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401fa0:	4b16      	ldr	r3, [pc, #88]	; (401ffc <system_init_flash+0x5c>)
  401fa2:	4298      	cmp	r0, r3
  401fa4:	d913      	bls.n	401fce <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401fa6:	4b16      	ldr	r3, [pc, #88]	; (402000 <system_init_flash+0x60>)
  401fa8:	4298      	cmp	r0, r3
  401faa:	d915      	bls.n	401fd8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401fac:	4b15      	ldr	r3, [pc, #84]	; (402004 <system_init_flash+0x64>)
  401fae:	4298      	cmp	r0, r3
  401fb0:	d916      	bls.n	401fe0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401fb2:	4b15      	ldr	r3, [pc, #84]	; (402008 <system_init_flash+0x68>)
  401fb4:	4298      	cmp	r0, r3
  401fb6:	d917      	bls.n	401fe8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401fb8:	4b14      	ldr	r3, [pc, #80]	; (40200c <system_init_flash+0x6c>)
  401fba:	4298      	cmp	r0, r3
  401fbc:	d918      	bls.n	401ff0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401fbe:	4b14      	ldr	r3, [pc, #80]	; (402010 <system_init_flash+0x70>)
  401fc0:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401fc2:	bf94      	ite	ls
  401fc4:	4a13      	ldrls	r2, [pc, #76]	; (402014 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401fc6:	4a14      	ldrhi	r2, [pc, #80]	; (402018 <system_init_flash+0x78>)
  401fc8:	4b14      	ldr	r3, [pc, #80]	; (40201c <system_init_flash+0x7c>)
  401fca:	601a      	str	r2, [r3, #0]
  401fcc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401fce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401fd2:	4b12      	ldr	r3, [pc, #72]	; (40201c <system_init_flash+0x7c>)
  401fd4:	601a      	str	r2, [r3, #0]
  401fd6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401fd8:	4a11      	ldr	r2, [pc, #68]	; (402020 <system_init_flash+0x80>)
  401fda:	4b10      	ldr	r3, [pc, #64]	; (40201c <system_init_flash+0x7c>)
  401fdc:	601a      	str	r2, [r3, #0]
  401fde:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401fe0:	4a10      	ldr	r2, [pc, #64]	; (402024 <system_init_flash+0x84>)
  401fe2:	4b0e      	ldr	r3, [pc, #56]	; (40201c <system_init_flash+0x7c>)
  401fe4:	601a      	str	r2, [r3, #0]
  401fe6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401fe8:	4a0f      	ldr	r2, [pc, #60]	; (402028 <system_init_flash+0x88>)
  401fea:	4b0c      	ldr	r3, [pc, #48]	; (40201c <system_init_flash+0x7c>)
  401fec:	601a      	str	r2, [r3, #0]
  401fee:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401ff0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401ff4:	4b09      	ldr	r3, [pc, #36]	; (40201c <system_init_flash+0x7c>)
  401ff6:	601a      	str	r2, [r3, #0]
  401ff8:	4770      	bx	lr
  401ffa:	bf00      	nop
  401ffc:	015ef3bf 	.word	0x015ef3bf
  402000:	02bde77f 	.word	0x02bde77f
  402004:	041cdb3f 	.word	0x041cdb3f
  402008:	057bceff 	.word	0x057bceff
  40200c:	06dac2bf 	.word	0x06dac2bf
  402010:	0839b67f 	.word	0x0839b67f
  402014:	04000500 	.word	0x04000500
  402018:	04000600 	.word	0x04000600
  40201c:	400e0c00 	.word	0x400e0c00
  402020:	04000100 	.word	0x04000100
  402024:	04000200 	.word	0x04000200
  402028:	04000300 	.word	0x04000300

0040202c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40202c:	4b0a      	ldr	r3, [pc, #40]	; (402058 <_sbrk+0x2c>)
  40202e:	681b      	ldr	r3, [r3, #0]
  402030:	b153      	cbz	r3, 402048 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  402032:	4b09      	ldr	r3, [pc, #36]	; (402058 <_sbrk+0x2c>)
  402034:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402036:	181a      	adds	r2, r3, r0
  402038:	4908      	ldr	r1, [pc, #32]	; (40205c <_sbrk+0x30>)
  40203a:	4291      	cmp	r1, r2
  40203c:	db08      	blt.n	402050 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40203e:	4610      	mov	r0, r2
  402040:	4a05      	ldr	r2, [pc, #20]	; (402058 <_sbrk+0x2c>)
  402042:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402044:	4618      	mov	r0, r3
  402046:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402048:	4a05      	ldr	r2, [pc, #20]	; (402060 <_sbrk+0x34>)
  40204a:	4b03      	ldr	r3, [pc, #12]	; (402058 <_sbrk+0x2c>)
  40204c:	601a      	str	r2, [r3, #0]
  40204e:	e7f0      	b.n	402032 <_sbrk+0x6>
		return (caddr_t) -1;	
  402050:	f04f 30ff 	mov.w	r0, #4294967295
}
  402054:	4770      	bx	lr
  402056:	bf00      	nop
  402058:	20400fb4 	.word	0x20400fb4
  40205c:	2045fffc 	.word	0x2045fffc
  402060:	2040ec78 	.word	0x2040ec78

00402064 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402064:	f04f 30ff 	mov.w	r0, #4294967295
  402068:	4770      	bx	lr

0040206a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40206a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40206e:	604b      	str	r3, [r1, #4]

	return 0;
}
  402070:	2000      	movs	r0, #0
  402072:	4770      	bx	lr

00402074 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402074:	2001      	movs	r0, #1
  402076:	4770      	bx	lr

00402078 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402078:	2000      	movs	r0, #0
  40207a:	4770      	bx	lr

0040207c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40207c:	f100 0308 	add.w	r3, r0, #8
  402080:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  402082:	f04f 32ff 	mov.w	r2, #4294967295
  402086:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  402088:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40208a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  40208c:	2300      	movs	r3, #0
  40208e:	6003      	str	r3, [r0, #0]
  402090:	4770      	bx	lr

00402092 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  402092:	2300      	movs	r3, #0
  402094:	6103      	str	r3, [r0, #16]
  402096:	4770      	bx	lr

00402098 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  402098:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40209a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  40209c:	689a      	ldr	r2, [r3, #8]
  40209e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4020a0:	689a      	ldr	r2, [r3, #8]
  4020a2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4020a4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4020a6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4020a8:	6803      	ldr	r3, [r0, #0]
  4020aa:	3301      	adds	r3, #1
  4020ac:	6003      	str	r3, [r0, #0]
  4020ae:	4770      	bx	lr

004020b0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4020b0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4020b2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4020b4:	f1b5 3fff 	cmp.w	r5, #4294967295
  4020b8:	d002      	beq.n	4020c0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4020ba:	f100 0208 	add.w	r2, r0, #8
  4020be:	e002      	b.n	4020c6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4020c0:	6902      	ldr	r2, [r0, #16]
  4020c2:	e004      	b.n	4020ce <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4020c4:	461a      	mov	r2, r3
  4020c6:	6853      	ldr	r3, [r2, #4]
  4020c8:	681c      	ldr	r4, [r3, #0]
  4020ca:	42a5      	cmp	r5, r4
  4020cc:	d2fa      	bcs.n	4020c4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4020ce:	6853      	ldr	r3, [r2, #4]
  4020d0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4020d2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4020d4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4020d6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4020d8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4020da:	6803      	ldr	r3, [r0, #0]
  4020dc:	3301      	adds	r3, #1
  4020de:	6003      	str	r3, [r0, #0]
}
  4020e0:	bc30      	pop	{r4, r5}
  4020e2:	4770      	bx	lr

004020e4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4020e4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4020e6:	6842      	ldr	r2, [r0, #4]
  4020e8:	6881      	ldr	r1, [r0, #8]
  4020ea:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4020ec:	6882      	ldr	r2, [r0, #8]
  4020ee:	6841      	ldr	r1, [r0, #4]
  4020f0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4020f2:	685a      	ldr	r2, [r3, #4]
  4020f4:	4290      	cmp	r0, r2
  4020f6:	d005      	beq.n	402104 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4020f8:	2200      	movs	r2, #0
  4020fa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4020fc:	6818      	ldr	r0, [r3, #0]
  4020fe:	3801      	subs	r0, #1
  402100:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  402102:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  402104:	6882      	ldr	r2, [r0, #8]
  402106:	605a      	str	r2, [r3, #4]
  402108:	e7f6      	b.n	4020f8 <uxListRemove+0x14>
	...

0040210c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  40210c:	4b0d      	ldr	r3, [pc, #52]	; (402144 <prvTaskExitError+0x38>)
  40210e:	681b      	ldr	r3, [r3, #0]
  402110:	f1b3 3fff 	cmp.w	r3, #4294967295
  402114:	d00a      	beq.n	40212c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  402116:	f04f 0380 	mov.w	r3, #128	; 0x80
  40211a:	b672      	cpsid	i
  40211c:	f383 8811 	msr	BASEPRI, r3
  402120:	f3bf 8f6f 	isb	sy
  402124:	f3bf 8f4f 	dsb	sy
  402128:	b662      	cpsie	i
  40212a:	e7fe      	b.n	40212a <prvTaskExitError+0x1e>
  40212c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402130:	b672      	cpsid	i
  402132:	f383 8811 	msr	BASEPRI, r3
  402136:	f3bf 8f6f 	isb	sy
  40213a:	f3bf 8f4f 	dsb	sy
  40213e:	b662      	cpsie	i
  402140:	e7fe      	b.n	402140 <prvTaskExitError+0x34>
  402142:	bf00      	nop
  402144:	20400010 	.word	0x20400010

00402148 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  402148:	4806      	ldr	r0, [pc, #24]	; (402164 <prvPortStartFirstTask+0x1c>)
  40214a:	6800      	ldr	r0, [r0, #0]
  40214c:	6800      	ldr	r0, [r0, #0]
  40214e:	f380 8808 	msr	MSP, r0
  402152:	b662      	cpsie	i
  402154:	b661      	cpsie	f
  402156:	f3bf 8f4f 	dsb	sy
  40215a:	f3bf 8f6f 	isb	sy
  40215e:	df00      	svc	0
  402160:	bf00      	nop
  402162:	0000      	.short	0x0000
  402164:	e000ed08 	.word	0xe000ed08

00402168 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  402168:	f8df 000c 	ldr.w	r0, [pc, #12]	; 402178 <vPortEnableVFP+0x10>
  40216c:	6801      	ldr	r1, [r0, #0]
  40216e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402172:	6001      	str	r1, [r0, #0]
  402174:	4770      	bx	lr
  402176:	0000      	.short	0x0000
  402178:	e000ed88 	.word	0xe000ed88

0040217c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40217c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  402180:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  402184:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  402188:	4b05      	ldr	r3, [pc, #20]	; (4021a0 <pxPortInitialiseStack+0x24>)
  40218a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40218e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  402192:	f06f 0302 	mvn.w	r3, #2
  402196:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40219a:	3844      	subs	r0, #68	; 0x44
  40219c:	4770      	bx	lr
  40219e:	bf00      	nop
  4021a0:	0040210d 	.word	0x0040210d

004021a4 <SVC_Handler>:
	__asm volatile (
  4021a4:	4b06      	ldr	r3, [pc, #24]	; (4021c0 <pxCurrentTCBConst2>)
  4021a6:	6819      	ldr	r1, [r3, #0]
  4021a8:	6808      	ldr	r0, [r1, #0]
  4021aa:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021ae:	f380 8809 	msr	PSP, r0
  4021b2:	f3bf 8f6f 	isb	sy
  4021b6:	f04f 0000 	mov.w	r0, #0
  4021ba:	f380 8811 	msr	BASEPRI, r0
  4021be:	4770      	bx	lr

004021c0 <pxCurrentTCBConst2>:
  4021c0:	2040c7c8 	.word	0x2040c7c8
  4021c4:	4770      	bx	lr
  4021c6:	bf00      	nop

004021c8 <vPortEnterCritical>:
  4021c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021cc:	b672      	cpsid	i
  4021ce:	f383 8811 	msr	BASEPRI, r3
  4021d2:	f3bf 8f6f 	isb	sy
  4021d6:	f3bf 8f4f 	dsb	sy
  4021da:	b662      	cpsie	i
	uxCriticalNesting++;
  4021dc:	4a0b      	ldr	r2, [pc, #44]	; (40220c <vPortEnterCritical+0x44>)
  4021de:	6813      	ldr	r3, [r2, #0]
  4021e0:	3301      	adds	r3, #1
  4021e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4021e4:	2b01      	cmp	r3, #1
  4021e6:	d10f      	bne.n	402208 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4021e8:	4b09      	ldr	r3, [pc, #36]	; (402210 <vPortEnterCritical+0x48>)
  4021ea:	681b      	ldr	r3, [r3, #0]
  4021ec:	f013 0fff 	tst.w	r3, #255	; 0xff
  4021f0:	d00a      	beq.n	402208 <vPortEnterCritical+0x40>
  4021f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021f6:	b672      	cpsid	i
  4021f8:	f383 8811 	msr	BASEPRI, r3
  4021fc:	f3bf 8f6f 	isb	sy
  402200:	f3bf 8f4f 	dsb	sy
  402204:	b662      	cpsie	i
  402206:	e7fe      	b.n	402206 <vPortEnterCritical+0x3e>
  402208:	4770      	bx	lr
  40220a:	bf00      	nop
  40220c:	20400010 	.word	0x20400010
  402210:	e000ed04 	.word	0xe000ed04

00402214 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  402214:	4b0a      	ldr	r3, [pc, #40]	; (402240 <vPortExitCritical+0x2c>)
  402216:	681b      	ldr	r3, [r3, #0]
  402218:	b953      	cbnz	r3, 402230 <vPortExitCritical+0x1c>
  40221a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40221e:	b672      	cpsid	i
  402220:	f383 8811 	msr	BASEPRI, r3
  402224:	f3bf 8f6f 	isb	sy
  402228:	f3bf 8f4f 	dsb	sy
  40222c:	b662      	cpsie	i
  40222e:	e7fe      	b.n	40222e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  402230:	3b01      	subs	r3, #1
  402232:	4a03      	ldr	r2, [pc, #12]	; (402240 <vPortExitCritical+0x2c>)
  402234:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  402236:	b90b      	cbnz	r3, 40223c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  402238:	f383 8811 	msr	BASEPRI, r3
  40223c:	4770      	bx	lr
  40223e:	bf00      	nop
  402240:	20400010 	.word	0x20400010

00402244 <PendSV_Handler>:
	__asm volatile
  402244:	f3ef 8009 	mrs	r0, PSP
  402248:	f3bf 8f6f 	isb	sy
  40224c:	4b15      	ldr	r3, [pc, #84]	; (4022a4 <pxCurrentTCBConst>)
  40224e:	681a      	ldr	r2, [r3, #0]
  402250:	f01e 0f10 	tst.w	lr, #16
  402254:	bf08      	it	eq
  402256:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40225a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40225e:	6010      	str	r0, [r2, #0]
  402260:	f84d 3d04 	str.w	r3, [sp, #-4]!
  402264:	f04f 0080 	mov.w	r0, #128	; 0x80
  402268:	b672      	cpsid	i
  40226a:	f380 8811 	msr	BASEPRI, r0
  40226e:	f3bf 8f4f 	dsb	sy
  402272:	f3bf 8f6f 	isb	sy
  402276:	b662      	cpsie	i
  402278:	f001 f91a 	bl	4034b0 <vTaskSwitchContext>
  40227c:	f04f 0000 	mov.w	r0, #0
  402280:	f380 8811 	msr	BASEPRI, r0
  402284:	bc08      	pop	{r3}
  402286:	6819      	ldr	r1, [r3, #0]
  402288:	6808      	ldr	r0, [r1, #0]
  40228a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40228e:	f01e 0f10 	tst.w	lr, #16
  402292:	bf08      	it	eq
  402294:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  402298:	f380 8809 	msr	PSP, r0
  40229c:	f3bf 8f6f 	isb	sy
  4022a0:	4770      	bx	lr
  4022a2:	bf00      	nop

004022a4 <pxCurrentTCBConst>:
  4022a4:	2040c7c8 	.word	0x2040c7c8
  4022a8:	4770      	bx	lr
  4022aa:	bf00      	nop

004022ac <SysTick_Handler>:
{
  4022ac:	b508      	push	{r3, lr}
	__asm volatile
  4022ae:	f3ef 8311 	mrs	r3, BASEPRI
  4022b2:	f04f 0280 	mov.w	r2, #128	; 0x80
  4022b6:	b672      	cpsid	i
  4022b8:	f382 8811 	msr	BASEPRI, r2
  4022bc:	f3bf 8f6f 	isb	sy
  4022c0:	f3bf 8f4f 	dsb	sy
  4022c4:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4022c6:	4b05      	ldr	r3, [pc, #20]	; (4022dc <SysTick_Handler+0x30>)
  4022c8:	4798      	blx	r3
  4022ca:	b118      	cbz	r0, 4022d4 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4022cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022d0:	4b03      	ldr	r3, [pc, #12]	; (4022e0 <SysTick_Handler+0x34>)
  4022d2:	601a      	str	r2, [r3, #0]
	__asm volatile
  4022d4:	2300      	movs	r3, #0
  4022d6:	f383 8811 	msr	BASEPRI, r3
  4022da:	bd08      	pop	{r3, pc}
  4022dc:	0040311d 	.word	0x0040311d
  4022e0:	e000ed04 	.word	0xe000ed04

004022e4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4022e4:	4a03      	ldr	r2, [pc, #12]	; (4022f4 <vPortSetupTimerInterrupt+0x10>)
  4022e6:	4b04      	ldr	r3, [pc, #16]	; (4022f8 <vPortSetupTimerInterrupt+0x14>)
  4022e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4022ea:	2207      	movs	r2, #7
  4022ec:	3b04      	subs	r3, #4
  4022ee:	601a      	str	r2, [r3, #0]
  4022f0:	4770      	bx	lr
  4022f2:	bf00      	nop
  4022f4:	0003a97f 	.word	0x0003a97f
  4022f8:	e000e014 	.word	0xe000e014

004022fc <xPortStartScheduler>:
{
  4022fc:	b500      	push	{lr}
  4022fe:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  402300:	4b25      	ldr	r3, [pc, #148]	; (402398 <xPortStartScheduler+0x9c>)
  402302:	781a      	ldrb	r2, [r3, #0]
  402304:	b2d2      	uxtb	r2, r2
  402306:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  402308:	22ff      	movs	r2, #255	; 0xff
  40230a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  40230c:	781b      	ldrb	r3, [r3, #0]
  40230e:	b2db      	uxtb	r3, r3
  402310:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  402314:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402318:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40231c:	4a1f      	ldr	r2, [pc, #124]	; (40239c <xPortStartScheduler+0xa0>)
  40231e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  402320:	2207      	movs	r2, #7
  402322:	4b1f      	ldr	r3, [pc, #124]	; (4023a0 <xPortStartScheduler+0xa4>)
  402324:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402326:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40232a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40232e:	d010      	beq.n	402352 <xPortStartScheduler+0x56>
  402330:	2206      	movs	r2, #6
  402332:	e000      	b.n	402336 <xPortStartScheduler+0x3a>
  402334:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  402336:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40233a:	005b      	lsls	r3, r3, #1
  40233c:	b2db      	uxtb	r3, r3
  40233e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402342:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402346:	1e51      	subs	r1, r2, #1
  402348:	f013 0f80 	tst.w	r3, #128	; 0x80
  40234c:	d1f2      	bne.n	402334 <xPortStartScheduler+0x38>
  40234e:	4b14      	ldr	r3, [pc, #80]	; (4023a0 <xPortStartScheduler+0xa4>)
  402350:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  402352:	4a13      	ldr	r2, [pc, #76]	; (4023a0 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  402354:	6813      	ldr	r3, [r2, #0]
  402356:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  402358:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40235c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40235e:	9b01      	ldr	r3, [sp, #4]
  402360:	b2db      	uxtb	r3, r3
  402362:	4a0d      	ldr	r2, [pc, #52]	; (402398 <xPortStartScheduler+0x9c>)
  402364:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  402366:	4b0f      	ldr	r3, [pc, #60]	; (4023a4 <xPortStartScheduler+0xa8>)
  402368:	681a      	ldr	r2, [r3, #0]
  40236a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40236e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  402370:	681a      	ldr	r2, [r3, #0]
  402372:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  402376:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  402378:	4b0b      	ldr	r3, [pc, #44]	; (4023a8 <xPortStartScheduler+0xac>)
  40237a:	4798      	blx	r3
	uxCriticalNesting = 0;
  40237c:	2200      	movs	r2, #0
  40237e:	4b0b      	ldr	r3, [pc, #44]	; (4023ac <xPortStartScheduler+0xb0>)
  402380:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  402382:	4b0b      	ldr	r3, [pc, #44]	; (4023b0 <xPortStartScheduler+0xb4>)
  402384:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  402386:	4a0b      	ldr	r2, [pc, #44]	; (4023b4 <xPortStartScheduler+0xb8>)
  402388:	6813      	ldr	r3, [r2, #0]
  40238a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40238e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  402390:	4b09      	ldr	r3, [pc, #36]	; (4023b8 <xPortStartScheduler+0xbc>)
  402392:	4798      	blx	r3
	prvTaskExitError();
  402394:	4b09      	ldr	r3, [pc, #36]	; (4023bc <xPortStartScheduler+0xc0>)
  402396:	4798      	blx	r3
  402398:	e000e400 	.word	0xe000e400
  40239c:	20400fb8 	.word	0x20400fb8
  4023a0:	20400fbc 	.word	0x20400fbc
  4023a4:	e000ed20 	.word	0xe000ed20
  4023a8:	004022e5 	.word	0x004022e5
  4023ac:	20400010 	.word	0x20400010
  4023b0:	00402169 	.word	0x00402169
  4023b4:	e000ef34 	.word	0xe000ef34
  4023b8:	00402149 	.word	0x00402149
  4023bc:	0040210d 	.word	0x0040210d

004023c0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4023c0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4023c4:	2b0f      	cmp	r3, #15
  4023c6:	d911      	bls.n	4023ec <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4023c8:	4a12      	ldr	r2, [pc, #72]	; (402414 <vPortValidateInterruptPriority+0x54>)
  4023ca:	5c9b      	ldrb	r3, [r3, r2]
  4023cc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4023ce:	4a12      	ldr	r2, [pc, #72]	; (402418 <vPortValidateInterruptPriority+0x58>)
  4023d0:	7812      	ldrb	r2, [r2, #0]
  4023d2:	429a      	cmp	r2, r3
  4023d4:	d90a      	bls.n	4023ec <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4023d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023da:	b672      	cpsid	i
  4023dc:	f383 8811 	msr	BASEPRI, r3
  4023e0:	f3bf 8f6f 	isb	sy
  4023e4:	f3bf 8f4f 	dsb	sy
  4023e8:	b662      	cpsie	i
  4023ea:	e7fe      	b.n	4023ea <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4023ec:	4b0b      	ldr	r3, [pc, #44]	; (40241c <vPortValidateInterruptPriority+0x5c>)
  4023ee:	681b      	ldr	r3, [r3, #0]
  4023f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4023f4:	4a0a      	ldr	r2, [pc, #40]	; (402420 <vPortValidateInterruptPriority+0x60>)
  4023f6:	6812      	ldr	r2, [r2, #0]
  4023f8:	4293      	cmp	r3, r2
  4023fa:	d90a      	bls.n	402412 <vPortValidateInterruptPriority+0x52>
  4023fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402400:	b672      	cpsid	i
  402402:	f383 8811 	msr	BASEPRI, r3
  402406:	f3bf 8f6f 	isb	sy
  40240a:	f3bf 8f4f 	dsb	sy
  40240e:	b662      	cpsie	i
  402410:	e7fe      	b.n	402410 <vPortValidateInterruptPriority+0x50>
  402412:	4770      	bx	lr
  402414:	e000e3f0 	.word	0xe000e3f0
  402418:	20400fb8 	.word	0x20400fb8
  40241c:	e000ed0c 	.word	0xe000ed0c
  402420:	20400fbc 	.word	0x20400fbc

00402424 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  402424:	b538      	push	{r3, r4, r5, lr}
  402426:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  402428:	f010 0f07 	tst.w	r0, #7
  40242c:	d002      	beq.n	402434 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40242e:	f020 0407 	bic.w	r4, r0, #7
  402432:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  402434:	4b11      	ldr	r3, [pc, #68]	; (40247c <pvPortMalloc+0x58>)
  402436:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  402438:	4b11      	ldr	r3, [pc, #68]	; (402480 <pvPortMalloc+0x5c>)
  40243a:	681b      	ldr	r3, [r3, #0]
  40243c:	b193      	cbz	r3, 402464 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  40243e:	4b11      	ldr	r3, [pc, #68]	; (402484 <pvPortMalloc+0x60>)
  402440:	681b      	ldr	r3, [r3, #0]
  402442:	441c      	add	r4, r3
  402444:	42a3      	cmp	r3, r4
  402446:	d213      	bcs.n	402470 <pvPortMalloc+0x4c>
  402448:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  40244c:	4294      	cmp	r4, r2
  40244e:	d80f      	bhi.n	402470 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  402450:	4a0b      	ldr	r2, [pc, #44]	; (402480 <pvPortMalloc+0x5c>)
  402452:	6815      	ldr	r5, [r2, #0]
  402454:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  402456:	4b0b      	ldr	r3, [pc, #44]	; (402484 <pvPortMalloc+0x60>)
  402458:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  40245a:	4b0b      	ldr	r3, [pc, #44]	; (402488 <pvPortMalloc+0x64>)
  40245c:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40245e:	b14d      	cbz	r5, 402474 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  402460:	4628      	mov	r0, r5
  402462:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  402464:	4b09      	ldr	r3, [pc, #36]	; (40248c <pvPortMalloc+0x68>)
  402466:	f023 0307 	bic.w	r3, r3, #7
  40246a:	4a05      	ldr	r2, [pc, #20]	; (402480 <pvPortMalloc+0x5c>)
  40246c:	6013      	str	r3, [r2, #0]
  40246e:	e7e6      	b.n	40243e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  402470:	4b05      	ldr	r3, [pc, #20]	; (402488 <pvPortMalloc+0x64>)
  402472:	4798      	blx	r3
			vApplicationMallocFailedHook();
  402474:	4b06      	ldr	r3, [pc, #24]	; (402490 <pvPortMalloc+0x6c>)
  402476:	4798      	blx	r3
  402478:	2500      	movs	r5, #0
	return pvReturn;
  40247a:	e7f1      	b.n	402460 <pvPortMalloc+0x3c>
  40247c:	00403101 	.word	0x00403101
  402480:	20400fc0 	.word	0x20400fc0
  402484:	2040c7c4 	.word	0x2040c7c4
  402488:	00403269 	.word	0x00403269
  40248c:	20400fcc 	.word	0x20400fcc
  402490:	0040404f 	.word	0x0040404f

00402494 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  402494:	b150      	cbz	r0, 4024ac <vPortFree+0x18>
  402496:	f04f 0380 	mov.w	r3, #128	; 0x80
  40249a:	b672      	cpsid	i
  40249c:	f383 8811 	msr	BASEPRI, r3
  4024a0:	f3bf 8f6f 	isb	sy
  4024a4:	f3bf 8f4f 	dsb	sy
  4024a8:	b662      	cpsie	i
  4024aa:	e7fe      	b.n	4024aa <vPortFree+0x16>
  4024ac:	4770      	bx	lr
	...

004024b0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4024b0:	b538      	push	{r3, r4, r5, lr}
  4024b2:	4604      	mov	r4, r0
  4024b4:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4024b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4024b8:	b95a      	cbnz	r2, 4024d2 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4024ba:	6803      	ldr	r3, [r0, #0]
  4024bc:	2b00      	cmp	r3, #0
  4024be:	d12e      	bne.n	40251e <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4024c0:	6840      	ldr	r0, [r0, #4]
  4024c2:	4b1b      	ldr	r3, [pc, #108]	; (402530 <prvCopyDataToQueue+0x80>)
  4024c4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4024c6:	2300      	movs	r3, #0
  4024c8:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4024ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4024cc:	3301      	adds	r3, #1
  4024ce:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4024d0:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4024d2:	b96d      	cbnz	r5, 4024f0 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4024d4:	6880      	ldr	r0, [r0, #8]
  4024d6:	4b17      	ldr	r3, [pc, #92]	; (402534 <prvCopyDataToQueue+0x84>)
  4024d8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4024da:	68a3      	ldr	r3, [r4, #8]
  4024dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4024de:	4413      	add	r3, r2
  4024e0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4024e2:	6862      	ldr	r2, [r4, #4]
  4024e4:	4293      	cmp	r3, r2
  4024e6:	d31c      	bcc.n	402522 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4024e8:	6823      	ldr	r3, [r4, #0]
  4024ea:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4024ec:	2000      	movs	r0, #0
  4024ee:	e7ec      	b.n	4024ca <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4024f0:	68c0      	ldr	r0, [r0, #12]
  4024f2:	4b10      	ldr	r3, [pc, #64]	; (402534 <prvCopyDataToQueue+0x84>)
  4024f4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4024f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4024f8:	425b      	negs	r3, r3
  4024fa:	68e2      	ldr	r2, [r4, #12]
  4024fc:	441a      	add	r2, r3
  4024fe:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  402500:	6821      	ldr	r1, [r4, #0]
  402502:	428a      	cmp	r2, r1
  402504:	d202      	bcs.n	40250c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  402506:	6862      	ldr	r2, [r4, #4]
  402508:	4413      	add	r3, r2
  40250a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  40250c:	2d02      	cmp	r5, #2
  40250e:	d10a      	bne.n	402526 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402510:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402512:	b153      	cbz	r3, 40252a <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  402514:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402516:	3b01      	subs	r3, #1
  402518:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  40251a:	2000      	movs	r0, #0
  40251c:	e7d5      	b.n	4024ca <prvCopyDataToQueue+0x1a>
  40251e:	2000      	movs	r0, #0
  402520:	e7d3      	b.n	4024ca <prvCopyDataToQueue+0x1a>
  402522:	2000      	movs	r0, #0
  402524:	e7d1      	b.n	4024ca <prvCopyDataToQueue+0x1a>
  402526:	2000      	movs	r0, #0
  402528:	e7cf      	b.n	4024ca <prvCopyDataToQueue+0x1a>
  40252a:	2000      	movs	r0, #0
  40252c:	e7cd      	b.n	4024ca <prvCopyDataToQueue+0x1a>
  40252e:	bf00      	nop
  402530:	004038b1 	.word	0x004038b1
  402534:	0040634d 	.word	0x0040634d

00402538 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  402538:	b530      	push	{r4, r5, lr}
  40253a:	b083      	sub	sp, #12
  40253c:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40253e:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  402540:	b174      	cbz	r4, 402560 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  402542:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402544:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402546:	429a      	cmp	r2, r3
  402548:	d315      	bcc.n	402576 <prvNotifyQueueSetContainer+0x3e>
  40254a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40254e:	b672      	cpsid	i
  402550:	f383 8811 	msr	BASEPRI, r3
  402554:	f3bf 8f6f 	isb	sy
  402558:	f3bf 8f4f 	dsb	sy
  40255c:	b662      	cpsie	i
  40255e:	e7fe      	b.n	40255e <prvNotifyQueueSetContainer+0x26>
  402560:	f04f 0380 	mov.w	r3, #128	; 0x80
  402564:	b672      	cpsid	i
  402566:	f383 8811 	msr	BASEPRI, r3
  40256a:	f3bf 8f6f 	isb	sy
  40256e:	f3bf 8f4f 	dsb	sy
  402572:	b662      	cpsie	i
  402574:	e7fe      	b.n	402574 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  402576:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402578:	4293      	cmp	r3, r2
  40257a:	d803      	bhi.n	402584 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  40257c:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40257e:	4628      	mov	r0, r5
  402580:	b003      	add	sp, #12
  402582:	bd30      	pop	{r4, r5, pc}
  402584:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  402586:	a901      	add	r1, sp, #4
  402588:	4620      	mov	r0, r4
  40258a:	4b0b      	ldr	r3, [pc, #44]	; (4025b8 <prvNotifyQueueSetContainer+0x80>)
  40258c:	4798      	blx	r3
  40258e:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  402590:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402592:	f1b3 3fff 	cmp.w	r3, #4294967295
  402596:	d10a      	bne.n	4025ae <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  402598:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40259a:	2b00      	cmp	r3, #0
  40259c:	d0ef      	beq.n	40257e <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40259e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4025a2:	4b06      	ldr	r3, [pc, #24]	; (4025bc <prvNotifyQueueSetContainer+0x84>)
  4025a4:	4798      	blx	r3
  4025a6:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4025a8:	bf18      	it	ne
  4025aa:	2501      	movne	r5, #1
  4025ac:	e7e7      	b.n	40257e <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4025ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4025b0:	3301      	adds	r3, #1
  4025b2:	64a3      	str	r3, [r4, #72]	; 0x48
  4025b4:	e7e3      	b.n	40257e <prvNotifyQueueSetContainer+0x46>
  4025b6:	bf00      	nop
  4025b8:	004024b1 	.word	0x004024b1
  4025bc:	00403685 	.word	0x00403685

004025c0 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4025c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4025c2:	b172      	cbz	r2, 4025e2 <prvCopyDataFromQueue+0x22>
{
  4025c4:	b510      	push	{r4, lr}
  4025c6:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4025c8:	68c4      	ldr	r4, [r0, #12]
  4025ca:	4414      	add	r4, r2
  4025cc:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4025ce:	6840      	ldr	r0, [r0, #4]
  4025d0:	4284      	cmp	r4, r0
  4025d2:	d301      	bcc.n	4025d8 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4025d4:	6818      	ldr	r0, [r3, #0]
  4025d6:	60d8      	str	r0, [r3, #12]
  4025d8:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4025da:	68d9      	ldr	r1, [r3, #12]
  4025dc:	4b01      	ldr	r3, [pc, #4]	; (4025e4 <prvCopyDataFromQueue+0x24>)
  4025de:	4798      	blx	r3
  4025e0:	bd10      	pop	{r4, pc}
  4025e2:	4770      	bx	lr
  4025e4:	0040634d 	.word	0x0040634d

004025e8 <prvUnlockQueue>:
{
  4025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4025ea:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4025ec:	4b22      	ldr	r3, [pc, #136]	; (402678 <prvUnlockQueue+0x90>)
  4025ee:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4025f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4025f2:	2b00      	cmp	r3, #0
  4025f4:	dd1b      	ble.n	40262e <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4025f6:	4d21      	ldr	r5, [pc, #132]	; (40267c <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4025f8:	4f21      	ldr	r7, [pc, #132]	; (402680 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4025fa:	4e22      	ldr	r6, [pc, #136]	; (402684 <prvUnlockQueue+0x9c>)
  4025fc:	e00b      	b.n	402616 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4025fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402600:	b1ab      	cbz	r3, 40262e <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402602:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402606:	47b0      	blx	r6
  402608:	b978      	cbnz	r0, 40262a <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40260a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40260c:	3b01      	subs	r3, #1
  40260e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402610:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402612:	2b00      	cmp	r3, #0
  402614:	dd0b      	ble.n	40262e <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  402616:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402618:	2b00      	cmp	r3, #0
  40261a:	d0f0      	beq.n	4025fe <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40261c:	2100      	movs	r1, #0
  40261e:	4620      	mov	r0, r4
  402620:	47a8      	blx	r5
  402622:	2801      	cmp	r0, #1
  402624:	d1f1      	bne.n	40260a <prvUnlockQueue+0x22>
						vTaskMissedYield();
  402626:	47b8      	blx	r7
  402628:	e7ef      	b.n	40260a <prvUnlockQueue+0x22>
							vTaskMissedYield();
  40262a:	47b8      	blx	r7
  40262c:	e7ed      	b.n	40260a <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  40262e:	f04f 33ff 	mov.w	r3, #4294967295
  402632:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  402634:	4b14      	ldr	r3, [pc, #80]	; (402688 <prvUnlockQueue+0xa0>)
  402636:	4798      	blx	r3
	taskENTER_CRITICAL();
  402638:	4b0f      	ldr	r3, [pc, #60]	; (402678 <prvUnlockQueue+0x90>)
  40263a:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40263c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40263e:	2b00      	cmp	r3, #0
  402640:	dd14      	ble.n	40266c <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402642:	6923      	ldr	r3, [r4, #16]
  402644:	b193      	cbz	r3, 40266c <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402646:	f104 0610 	add.w	r6, r4, #16
  40264a:	4d0e      	ldr	r5, [pc, #56]	; (402684 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40264c:	4f0c      	ldr	r7, [pc, #48]	; (402680 <prvUnlockQueue+0x98>)
  40264e:	e007      	b.n	402660 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  402650:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402652:	3b01      	subs	r3, #1
  402654:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402656:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402658:	2b00      	cmp	r3, #0
  40265a:	dd07      	ble.n	40266c <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40265c:	6923      	ldr	r3, [r4, #16]
  40265e:	b12b      	cbz	r3, 40266c <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402660:	4630      	mov	r0, r6
  402662:	47a8      	blx	r5
  402664:	2800      	cmp	r0, #0
  402666:	d0f3      	beq.n	402650 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  402668:	47b8      	blx	r7
  40266a:	e7f1      	b.n	402650 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  40266c:	f04f 33ff 	mov.w	r3, #4294967295
  402670:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  402672:	4b05      	ldr	r3, [pc, #20]	; (402688 <prvUnlockQueue+0xa0>)
  402674:	4798      	blx	r3
  402676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402678:	004021c9 	.word	0x004021c9
  40267c:	00402539 	.word	0x00402539
  402680:	004037e1 	.word	0x004037e1
  402684:	00403685 	.word	0x00403685
  402688:	00402215 	.word	0x00402215

0040268c <xQueueGenericReset>:
{
  40268c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40268e:	b308      	cbz	r0, 4026d4 <xQueueGenericReset+0x48>
  402690:	4604      	mov	r4, r0
  402692:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402694:	4b1d      	ldr	r3, [pc, #116]	; (40270c <xQueueGenericReset+0x80>)
  402696:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  402698:	6822      	ldr	r2, [r4, #0]
  40269a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40269c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40269e:	fb03 f301 	mul.w	r3, r3, r1
  4026a2:	18d0      	adds	r0, r2, r3
  4026a4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4026a6:	2000      	movs	r0, #0
  4026a8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4026aa:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4026ac:	1a5b      	subs	r3, r3, r1
  4026ae:	4413      	add	r3, r2
  4026b0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4026b2:	f04f 33ff 	mov.w	r3, #4294967295
  4026b6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4026b8:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4026ba:	b9fd      	cbnz	r5, 4026fc <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4026bc:	6923      	ldr	r3, [r4, #16]
  4026be:	b12b      	cbz	r3, 4026cc <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4026c0:	f104 0010 	add.w	r0, r4, #16
  4026c4:	4b12      	ldr	r3, [pc, #72]	; (402710 <xQueueGenericReset+0x84>)
  4026c6:	4798      	blx	r3
  4026c8:	2801      	cmp	r0, #1
  4026ca:	d00e      	beq.n	4026ea <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  4026cc:	4b11      	ldr	r3, [pc, #68]	; (402714 <xQueueGenericReset+0x88>)
  4026ce:	4798      	blx	r3
}
  4026d0:	2001      	movs	r0, #1
  4026d2:	bd38      	pop	{r3, r4, r5, pc}
  4026d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026d8:	b672      	cpsid	i
  4026da:	f383 8811 	msr	BASEPRI, r3
  4026de:	f3bf 8f6f 	isb	sy
  4026e2:	f3bf 8f4f 	dsb	sy
  4026e6:	b662      	cpsie	i
  4026e8:	e7fe      	b.n	4026e8 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  4026ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4026ee:	4b0a      	ldr	r3, [pc, #40]	; (402718 <xQueueGenericReset+0x8c>)
  4026f0:	601a      	str	r2, [r3, #0]
  4026f2:	f3bf 8f4f 	dsb	sy
  4026f6:	f3bf 8f6f 	isb	sy
  4026fa:	e7e7      	b.n	4026cc <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4026fc:	f104 0010 	add.w	r0, r4, #16
  402700:	4d06      	ldr	r5, [pc, #24]	; (40271c <xQueueGenericReset+0x90>)
  402702:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  402704:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402708:	47a8      	blx	r5
  40270a:	e7df      	b.n	4026cc <xQueueGenericReset+0x40>
  40270c:	004021c9 	.word	0x004021c9
  402710:	00403685 	.word	0x00403685
  402714:	00402215 	.word	0x00402215
  402718:	e000ed04 	.word	0xe000ed04
  40271c:	0040207d 	.word	0x0040207d

00402720 <xQueueGenericCreate>:
{
  402720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  402722:	b950      	cbnz	r0, 40273a <xQueueGenericCreate+0x1a>
  402724:	f04f 0380 	mov.w	r3, #128	; 0x80
  402728:	b672      	cpsid	i
  40272a:	f383 8811 	msr	BASEPRI, r3
  40272e:	f3bf 8f6f 	isb	sy
  402732:	f3bf 8f4f 	dsb	sy
  402736:	b662      	cpsie	i
  402738:	e7fe      	b.n	402738 <xQueueGenericCreate+0x18>
  40273a:	4606      	mov	r6, r0
  40273c:	4617      	mov	r7, r2
  40273e:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  402740:	b189      	cbz	r1, 402766 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402742:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402746:	3059      	adds	r0, #89	; 0x59
  402748:	4b12      	ldr	r3, [pc, #72]	; (402794 <xQueueGenericCreate+0x74>)
  40274a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40274c:	4604      	mov	r4, r0
  40274e:	b9e8      	cbnz	r0, 40278c <xQueueGenericCreate+0x6c>
  402750:	f04f 0380 	mov.w	r3, #128	; 0x80
  402754:	b672      	cpsid	i
  402756:	f383 8811 	msr	BASEPRI, r3
  40275a:	f3bf 8f6f 	isb	sy
  40275e:	f3bf 8f4f 	dsb	sy
  402762:	b662      	cpsie	i
  402764:	e7fe      	b.n	402764 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402766:	2058      	movs	r0, #88	; 0x58
  402768:	4b0a      	ldr	r3, [pc, #40]	; (402794 <xQueueGenericCreate+0x74>)
  40276a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40276c:	4604      	mov	r4, r0
  40276e:	2800      	cmp	r0, #0
  402770:	d0ee      	beq.n	402750 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  402772:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  402774:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  402776:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  402778:	2101      	movs	r1, #1
  40277a:	4620      	mov	r0, r4
  40277c:	4b06      	ldr	r3, [pc, #24]	; (402798 <xQueueGenericCreate+0x78>)
  40277e:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  402780:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  402784:	2300      	movs	r3, #0
  402786:	6563      	str	r3, [r4, #84]	; 0x54
}
  402788:	4620      	mov	r0, r4
  40278a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  40278c:	f100 0358 	add.w	r3, r0, #88	; 0x58
  402790:	6003      	str	r3, [r0, #0]
  402792:	e7ef      	b.n	402774 <xQueueGenericCreate+0x54>
  402794:	00402425 	.word	0x00402425
  402798:	0040268d 	.word	0x0040268d

0040279c <xQueueGenericSend>:
{
  40279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027a0:	b085      	sub	sp, #20
  4027a2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4027a4:	b1b8      	cbz	r0, 4027d6 <xQueueGenericSend+0x3a>
  4027a6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4027a8:	b301      	cbz	r1, 4027ec <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4027aa:	2b02      	cmp	r3, #2
  4027ac:	d02c      	beq.n	402808 <xQueueGenericSend+0x6c>
  4027ae:	461d      	mov	r5, r3
  4027b0:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4027b2:	4b66      	ldr	r3, [pc, #408]	; (40294c <xQueueGenericSend+0x1b0>)
  4027b4:	4798      	blx	r3
  4027b6:	2800      	cmp	r0, #0
  4027b8:	d134      	bne.n	402824 <xQueueGenericSend+0x88>
  4027ba:	9b01      	ldr	r3, [sp, #4]
  4027bc:	2b00      	cmp	r3, #0
  4027be:	d038      	beq.n	402832 <xQueueGenericSend+0x96>
  4027c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027c4:	b672      	cpsid	i
  4027c6:	f383 8811 	msr	BASEPRI, r3
  4027ca:	f3bf 8f6f 	isb	sy
  4027ce:	f3bf 8f4f 	dsb	sy
  4027d2:	b662      	cpsie	i
  4027d4:	e7fe      	b.n	4027d4 <xQueueGenericSend+0x38>
  4027d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027da:	b672      	cpsid	i
  4027dc:	f383 8811 	msr	BASEPRI, r3
  4027e0:	f3bf 8f6f 	isb	sy
  4027e4:	f3bf 8f4f 	dsb	sy
  4027e8:	b662      	cpsie	i
  4027ea:	e7fe      	b.n	4027ea <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4027ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4027ee:	2a00      	cmp	r2, #0
  4027f0:	d0db      	beq.n	4027aa <xQueueGenericSend+0xe>
  4027f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027f6:	b672      	cpsid	i
  4027f8:	f383 8811 	msr	BASEPRI, r3
  4027fc:	f3bf 8f6f 	isb	sy
  402800:	f3bf 8f4f 	dsb	sy
  402804:	b662      	cpsie	i
  402806:	e7fe      	b.n	402806 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402808:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40280a:	2a01      	cmp	r2, #1
  40280c:	d0cf      	beq.n	4027ae <xQueueGenericSend+0x12>
  40280e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402812:	b672      	cpsid	i
  402814:	f383 8811 	msr	BASEPRI, r3
  402818:	f3bf 8f6f 	isb	sy
  40281c:	f3bf 8f4f 	dsb	sy
  402820:	b662      	cpsie	i
  402822:	e7fe      	b.n	402822 <xQueueGenericSend+0x86>
  402824:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  402826:	4e4a      	ldr	r6, [pc, #296]	; (402950 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  402828:	f8df a150 	ldr.w	sl, [pc, #336]	; 40297c <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  40282c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40295c <xQueueGenericSend+0x1c0>
  402830:	e042      	b.n	4028b8 <xQueueGenericSend+0x11c>
  402832:	2700      	movs	r7, #0
  402834:	e7f7      	b.n	402826 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402836:	462a      	mov	r2, r5
  402838:	4641      	mov	r1, r8
  40283a:	4620      	mov	r0, r4
  40283c:	4b45      	ldr	r3, [pc, #276]	; (402954 <xQueueGenericSend+0x1b8>)
  40283e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  402840:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402842:	b19b      	cbz	r3, 40286c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402844:	4629      	mov	r1, r5
  402846:	4620      	mov	r0, r4
  402848:	4b43      	ldr	r3, [pc, #268]	; (402958 <xQueueGenericSend+0x1bc>)
  40284a:	4798      	blx	r3
  40284c:	2801      	cmp	r0, #1
  40284e:	d107      	bne.n	402860 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402854:	4b41      	ldr	r3, [pc, #260]	; (40295c <xQueueGenericSend+0x1c0>)
  402856:	601a      	str	r2, [r3, #0]
  402858:	f3bf 8f4f 	dsb	sy
  40285c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402860:	4b3f      	ldr	r3, [pc, #252]	; (402960 <xQueueGenericSend+0x1c4>)
  402862:	4798      	blx	r3
				return pdPASS;
  402864:	2001      	movs	r0, #1
}
  402866:	b005      	add	sp, #20
  402868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40286c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40286e:	b173      	cbz	r3, 40288e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  402870:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402874:	4b3b      	ldr	r3, [pc, #236]	; (402964 <xQueueGenericSend+0x1c8>)
  402876:	4798      	blx	r3
  402878:	2801      	cmp	r0, #1
  40287a:	d1f1      	bne.n	402860 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  40287c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402880:	4b36      	ldr	r3, [pc, #216]	; (40295c <xQueueGenericSend+0x1c0>)
  402882:	601a      	str	r2, [r3, #0]
  402884:	f3bf 8f4f 	dsb	sy
  402888:	f3bf 8f6f 	isb	sy
  40288c:	e7e8      	b.n	402860 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40288e:	2800      	cmp	r0, #0
  402890:	d0e6      	beq.n	402860 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402896:	4b31      	ldr	r3, [pc, #196]	; (40295c <xQueueGenericSend+0x1c0>)
  402898:	601a      	str	r2, [r3, #0]
  40289a:	f3bf 8f4f 	dsb	sy
  40289e:	f3bf 8f6f 	isb	sy
  4028a2:	e7dd      	b.n	402860 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4028a4:	4b2e      	ldr	r3, [pc, #184]	; (402960 <xQueueGenericSend+0x1c4>)
  4028a6:	4798      	blx	r3
					return errQUEUE_FULL;
  4028a8:	2000      	movs	r0, #0
  4028aa:	e7dc      	b.n	402866 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4028ac:	4620      	mov	r0, r4
  4028ae:	4b2e      	ldr	r3, [pc, #184]	; (402968 <xQueueGenericSend+0x1cc>)
  4028b0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4028b2:	4b2e      	ldr	r3, [pc, #184]	; (40296c <xQueueGenericSend+0x1d0>)
  4028b4:	4798      	blx	r3
  4028b6:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4028b8:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4028ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4028bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4028be:	429a      	cmp	r2, r3
  4028c0:	d3b9      	bcc.n	402836 <xQueueGenericSend+0x9a>
  4028c2:	2d02      	cmp	r5, #2
  4028c4:	d0b7      	beq.n	402836 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  4028c6:	9b01      	ldr	r3, [sp, #4]
  4028c8:	2b00      	cmp	r3, #0
  4028ca:	d0eb      	beq.n	4028a4 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4028cc:	b90f      	cbnz	r7, 4028d2 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  4028ce:	a802      	add	r0, sp, #8
  4028d0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4028d2:	4b23      	ldr	r3, [pc, #140]	; (402960 <xQueueGenericSend+0x1c4>)
  4028d4:	4798      	blx	r3
		vTaskSuspendAll();
  4028d6:	4b26      	ldr	r3, [pc, #152]	; (402970 <xQueueGenericSend+0x1d4>)
  4028d8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4028da:	47b0      	blx	r6
  4028dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4028de:	f1b3 3fff 	cmp.w	r3, #4294967295
  4028e2:	d101      	bne.n	4028e8 <xQueueGenericSend+0x14c>
  4028e4:	2300      	movs	r3, #0
  4028e6:	6463      	str	r3, [r4, #68]	; 0x44
  4028e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
  4028ee:	d101      	bne.n	4028f4 <xQueueGenericSend+0x158>
  4028f0:	2300      	movs	r3, #0
  4028f2:	64a3      	str	r3, [r4, #72]	; 0x48
  4028f4:	4b1a      	ldr	r3, [pc, #104]	; (402960 <xQueueGenericSend+0x1c4>)
  4028f6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4028f8:	a901      	add	r1, sp, #4
  4028fa:	a802      	add	r0, sp, #8
  4028fc:	4b1d      	ldr	r3, [pc, #116]	; (402974 <xQueueGenericSend+0x1d8>)
  4028fe:	4798      	blx	r3
  402900:	b9e0      	cbnz	r0, 40293c <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  402902:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  402904:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  402908:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  40290a:	4b15      	ldr	r3, [pc, #84]	; (402960 <xQueueGenericSend+0x1c4>)
  40290c:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40290e:	45bb      	cmp	fp, r7
  402910:	d1cc      	bne.n	4028ac <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  402912:	9901      	ldr	r1, [sp, #4]
  402914:	f104 0010 	add.w	r0, r4, #16
  402918:	4b17      	ldr	r3, [pc, #92]	; (402978 <xQueueGenericSend+0x1dc>)
  40291a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40291c:	4620      	mov	r0, r4
  40291e:	4b12      	ldr	r3, [pc, #72]	; (402968 <xQueueGenericSend+0x1cc>)
  402920:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402922:	4b12      	ldr	r3, [pc, #72]	; (40296c <xQueueGenericSend+0x1d0>)
  402924:	4798      	blx	r3
  402926:	2800      	cmp	r0, #0
  402928:	d1c5      	bne.n	4028b6 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  40292a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40292e:	f8c9 3000 	str.w	r3, [r9]
  402932:	f3bf 8f4f 	dsb	sy
  402936:	f3bf 8f6f 	isb	sy
  40293a:	e7bc      	b.n	4028b6 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  40293c:	4620      	mov	r0, r4
  40293e:	4b0a      	ldr	r3, [pc, #40]	; (402968 <xQueueGenericSend+0x1cc>)
  402940:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402942:	4b0a      	ldr	r3, [pc, #40]	; (40296c <xQueueGenericSend+0x1d0>)
  402944:	4798      	blx	r3
			return errQUEUE_FULL;
  402946:	2000      	movs	r0, #0
  402948:	e78d      	b.n	402866 <xQueueGenericSend+0xca>
  40294a:	bf00      	nop
  40294c:	004037ed 	.word	0x004037ed
  402950:	004021c9 	.word	0x004021c9
  402954:	004024b1 	.word	0x004024b1
  402958:	00402539 	.word	0x00402539
  40295c:	e000ed04 	.word	0xe000ed04
  402960:	00402215 	.word	0x00402215
  402964:	00403685 	.word	0x00403685
  402968:	004025e9 	.word	0x004025e9
  40296c:	00403269 	.word	0x00403269
  402970:	00403101 	.word	0x00403101
  402974:	0040374d 	.word	0x0040374d
  402978:	00403581 	.word	0x00403581
  40297c:	0040371d 	.word	0x0040371d

00402980 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  402980:	2800      	cmp	r0, #0
  402982:	d036      	beq.n	4029f2 <xQueueGenericSendFromISR+0x72>
{
  402984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402988:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40298a:	2900      	cmp	r1, #0
  40298c:	d03c      	beq.n	402a08 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40298e:	2b02      	cmp	r3, #2
  402990:	d048      	beq.n	402a24 <xQueueGenericSendFromISR+0xa4>
  402992:	461e      	mov	r6, r3
  402994:	4615      	mov	r5, r2
  402996:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402998:	4b35      	ldr	r3, [pc, #212]	; (402a70 <xQueueGenericSendFromISR+0xf0>)
  40299a:	4798      	blx	r3
	__asm volatile
  40299c:	f3ef 8711 	mrs	r7, BASEPRI
  4029a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029a4:	b672      	cpsid	i
  4029a6:	f383 8811 	msr	BASEPRI, r3
  4029aa:	f3bf 8f6f 	isb	sy
  4029ae:	f3bf 8f4f 	dsb	sy
  4029b2:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4029b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4029b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4029b8:	429a      	cmp	r2, r3
  4029ba:	d301      	bcc.n	4029c0 <xQueueGenericSendFromISR+0x40>
  4029bc:	2e02      	cmp	r6, #2
  4029be:	d14f      	bne.n	402a60 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4029c0:	4632      	mov	r2, r6
  4029c2:	4641      	mov	r1, r8
  4029c4:	4620      	mov	r0, r4
  4029c6:	4b2b      	ldr	r3, [pc, #172]	; (402a74 <xQueueGenericSendFromISR+0xf4>)
  4029c8:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  4029ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4029d0:	d141      	bne.n	402a56 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4029d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4029d4:	2b00      	cmp	r3, #0
  4029d6:	d033      	beq.n	402a40 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4029d8:	4631      	mov	r1, r6
  4029da:	4620      	mov	r0, r4
  4029dc:	4b26      	ldr	r3, [pc, #152]	; (402a78 <xQueueGenericSendFromISR+0xf8>)
  4029de:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4029e0:	2d00      	cmp	r5, #0
  4029e2:	d03f      	beq.n	402a64 <xQueueGenericSendFromISR+0xe4>
  4029e4:	2801      	cmp	r0, #1
  4029e6:	d13d      	bne.n	402a64 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4029e8:	6028      	str	r0, [r5, #0]
	__asm volatile
  4029ea:	f387 8811 	msr	BASEPRI, r7
}
  4029ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4029f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029f6:	b672      	cpsid	i
  4029f8:	f383 8811 	msr	BASEPRI, r3
  4029fc:	f3bf 8f6f 	isb	sy
  402a00:	f3bf 8f4f 	dsb	sy
  402a04:	b662      	cpsie	i
  402a06:	e7fe      	b.n	402a06 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402a08:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402a0a:	2800      	cmp	r0, #0
  402a0c:	d0bf      	beq.n	40298e <xQueueGenericSendFromISR+0xe>
  402a0e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a12:	b672      	cpsid	i
  402a14:	f383 8811 	msr	BASEPRI, r3
  402a18:	f3bf 8f6f 	isb	sy
  402a1c:	f3bf 8f4f 	dsb	sy
  402a20:	b662      	cpsie	i
  402a22:	e7fe      	b.n	402a22 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402a24:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  402a26:	2801      	cmp	r0, #1
  402a28:	d0b3      	beq.n	402992 <xQueueGenericSendFromISR+0x12>
  402a2a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a2e:	b672      	cpsid	i
  402a30:	f383 8811 	msr	BASEPRI, r3
  402a34:	f3bf 8f6f 	isb	sy
  402a38:	f3bf 8f4f 	dsb	sy
  402a3c:	b662      	cpsie	i
  402a3e:	e7fe      	b.n	402a3e <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402a42:	b18b      	cbz	r3, 402a68 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402a44:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402a48:	4b0c      	ldr	r3, [pc, #48]	; (402a7c <xQueueGenericSendFromISR+0xfc>)
  402a4a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402a4c:	b175      	cbz	r5, 402a6c <xQueueGenericSendFromISR+0xec>
  402a4e:	b168      	cbz	r0, 402a6c <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402a50:	2001      	movs	r0, #1
  402a52:	6028      	str	r0, [r5, #0]
  402a54:	e7c9      	b.n	4029ea <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  402a56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402a58:	3301      	adds	r3, #1
  402a5a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402a5c:	2001      	movs	r0, #1
  402a5e:	e7c4      	b.n	4029ea <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  402a60:	2000      	movs	r0, #0
  402a62:	e7c2      	b.n	4029ea <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402a64:	2001      	movs	r0, #1
  402a66:	e7c0      	b.n	4029ea <xQueueGenericSendFromISR+0x6a>
  402a68:	2001      	movs	r0, #1
  402a6a:	e7be      	b.n	4029ea <xQueueGenericSendFromISR+0x6a>
  402a6c:	2001      	movs	r0, #1
  402a6e:	e7bc      	b.n	4029ea <xQueueGenericSendFromISR+0x6a>
  402a70:	004023c1 	.word	0x004023c1
  402a74:	004024b1 	.word	0x004024b1
  402a78:	00402539 	.word	0x00402539
  402a7c:	00403685 	.word	0x00403685

00402a80 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  402a80:	b170      	cbz	r0, 402aa0 <xQueueGiveFromISR+0x20>
{
  402a82:	b570      	push	{r4, r5, r6, lr}
  402a84:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  402a86:	6c03      	ldr	r3, [r0, #64]	; 0x40
  402a88:	b1ab      	cbz	r3, 402ab6 <xQueueGiveFromISR+0x36>
  402a8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a8e:	b672      	cpsid	i
  402a90:	f383 8811 	msr	BASEPRI, r3
  402a94:	f3bf 8f6f 	isb	sy
  402a98:	f3bf 8f4f 	dsb	sy
  402a9c:	b662      	cpsie	i
  402a9e:	e7fe      	b.n	402a9e <xQueueGiveFromISR+0x1e>
  402aa0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402aa4:	b672      	cpsid	i
  402aa6:	f383 8811 	msr	BASEPRI, r3
  402aaa:	f3bf 8f6f 	isb	sy
  402aae:	f3bf 8f4f 	dsb	sy
  402ab2:	b662      	cpsie	i
  402ab4:	e7fe      	b.n	402ab4 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  402ab6:	6803      	ldr	r3, [r0, #0]
  402ab8:	b333      	cbz	r3, 402b08 <xQueueGiveFromISR+0x88>
  402aba:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402abc:	4b25      	ldr	r3, [pc, #148]	; (402b54 <xQueueGiveFromISR+0xd4>)
  402abe:	4798      	blx	r3
	__asm volatile
  402ac0:	f3ef 8611 	mrs	r6, BASEPRI
  402ac4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ac8:	b672      	cpsid	i
  402aca:	f383 8811 	msr	BASEPRI, r3
  402ace:	f3bf 8f6f 	isb	sy
  402ad2:	f3bf 8f4f 	dsb	sy
  402ad6:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  402ad8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402ada:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402adc:	429a      	cmp	r2, r3
  402ade:	d231      	bcs.n	402b44 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  402ae0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402ae2:	3301      	adds	r3, #1
  402ae4:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  402ae6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
  402aec:	d125      	bne.n	402b3a <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  402aee:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402af0:	b1c3      	cbz	r3, 402b24 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402af2:	2100      	movs	r1, #0
  402af4:	4620      	mov	r0, r4
  402af6:	4b18      	ldr	r3, [pc, #96]	; (402b58 <xQueueGiveFromISR+0xd8>)
  402af8:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  402afa:	b32d      	cbz	r5, 402b48 <xQueueGiveFromISR+0xc8>
  402afc:	2801      	cmp	r0, #1
  402afe:	d123      	bne.n	402b48 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402b00:	6028      	str	r0, [r5, #0]
	__asm volatile
  402b02:	f386 8811 	msr	BASEPRI, r6
}
  402b06:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  402b08:	6843      	ldr	r3, [r0, #4]
  402b0a:	2b00      	cmp	r3, #0
  402b0c:	d0d5      	beq.n	402aba <xQueueGiveFromISR+0x3a>
	__asm volatile
  402b0e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b12:	b672      	cpsid	i
  402b14:	f383 8811 	msr	BASEPRI, r3
  402b18:	f3bf 8f6f 	isb	sy
  402b1c:	f3bf 8f4f 	dsb	sy
  402b20:	b662      	cpsie	i
  402b22:	e7fe      	b.n	402b22 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402b26:	b18b      	cbz	r3, 402b4c <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402b28:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402b2c:	4b0b      	ldr	r3, [pc, #44]	; (402b5c <xQueueGiveFromISR+0xdc>)
  402b2e:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402b30:	b175      	cbz	r5, 402b50 <xQueueGiveFromISR+0xd0>
  402b32:	b168      	cbz	r0, 402b50 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402b34:	2001      	movs	r0, #1
  402b36:	6028      	str	r0, [r5, #0]
  402b38:	e7e3      	b.n	402b02 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  402b3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402b3c:	3301      	adds	r3, #1
  402b3e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402b40:	2001      	movs	r0, #1
  402b42:	e7de      	b.n	402b02 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  402b44:	2000      	movs	r0, #0
  402b46:	e7dc      	b.n	402b02 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  402b48:	2001      	movs	r0, #1
  402b4a:	e7da      	b.n	402b02 <xQueueGiveFromISR+0x82>
  402b4c:	2001      	movs	r0, #1
  402b4e:	e7d8      	b.n	402b02 <xQueueGiveFromISR+0x82>
  402b50:	2001      	movs	r0, #1
  402b52:	e7d6      	b.n	402b02 <xQueueGiveFromISR+0x82>
  402b54:	004023c1 	.word	0x004023c1
  402b58:	00402539 	.word	0x00402539
  402b5c:	00403685 	.word	0x00403685

00402b60 <xQueueGenericReceive>:
{
  402b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b64:	b084      	sub	sp, #16
  402b66:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402b68:	b198      	cbz	r0, 402b92 <xQueueGenericReceive+0x32>
  402b6a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402b6c:	b1e1      	cbz	r1, 402ba8 <xQueueGenericReceive+0x48>
  402b6e:	4698      	mov	r8, r3
  402b70:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402b72:	4b61      	ldr	r3, [pc, #388]	; (402cf8 <xQueueGenericReceive+0x198>)
  402b74:	4798      	blx	r3
  402b76:	bb28      	cbnz	r0, 402bc4 <xQueueGenericReceive+0x64>
  402b78:	9b01      	ldr	r3, [sp, #4]
  402b7a:	b353      	cbz	r3, 402bd2 <xQueueGenericReceive+0x72>
  402b7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b80:	b672      	cpsid	i
  402b82:	f383 8811 	msr	BASEPRI, r3
  402b86:	f3bf 8f6f 	isb	sy
  402b8a:	f3bf 8f4f 	dsb	sy
  402b8e:	b662      	cpsie	i
  402b90:	e7fe      	b.n	402b90 <xQueueGenericReceive+0x30>
  402b92:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b96:	b672      	cpsid	i
  402b98:	f383 8811 	msr	BASEPRI, r3
  402b9c:	f3bf 8f6f 	isb	sy
  402ba0:	f3bf 8f4f 	dsb	sy
  402ba4:	b662      	cpsie	i
  402ba6:	e7fe      	b.n	402ba6 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402ba8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402baa:	2a00      	cmp	r2, #0
  402bac:	d0df      	beq.n	402b6e <xQueueGenericReceive+0xe>
  402bae:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bb2:	b672      	cpsid	i
  402bb4:	f383 8811 	msr	BASEPRI, r3
  402bb8:	f3bf 8f6f 	isb	sy
  402bbc:	f3bf 8f4f 	dsb	sy
  402bc0:	b662      	cpsie	i
  402bc2:	e7fe      	b.n	402bc2 <xQueueGenericReceive+0x62>
  402bc4:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  402bc6:	4d4d      	ldr	r5, [pc, #308]	; (402cfc <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  402bc8:	f8df a160 	ldr.w	sl, [pc, #352]	; 402d2c <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  402bcc:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402d0c <xQueueGenericReceive+0x1ac>
  402bd0:	e04b      	b.n	402c6a <xQueueGenericReceive+0x10a>
  402bd2:	2600      	movs	r6, #0
  402bd4:	e7f7      	b.n	402bc6 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402bd6:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402bd8:	4639      	mov	r1, r7
  402bda:	4620      	mov	r0, r4
  402bdc:	4b48      	ldr	r3, [pc, #288]	; (402d00 <xQueueGenericReceive+0x1a0>)
  402bde:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  402be0:	f1b8 0f00 	cmp.w	r8, #0
  402be4:	d11d      	bne.n	402c22 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  402be6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402be8:	3b01      	subs	r3, #1
  402bea:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402bec:	6823      	ldr	r3, [r4, #0]
  402bee:	b913      	cbnz	r3, 402bf6 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  402bf0:	4b44      	ldr	r3, [pc, #272]	; (402d04 <xQueueGenericReceive+0x1a4>)
  402bf2:	4798      	blx	r3
  402bf4:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402bf6:	6923      	ldr	r3, [r4, #16]
  402bf8:	b16b      	cbz	r3, 402c16 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402bfa:	f104 0010 	add.w	r0, r4, #16
  402bfe:	4b42      	ldr	r3, [pc, #264]	; (402d08 <xQueueGenericReceive+0x1a8>)
  402c00:	4798      	blx	r3
  402c02:	2801      	cmp	r0, #1
  402c04:	d107      	bne.n	402c16 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402c0a:	4b40      	ldr	r3, [pc, #256]	; (402d0c <xQueueGenericReceive+0x1ac>)
  402c0c:	601a      	str	r2, [r3, #0]
  402c0e:	f3bf 8f4f 	dsb	sy
  402c12:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402c16:	4b3e      	ldr	r3, [pc, #248]	; (402d10 <xQueueGenericReceive+0x1b0>)
  402c18:	4798      	blx	r3
				return pdPASS;
  402c1a:	2001      	movs	r0, #1
}
  402c1c:	b004      	add	sp, #16
  402c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  402c22:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402c26:	2b00      	cmp	r3, #0
  402c28:	d0f5      	beq.n	402c16 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402c2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402c2e:	4b36      	ldr	r3, [pc, #216]	; (402d08 <xQueueGenericReceive+0x1a8>)
  402c30:	4798      	blx	r3
  402c32:	2800      	cmp	r0, #0
  402c34:	d0ef      	beq.n	402c16 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402c3a:	4b34      	ldr	r3, [pc, #208]	; (402d0c <xQueueGenericReceive+0x1ac>)
  402c3c:	601a      	str	r2, [r3, #0]
  402c3e:	f3bf 8f4f 	dsb	sy
  402c42:	f3bf 8f6f 	isb	sy
  402c46:	e7e6      	b.n	402c16 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  402c48:	4b31      	ldr	r3, [pc, #196]	; (402d10 <xQueueGenericReceive+0x1b0>)
  402c4a:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402c4c:	2000      	movs	r0, #0
  402c4e:	e7e5      	b.n	402c1c <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  402c50:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402c52:	6860      	ldr	r0, [r4, #4]
  402c54:	4b2f      	ldr	r3, [pc, #188]	; (402d14 <xQueueGenericReceive+0x1b4>)
  402c56:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402c58:	4b2d      	ldr	r3, [pc, #180]	; (402d10 <xQueueGenericReceive+0x1b0>)
  402c5a:	4798      	blx	r3
  402c5c:	e030      	b.n	402cc0 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  402c5e:	4620      	mov	r0, r4
  402c60:	4b2d      	ldr	r3, [pc, #180]	; (402d18 <xQueueGenericReceive+0x1b8>)
  402c62:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402c64:	4b2d      	ldr	r3, [pc, #180]	; (402d1c <xQueueGenericReceive+0x1bc>)
  402c66:	4798      	blx	r3
  402c68:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  402c6a:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402c6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402c6e:	2b00      	cmp	r3, #0
  402c70:	d1b1      	bne.n	402bd6 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402c72:	9b01      	ldr	r3, [sp, #4]
  402c74:	2b00      	cmp	r3, #0
  402c76:	d0e7      	beq.n	402c48 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402c78:	b90e      	cbnz	r6, 402c7e <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  402c7a:	a802      	add	r0, sp, #8
  402c7c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402c7e:	4b24      	ldr	r3, [pc, #144]	; (402d10 <xQueueGenericReceive+0x1b0>)
  402c80:	4798      	blx	r3
		vTaskSuspendAll();
  402c82:	4b27      	ldr	r3, [pc, #156]	; (402d20 <xQueueGenericReceive+0x1c0>)
  402c84:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402c86:	47a8      	blx	r5
  402c88:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
  402c8e:	d101      	bne.n	402c94 <xQueueGenericReceive+0x134>
  402c90:	2300      	movs	r3, #0
  402c92:	6463      	str	r3, [r4, #68]	; 0x44
  402c94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402c96:	f1b3 3fff 	cmp.w	r3, #4294967295
  402c9a:	d101      	bne.n	402ca0 <xQueueGenericReceive+0x140>
  402c9c:	2300      	movs	r3, #0
  402c9e:	64a3      	str	r3, [r4, #72]	; 0x48
  402ca0:	4b1b      	ldr	r3, [pc, #108]	; (402d10 <xQueueGenericReceive+0x1b0>)
  402ca2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402ca4:	a901      	add	r1, sp, #4
  402ca6:	a802      	add	r0, sp, #8
  402ca8:	4b1e      	ldr	r3, [pc, #120]	; (402d24 <xQueueGenericReceive+0x1c4>)
  402caa:	4798      	blx	r3
  402cac:	b9e8      	cbnz	r0, 402cea <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  402cae:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402cb0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402cb2:	4b17      	ldr	r3, [pc, #92]	; (402d10 <xQueueGenericReceive+0x1b0>)
  402cb4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402cb6:	2e00      	cmp	r6, #0
  402cb8:	d1d1      	bne.n	402c5e <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402cba:	6823      	ldr	r3, [r4, #0]
  402cbc:	2b00      	cmp	r3, #0
  402cbe:	d0c7      	beq.n	402c50 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402cc0:	9901      	ldr	r1, [sp, #4]
  402cc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402cc6:	4b18      	ldr	r3, [pc, #96]	; (402d28 <xQueueGenericReceive+0x1c8>)
  402cc8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402cca:	4620      	mov	r0, r4
  402ccc:	4b12      	ldr	r3, [pc, #72]	; (402d18 <xQueueGenericReceive+0x1b8>)
  402cce:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402cd0:	4b12      	ldr	r3, [pc, #72]	; (402d1c <xQueueGenericReceive+0x1bc>)
  402cd2:	4798      	blx	r3
  402cd4:	2800      	cmp	r0, #0
  402cd6:	d1c7      	bne.n	402c68 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402cdc:	f8c9 3000 	str.w	r3, [r9]
  402ce0:	f3bf 8f4f 	dsb	sy
  402ce4:	f3bf 8f6f 	isb	sy
  402ce8:	e7be      	b.n	402c68 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  402cea:	4620      	mov	r0, r4
  402cec:	4b0a      	ldr	r3, [pc, #40]	; (402d18 <xQueueGenericReceive+0x1b8>)
  402cee:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402cf0:	4b0a      	ldr	r3, [pc, #40]	; (402d1c <xQueueGenericReceive+0x1bc>)
  402cf2:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402cf4:	2000      	movs	r0, #0
  402cf6:	e791      	b.n	402c1c <xQueueGenericReceive+0xbc>
  402cf8:	004037ed 	.word	0x004037ed
  402cfc:	004021c9 	.word	0x004021c9
  402d00:	004025c1 	.word	0x004025c1
  402d04:	0040396d 	.word	0x0040396d
  402d08:	00403685 	.word	0x00403685
  402d0c:	e000ed04 	.word	0xe000ed04
  402d10:	00402215 	.word	0x00402215
  402d14:	0040380d 	.word	0x0040380d
  402d18:	004025e9 	.word	0x004025e9
  402d1c:	00403269 	.word	0x00403269
  402d20:	00403101 	.word	0x00403101
  402d24:	0040374d 	.word	0x0040374d
  402d28:	00403581 	.word	0x00403581
  402d2c:	0040371d 	.word	0x0040371d

00402d30 <vQueueAddToRegistry>:
	{
  402d30:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402d32:	4b0b      	ldr	r3, [pc, #44]	; (402d60 <vQueueAddToRegistry+0x30>)
  402d34:	681b      	ldr	r3, [r3, #0]
  402d36:	b153      	cbz	r3, 402d4e <vQueueAddToRegistry+0x1e>
  402d38:	2301      	movs	r3, #1
  402d3a:	4c09      	ldr	r4, [pc, #36]	; (402d60 <vQueueAddToRegistry+0x30>)
  402d3c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402d40:	b132      	cbz	r2, 402d50 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402d42:	3301      	adds	r3, #1
  402d44:	2b08      	cmp	r3, #8
  402d46:	d1f9      	bne.n	402d3c <vQueueAddToRegistry+0xc>
	}
  402d48:	f85d 4b04 	ldr.w	r4, [sp], #4
  402d4c:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402d4e:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402d50:	4a03      	ldr	r2, [pc, #12]	; (402d60 <vQueueAddToRegistry+0x30>)
  402d52:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402d56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402d5a:	6058      	str	r0, [r3, #4]
				break;
  402d5c:	e7f4      	b.n	402d48 <vQueueAddToRegistry+0x18>
  402d5e:	bf00      	nop
  402d60:	2040c9f8 	.word	0x2040c9f8

00402d64 <vQueueWaitForMessageRestricted>:
	{
  402d64:	b570      	push	{r4, r5, r6, lr}
  402d66:	4604      	mov	r4, r0
  402d68:	460d      	mov	r5, r1
  402d6a:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402d6c:	4b0f      	ldr	r3, [pc, #60]	; (402dac <vQueueWaitForMessageRestricted+0x48>)
  402d6e:	4798      	blx	r3
  402d70:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402d72:	f1b3 3fff 	cmp.w	r3, #4294967295
  402d76:	d00b      	beq.n	402d90 <vQueueWaitForMessageRestricted+0x2c>
  402d78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
  402d7e:	d00a      	beq.n	402d96 <vQueueWaitForMessageRestricted+0x32>
  402d80:	4b0b      	ldr	r3, [pc, #44]	; (402db0 <vQueueWaitForMessageRestricted+0x4c>)
  402d82:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402d84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402d86:	b14b      	cbz	r3, 402d9c <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402d88:	4620      	mov	r0, r4
  402d8a:	4b0a      	ldr	r3, [pc, #40]	; (402db4 <vQueueWaitForMessageRestricted+0x50>)
  402d8c:	4798      	blx	r3
  402d8e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402d90:	2300      	movs	r3, #0
  402d92:	6463      	str	r3, [r4, #68]	; 0x44
  402d94:	e7f0      	b.n	402d78 <vQueueWaitForMessageRestricted+0x14>
  402d96:	2300      	movs	r3, #0
  402d98:	64a3      	str	r3, [r4, #72]	; 0x48
  402d9a:	e7f1      	b.n	402d80 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402d9c:	4632      	mov	r2, r6
  402d9e:	4629      	mov	r1, r5
  402da0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402da4:	4b04      	ldr	r3, [pc, #16]	; (402db8 <vQueueWaitForMessageRestricted+0x54>)
  402da6:	4798      	blx	r3
  402da8:	e7ee      	b.n	402d88 <vQueueWaitForMessageRestricted+0x24>
  402daa:	bf00      	nop
  402dac:	004021c9 	.word	0x004021c9
  402db0:	00402215 	.word	0x00402215
  402db4:	004025e9 	.word	0x004025e9
  402db8:	00403605 	.word	0x00403605

00402dbc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402dbc:	4b08      	ldr	r3, [pc, #32]	; (402de0 <prvResetNextTaskUnblockTime+0x24>)
  402dbe:	681b      	ldr	r3, [r3, #0]
  402dc0:	681b      	ldr	r3, [r3, #0]
  402dc2:	b13b      	cbz	r3, 402dd4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402dc4:	4b06      	ldr	r3, [pc, #24]	; (402de0 <prvResetNextTaskUnblockTime+0x24>)
  402dc6:	681b      	ldr	r3, [r3, #0]
  402dc8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402dca:	68db      	ldr	r3, [r3, #12]
  402dcc:	685a      	ldr	r2, [r3, #4]
  402dce:	4b05      	ldr	r3, [pc, #20]	; (402de4 <prvResetNextTaskUnblockTime+0x28>)
  402dd0:	601a      	str	r2, [r3, #0]
  402dd2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402dd4:	f04f 32ff 	mov.w	r2, #4294967295
  402dd8:	4b02      	ldr	r3, [pc, #8]	; (402de4 <prvResetNextTaskUnblockTime+0x28>)
  402dda:	601a      	str	r2, [r3, #0]
  402ddc:	4770      	bx	lr
  402dde:	bf00      	nop
  402de0:	2040c7cc 	.word	0x2040c7cc
  402de4:	2040c878 	.word	0x2040c878

00402de8 <prvAddCurrentTaskToDelayedList>:
{
  402de8:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402dea:	4b0f      	ldr	r3, [pc, #60]	; (402e28 <prvAddCurrentTaskToDelayedList+0x40>)
  402dec:	681b      	ldr	r3, [r3, #0]
  402dee:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402df0:	4b0e      	ldr	r3, [pc, #56]	; (402e2c <prvAddCurrentTaskToDelayedList+0x44>)
  402df2:	681b      	ldr	r3, [r3, #0]
  402df4:	4298      	cmp	r0, r3
  402df6:	d30e      	bcc.n	402e16 <prvAddCurrentTaskToDelayedList+0x2e>
  402df8:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402dfa:	4b0d      	ldr	r3, [pc, #52]	; (402e30 <prvAddCurrentTaskToDelayedList+0x48>)
  402dfc:	6818      	ldr	r0, [r3, #0]
  402dfe:	4b0a      	ldr	r3, [pc, #40]	; (402e28 <prvAddCurrentTaskToDelayedList+0x40>)
  402e00:	6819      	ldr	r1, [r3, #0]
  402e02:	3104      	adds	r1, #4
  402e04:	4b0b      	ldr	r3, [pc, #44]	; (402e34 <prvAddCurrentTaskToDelayedList+0x4c>)
  402e06:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402e08:	4b0b      	ldr	r3, [pc, #44]	; (402e38 <prvAddCurrentTaskToDelayedList+0x50>)
  402e0a:	681b      	ldr	r3, [r3, #0]
  402e0c:	429c      	cmp	r4, r3
  402e0e:	d201      	bcs.n	402e14 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  402e10:	4b09      	ldr	r3, [pc, #36]	; (402e38 <prvAddCurrentTaskToDelayedList+0x50>)
  402e12:	601c      	str	r4, [r3, #0]
  402e14:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402e16:	4b09      	ldr	r3, [pc, #36]	; (402e3c <prvAddCurrentTaskToDelayedList+0x54>)
  402e18:	6818      	ldr	r0, [r3, #0]
  402e1a:	4b03      	ldr	r3, [pc, #12]	; (402e28 <prvAddCurrentTaskToDelayedList+0x40>)
  402e1c:	6819      	ldr	r1, [r3, #0]
  402e1e:	3104      	adds	r1, #4
  402e20:	4b04      	ldr	r3, [pc, #16]	; (402e34 <prvAddCurrentTaskToDelayedList+0x4c>)
  402e22:	4798      	blx	r3
  402e24:	bd10      	pop	{r4, pc}
  402e26:	bf00      	nop
  402e28:	2040c7c8 	.word	0x2040c7c8
  402e2c:	2040c8c0 	.word	0x2040c8c0
  402e30:	2040c7cc 	.word	0x2040c7cc
  402e34:	004020b1 	.word	0x004020b1
  402e38:	2040c878 	.word	0x2040c878
  402e3c:	2040c7d0 	.word	0x2040c7d0

00402e40 <xTaskGenericCreate>:
{
  402e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e44:	b083      	sub	sp, #12
  402e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402e48:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402e4c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402e4e:	b160      	cbz	r0, 402e6a <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402e50:	2d04      	cmp	r5, #4
  402e52:	d915      	bls.n	402e80 <xTaskGenericCreate+0x40>
  402e54:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e58:	b672      	cpsid	i
  402e5a:	f383 8811 	msr	BASEPRI, r3
  402e5e:	f3bf 8f6f 	isb	sy
  402e62:	f3bf 8f4f 	dsb	sy
  402e66:	b662      	cpsie	i
  402e68:	e7fe      	b.n	402e68 <xTaskGenericCreate+0x28>
  402e6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e6e:	b672      	cpsid	i
  402e70:	f383 8811 	msr	BASEPRI, r3
  402e74:	f3bf 8f6f 	isb	sy
  402e78:	f3bf 8f4f 	dsb	sy
  402e7c:	b662      	cpsie	i
  402e7e:	e7fe      	b.n	402e7e <xTaskGenericCreate+0x3e>
  402e80:	9001      	str	r0, [sp, #4]
  402e82:	4698      	mov	r8, r3
  402e84:	4691      	mov	r9, r2
  402e86:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402e88:	b936      	cbnz	r6, 402e98 <xTaskGenericCreate+0x58>
  402e8a:	0090      	lsls	r0, r2, #2
  402e8c:	4b62      	ldr	r3, [pc, #392]	; (403018 <xTaskGenericCreate+0x1d8>)
  402e8e:	4798      	blx	r3
		if( pxStack != NULL )
  402e90:	4606      	mov	r6, r0
  402e92:	2800      	cmp	r0, #0
  402e94:	f000 809e 	beq.w	402fd4 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402e98:	2058      	movs	r0, #88	; 0x58
  402e9a:	4b5f      	ldr	r3, [pc, #380]	; (403018 <xTaskGenericCreate+0x1d8>)
  402e9c:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402e9e:	4604      	mov	r4, r0
  402ea0:	2800      	cmp	r0, #0
  402ea2:	f000 8094 	beq.w	402fce <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402ea6:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402ea8:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402eac:	21a5      	movs	r1, #165	; 0xa5
  402eae:	4630      	mov	r0, r6
  402eb0:	4b5a      	ldr	r3, [pc, #360]	; (40301c <xTaskGenericCreate+0x1dc>)
  402eb2:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402eb4:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402eb8:	444e      	add	r6, r9
  402eba:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402ebc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402ec0:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402ec4:	783b      	ldrb	r3, [r7, #0]
  402ec6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402eca:	783b      	ldrb	r3, [r7, #0]
  402ecc:	2b00      	cmp	r3, #0
  402ece:	f040 8084 	bne.w	402fda <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402ed2:	2700      	movs	r7, #0
  402ed4:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402ed8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402eda:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402edc:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402ede:	f104 0904 	add.w	r9, r4, #4
  402ee2:	4648      	mov	r0, r9
  402ee4:	f8df b184 	ldr.w	fp, [pc, #388]	; 40306c <xTaskGenericCreate+0x22c>
  402ee8:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402eea:	f104 0018 	add.w	r0, r4, #24
  402eee:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402ef0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402ef2:	f1c5 0305 	rsb	r3, r5, #5
  402ef6:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402ef8:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402efa:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402efc:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402f00:	4642      	mov	r2, r8
  402f02:	9901      	ldr	r1, [sp, #4]
  402f04:	4630      	mov	r0, r6
  402f06:	4b46      	ldr	r3, [pc, #280]	; (403020 <xTaskGenericCreate+0x1e0>)
  402f08:	4798      	blx	r3
  402f0a:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402f0c:	f1ba 0f00 	cmp.w	sl, #0
  402f10:	d001      	beq.n	402f16 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402f12:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  402f16:	4b43      	ldr	r3, [pc, #268]	; (403024 <xTaskGenericCreate+0x1e4>)
  402f18:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  402f1a:	4a43      	ldr	r2, [pc, #268]	; (403028 <xTaskGenericCreate+0x1e8>)
  402f1c:	6813      	ldr	r3, [r2, #0]
  402f1e:	3301      	adds	r3, #1
  402f20:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  402f22:	4b42      	ldr	r3, [pc, #264]	; (40302c <xTaskGenericCreate+0x1ec>)
  402f24:	681b      	ldr	r3, [r3, #0]
  402f26:	2b00      	cmp	r3, #0
  402f28:	d166      	bne.n	402ff8 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  402f2a:	4b40      	ldr	r3, [pc, #256]	; (40302c <xTaskGenericCreate+0x1ec>)
  402f2c:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402f2e:	6813      	ldr	r3, [r2, #0]
  402f30:	2b01      	cmp	r3, #1
  402f32:	d121      	bne.n	402f78 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402f34:	4f3e      	ldr	r7, [pc, #248]	; (403030 <xTaskGenericCreate+0x1f0>)
  402f36:	4638      	mov	r0, r7
  402f38:	4e3e      	ldr	r6, [pc, #248]	; (403034 <xTaskGenericCreate+0x1f4>)
  402f3a:	47b0      	blx	r6
  402f3c:	f107 0014 	add.w	r0, r7, #20
  402f40:	47b0      	blx	r6
  402f42:	f107 0028 	add.w	r0, r7, #40	; 0x28
  402f46:	47b0      	blx	r6
  402f48:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402f4c:	47b0      	blx	r6
  402f4e:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402f52:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402f54:	f8df 8118 	ldr.w	r8, [pc, #280]	; 403070 <xTaskGenericCreate+0x230>
  402f58:	4640      	mov	r0, r8
  402f5a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402f5c:	4f36      	ldr	r7, [pc, #216]	; (403038 <xTaskGenericCreate+0x1f8>)
  402f5e:	4638      	mov	r0, r7
  402f60:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402f62:	4836      	ldr	r0, [pc, #216]	; (40303c <xTaskGenericCreate+0x1fc>)
  402f64:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402f66:	4836      	ldr	r0, [pc, #216]	; (403040 <xTaskGenericCreate+0x200>)
  402f68:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  402f6a:	4836      	ldr	r0, [pc, #216]	; (403044 <xTaskGenericCreate+0x204>)
  402f6c:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  402f6e:	4b36      	ldr	r3, [pc, #216]	; (403048 <xTaskGenericCreate+0x208>)
  402f70:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402f74:	4b35      	ldr	r3, [pc, #212]	; (40304c <xTaskGenericCreate+0x20c>)
  402f76:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402f78:	4a35      	ldr	r2, [pc, #212]	; (403050 <xTaskGenericCreate+0x210>)
  402f7a:	6813      	ldr	r3, [r2, #0]
  402f7c:	3301      	adds	r3, #1
  402f7e:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402f80:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402f82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402f84:	4a33      	ldr	r2, [pc, #204]	; (403054 <xTaskGenericCreate+0x214>)
  402f86:	6811      	ldr	r1, [r2, #0]
  402f88:	2301      	movs	r3, #1
  402f8a:	4083      	lsls	r3, r0
  402f8c:	430b      	orrs	r3, r1
  402f8e:	6013      	str	r3, [r2, #0]
  402f90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402f94:	4649      	mov	r1, r9
  402f96:	4b26      	ldr	r3, [pc, #152]	; (403030 <xTaskGenericCreate+0x1f0>)
  402f98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402f9c:	4b2e      	ldr	r3, [pc, #184]	; (403058 <xTaskGenericCreate+0x218>)
  402f9e:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402fa0:	4b2e      	ldr	r3, [pc, #184]	; (40305c <xTaskGenericCreate+0x21c>)
  402fa2:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402fa4:	4b2e      	ldr	r3, [pc, #184]	; (403060 <xTaskGenericCreate+0x220>)
  402fa6:	681b      	ldr	r3, [r3, #0]
  402fa8:	2b00      	cmp	r3, #0
  402faa:	d031      	beq.n	403010 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402fac:	4b1f      	ldr	r3, [pc, #124]	; (40302c <xTaskGenericCreate+0x1ec>)
  402fae:	681b      	ldr	r3, [r3, #0]
  402fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402fb2:	429d      	cmp	r5, r3
  402fb4:	d92e      	bls.n	403014 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402fba:	4b2a      	ldr	r3, [pc, #168]	; (403064 <xTaskGenericCreate+0x224>)
  402fbc:	601a      	str	r2, [r3, #0]
  402fbe:	f3bf 8f4f 	dsb	sy
  402fc2:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402fc6:	2001      	movs	r0, #1
}
  402fc8:	b003      	add	sp, #12
  402fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402fce:	4630      	mov	r0, r6
  402fd0:	4b25      	ldr	r3, [pc, #148]	; (403068 <xTaskGenericCreate+0x228>)
  402fd2:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402fd4:	f04f 30ff 	mov.w	r0, #4294967295
  402fd8:	e7f6      	b.n	402fc8 <xTaskGenericCreate+0x188>
  402fda:	463b      	mov	r3, r7
  402fdc:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402fe0:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402fe2:	7859      	ldrb	r1, [r3, #1]
  402fe4:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402fe8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402fec:	2900      	cmp	r1, #0
  402fee:	f43f af70 	beq.w	402ed2 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402ff2:	42bb      	cmp	r3, r7
  402ff4:	d1f5      	bne.n	402fe2 <xTaskGenericCreate+0x1a2>
  402ff6:	e76c      	b.n	402ed2 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  402ff8:	4b19      	ldr	r3, [pc, #100]	; (403060 <xTaskGenericCreate+0x220>)
  402ffa:	681b      	ldr	r3, [r3, #0]
  402ffc:	2b00      	cmp	r3, #0
  402ffe:	d1bb      	bne.n	402f78 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  403000:	4b0a      	ldr	r3, [pc, #40]	; (40302c <xTaskGenericCreate+0x1ec>)
  403002:	681b      	ldr	r3, [r3, #0]
  403004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403006:	429d      	cmp	r5, r3
  403008:	d3b6      	bcc.n	402f78 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  40300a:	4b08      	ldr	r3, [pc, #32]	; (40302c <xTaskGenericCreate+0x1ec>)
  40300c:	601c      	str	r4, [r3, #0]
  40300e:	e7b3      	b.n	402f78 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  403010:	2001      	movs	r0, #1
  403012:	e7d9      	b.n	402fc8 <xTaskGenericCreate+0x188>
  403014:	2001      	movs	r0, #1
	return xReturn;
  403016:	e7d7      	b.n	402fc8 <xTaskGenericCreate+0x188>
  403018:	00402425 	.word	0x00402425
  40301c:	00406481 	.word	0x00406481
  403020:	0040217d 	.word	0x0040217d
  403024:	004021c9 	.word	0x004021c9
  403028:	2040c838 	.word	0x2040c838
  40302c:	2040c7c8 	.word	0x2040c7c8
  403030:	2040c7d4 	.word	0x2040c7d4
  403034:	0040207d 	.word	0x0040207d
  403038:	2040c864 	.word	0x2040c864
  40303c:	2040c880 	.word	0x2040c880
  403040:	2040c8ac 	.word	0x2040c8ac
  403044:	2040c898 	.word	0x2040c898
  403048:	2040c7cc 	.word	0x2040c7cc
  40304c:	2040c7d0 	.word	0x2040c7d0
  403050:	2040c844 	.word	0x2040c844
  403054:	2040c84c 	.word	0x2040c84c
  403058:	00402099 	.word	0x00402099
  40305c:	00402215 	.word	0x00402215
  403060:	2040c894 	.word	0x2040c894
  403064:	e000ed04 	.word	0xe000ed04
  403068:	00402495 	.word	0x00402495
  40306c:	00402093 	.word	0x00402093
  403070:	2040c850 	.word	0x2040c850

00403074 <vTaskStartScheduler>:
{
  403074:	b510      	push	{r4, lr}
  403076:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  403078:	2300      	movs	r3, #0
  40307a:	9303      	str	r3, [sp, #12]
  40307c:	9302      	str	r3, [sp, #8]
  40307e:	9301      	str	r3, [sp, #4]
  403080:	9300      	str	r3, [sp, #0]
  403082:	2282      	movs	r2, #130	; 0x82
  403084:	4916      	ldr	r1, [pc, #88]	; (4030e0 <vTaskStartScheduler+0x6c>)
  403086:	4817      	ldr	r0, [pc, #92]	; (4030e4 <vTaskStartScheduler+0x70>)
  403088:	4c17      	ldr	r4, [pc, #92]	; (4030e8 <vTaskStartScheduler+0x74>)
  40308a:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40308c:	2801      	cmp	r0, #1
  40308e:	d00b      	beq.n	4030a8 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  403090:	bb20      	cbnz	r0, 4030dc <vTaskStartScheduler+0x68>
  403092:	f04f 0380 	mov.w	r3, #128	; 0x80
  403096:	b672      	cpsid	i
  403098:	f383 8811 	msr	BASEPRI, r3
  40309c:	f3bf 8f6f 	isb	sy
  4030a0:	f3bf 8f4f 	dsb	sy
  4030a4:	b662      	cpsie	i
  4030a6:	e7fe      	b.n	4030a6 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  4030a8:	4b10      	ldr	r3, [pc, #64]	; (4030ec <vTaskStartScheduler+0x78>)
  4030aa:	4798      	blx	r3
	if( xReturn == pdPASS )
  4030ac:	2801      	cmp	r0, #1
  4030ae:	d1ef      	bne.n	403090 <vTaskStartScheduler+0x1c>
  4030b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030b4:	b672      	cpsid	i
  4030b6:	f383 8811 	msr	BASEPRI, r3
  4030ba:	f3bf 8f6f 	isb	sy
  4030be:	f3bf 8f4f 	dsb	sy
  4030c2:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4030c4:	f04f 32ff 	mov.w	r2, #4294967295
  4030c8:	4b09      	ldr	r3, [pc, #36]	; (4030f0 <vTaskStartScheduler+0x7c>)
  4030ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4030cc:	2201      	movs	r2, #1
  4030ce:	4b09      	ldr	r3, [pc, #36]	; (4030f4 <vTaskStartScheduler+0x80>)
  4030d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4030d2:	2200      	movs	r2, #0
  4030d4:	4b08      	ldr	r3, [pc, #32]	; (4030f8 <vTaskStartScheduler+0x84>)
  4030d6:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4030d8:	4b08      	ldr	r3, [pc, #32]	; (4030fc <vTaskStartScheduler+0x88>)
  4030da:	4798      	blx	r3
}
  4030dc:	b004      	add	sp, #16
  4030de:	bd10      	pop	{r4, pc}
  4030e0:	00408d38 	.word	0x00408d38
  4030e4:	00403419 	.word	0x00403419
  4030e8:	00402e41 	.word	0x00402e41
  4030ec:	00403a59 	.word	0x00403a59
  4030f0:	2040c878 	.word	0x2040c878
  4030f4:	2040c894 	.word	0x2040c894
  4030f8:	2040c8c0 	.word	0x2040c8c0
  4030fc:	004022fd 	.word	0x004022fd

00403100 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  403100:	4a02      	ldr	r2, [pc, #8]	; (40310c <vTaskSuspendAll+0xc>)
  403102:	6813      	ldr	r3, [r2, #0]
  403104:	3301      	adds	r3, #1
  403106:	6013      	str	r3, [r2, #0]
  403108:	4770      	bx	lr
  40310a:	bf00      	nop
  40310c:	2040c840 	.word	0x2040c840

00403110 <xTaskGetTickCount>:
		xTicks = xTickCount;
  403110:	4b01      	ldr	r3, [pc, #4]	; (403118 <xTaskGetTickCount+0x8>)
  403112:	6818      	ldr	r0, [r3, #0]
}
  403114:	4770      	bx	lr
  403116:	bf00      	nop
  403118:	2040c8c0 	.word	0x2040c8c0

0040311c <xTaskIncrementTick>:
{
  40311c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403120:	4b42      	ldr	r3, [pc, #264]	; (40322c <xTaskIncrementTick+0x110>)
  403122:	681b      	ldr	r3, [r3, #0]
  403124:	2b00      	cmp	r3, #0
  403126:	d178      	bne.n	40321a <xTaskIncrementTick+0xfe>
		++xTickCount;
  403128:	4b41      	ldr	r3, [pc, #260]	; (403230 <xTaskIncrementTick+0x114>)
  40312a:	681a      	ldr	r2, [r3, #0]
  40312c:	3201      	adds	r2, #1
  40312e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  403130:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  403132:	b9d6      	cbnz	r6, 40316a <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  403134:	4b3f      	ldr	r3, [pc, #252]	; (403234 <xTaskIncrementTick+0x118>)
  403136:	681b      	ldr	r3, [r3, #0]
  403138:	681b      	ldr	r3, [r3, #0]
  40313a:	b153      	cbz	r3, 403152 <xTaskIncrementTick+0x36>
  40313c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403140:	b672      	cpsid	i
  403142:	f383 8811 	msr	BASEPRI, r3
  403146:	f3bf 8f6f 	isb	sy
  40314a:	f3bf 8f4f 	dsb	sy
  40314e:	b662      	cpsie	i
  403150:	e7fe      	b.n	403150 <xTaskIncrementTick+0x34>
  403152:	4a38      	ldr	r2, [pc, #224]	; (403234 <xTaskIncrementTick+0x118>)
  403154:	6811      	ldr	r1, [r2, #0]
  403156:	4b38      	ldr	r3, [pc, #224]	; (403238 <xTaskIncrementTick+0x11c>)
  403158:	6818      	ldr	r0, [r3, #0]
  40315a:	6010      	str	r0, [r2, #0]
  40315c:	6019      	str	r1, [r3, #0]
  40315e:	4a37      	ldr	r2, [pc, #220]	; (40323c <xTaskIncrementTick+0x120>)
  403160:	6813      	ldr	r3, [r2, #0]
  403162:	3301      	adds	r3, #1
  403164:	6013      	str	r3, [r2, #0]
  403166:	4b36      	ldr	r3, [pc, #216]	; (403240 <xTaskIncrementTick+0x124>)
  403168:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  40316a:	4b36      	ldr	r3, [pc, #216]	; (403244 <xTaskIncrementTick+0x128>)
  40316c:	681b      	ldr	r3, [r3, #0]
  40316e:	429e      	cmp	r6, r3
  403170:	d218      	bcs.n	4031a4 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  403172:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  403174:	4b34      	ldr	r3, [pc, #208]	; (403248 <xTaskIncrementTick+0x12c>)
  403176:	681b      	ldr	r3, [r3, #0]
  403178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40317a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40317e:	4a33      	ldr	r2, [pc, #204]	; (40324c <xTaskIncrementTick+0x130>)
  403180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  403184:	2b02      	cmp	r3, #2
  403186:	bf28      	it	cs
  403188:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40318a:	4b31      	ldr	r3, [pc, #196]	; (403250 <xTaskIncrementTick+0x134>)
  40318c:	681b      	ldr	r3, [r3, #0]
  40318e:	b90b      	cbnz	r3, 403194 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  403190:	4b30      	ldr	r3, [pc, #192]	; (403254 <xTaskIncrementTick+0x138>)
  403192:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  403194:	4b30      	ldr	r3, [pc, #192]	; (403258 <xTaskIncrementTick+0x13c>)
  403196:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  403198:	2b00      	cmp	r3, #0
}
  40319a:	bf0c      	ite	eq
  40319c:	4620      	moveq	r0, r4
  40319e:	2001      	movne	r0, #1
  4031a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4031a4:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4031a6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 403234 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4031aa:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 403264 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4031ae:	4f2b      	ldr	r7, [pc, #172]	; (40325c <xTaskIncrementTick+0x140>)
  4031b0:	e01f      	b.n	4031f2 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4031b2:	f04f 32ff 	mov.w	r2, #4294967295
  4031b6:	4b23      	ldr	r3, [pc, #140]	; (403244 <xTaskIncrementTick+0x128>)
  4031b8:	601a      	str	r2, [r3, #0]
						break;
  4031ba:	e7db      	b.n	403174 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4031bc:	4a21      	ldr	r2, [pc, #132]	; (403244 <xTaskIncrementTick+0x128>)
  4031be:	6013      	str	r3, [r2, #0]
							break;
  4031c0:	e7d8      	b.n	403174 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4031c2:	f105 0018 	add.w	r0, r5, #24
  4031c6:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  4031c8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4031ca:	683a      	ldr	r2, [r7, #0]
  4031cc:	2301      	movs	r3, #1
  4031ce:	4083      	lsls	r3, r0
  4031d0:	4313      	orrs	r3, r2
  4031d2:	603b      	str	r3, [r7, #0]
  4031d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4031d8:	4651      	mov	r1, sl
  4031da:	4b1c      	ldr	r3, [pc, #112]	; (40324c <xTaskIncrementTick+0x130>)
  4031dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4031e0:	4b1f      	ldr	r3, [pc, #124]	; (403260 <xTaskIncrementTick+0x144>)
  4031e2:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4031e4:	4b18      	ldr	r3, [pc, #96]	; (403248 <xTaskIncrementTick+0x12c>)
  4031e6:	681b      	ldr	r3, [r3, #0]
  4031e8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4031ec:	429a      	cmp	r2, r3
  4031ee:	bf28      	it	cs
  4031f0:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4031f2:	f8d9 3000 	ldr.w	r3, [r9]
  4031f6:	681b      	ldr	r3, [r3, #0]
  4031f8:	2b00      	cmp	r3, #0
  4031fa:	d0da      	beq.n	4031b2 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4031fc:	f8d9 3000 	ldr.w	r3, [r9]
  403200:	68db      	ldr	r3, [r3, #12]
  403202:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  403204:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  403206:	429e      	cmp	r6, r3
  403208:	d3d8      	bcc.n	4031bc <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40320a:	f105 0a04 	add.w	sl, r5, #4
  40320e:	4650      	mov	r0, sl
  403210:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  403212:	6aab      	ldr	r3, [r5, #40]	; 0x28
  403214:	2b00      	cmp	r3, #0
  403216:	d1d4      	bne.n	4031c2 <xTaskIncrementTick+0xa6>
  403218:	e7d6      	b.n	4031c8 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  40321a:	4a0d      	ldr	r2, [pc, #52]	; (403250 <xTaskIncrementTick+0x134>)
  40321c:	6813      	ldr	r3, [r2, #0]
  40321e:	3301      	adds	r3, #1
  403220:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  403222:	4b0c      	ldr	r3, [pc, #48]	; (403254 <xTaskIncrementTick+0x138>)
  403224:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  403226:	2400      	movs	r4, #0
  403228:	e7b4      	b.n	403194 <xTaskIncrementTick+0x78>
  40322a:	bf00      	nop
  40322c:	2040c840 	.word	0x2040c840
  403230:	2040c8c0 	.word	0x2040c8c0
  403234:	2040c7cc 	.word	0x2040c7cc
  403238:	2040c7d0 	.word	0x2040c7d0
  40323c:	2040c87c 	.word	0x2040c87c
  403240:	00402dbd 	.word	0x00402dbd
  403244:	2040c878 	.word	0x2040c878
  403248:	2040c7c8 	.word	0x2040c7c8
  40324c:	2040c7d4 	.word	0x2040c7d4
  403250:	2040c83c 	.word	0x2040c83c
  403254:	0040404d 	.word	0x0040404d
  403258:	2040c8c4 	.word	0x2040c8c4
  40325c:	2040c84c 	.word	0x2040c84c
  403260:	00402099 	.word	0x00402099
  403264:	004020e5 	.word	0x004020e5

00403268 <xTaskResumeAll>:
{
  403268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  40326c:	4b38      	ldr	r3, [pc, #224]	; (403350 <xTaskResumeAll+0xe8>)
  40326e:	681b      	ldr	r3, [r3, #0]
  403270:	b953      	cbnz	r3, 403288 <xTaskResumeAll+0x20>
  403272:	f04f 0380 	mov.w	r3, #128	; 0x80
  403276:	b672      	cpsid	i
  403278:	f383 8811 	msr	BASEPRI, r3
  40327c:	f3bf 8f6f 	isb	sy
  403280:	f3bf 8f4f 	dsb	sy
  403284:	b662      	cpsie	i
  403286:	e7fe      	b.n	403286 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  403288:	4b32      	ldr	r3, [pc, #200]	; (403354 <xTaskResumeAll+0xec>)
  40328a:	4798      	blx	r3
		--uxSchedulerSuspended;
  40328c:	4b30      	ldr	r3, [pc, #192]	; (403350 <xTaskResumeAll+0xe8>)
  40328e:	681a      	ldr	r2, [r3, #0]
  403290:	3a01      	subs	r2, #1
  403292:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403294:	681b      	ldr	r3, [r3, #0]
  403296:	2b00      	cmp	r3, #0
  403298:	d155      	bne.n	403346 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40329a:	4b2f      	ldr	r3, [pc, #188]	; (403358 <xTaskResumeAll+0xf0>)
  40329c:	681b      	ldr	r3, [r3, #0]
  40329e:	2b00      	cmp	r3, #0
  4032a0:	d132      	bne.n	403308 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4032a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4032a4:	4b2d      	ldr	r3, [pc, #180]	; (40335c <xTaskResumeAll+0xf4>)
  4032a6:	4798      	blx	r3
}
  4032a8:	4620      	mov	r0, r4
  4032aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4032ae:	68fb      	ldr	r3, [r7, #12]
  4032b0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4032b2:	f104 0018 	add.w	r0, r4, #24
  4032b6:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4032b8:	f104 0804 	add.w	r8, r4, #4
  4032bc:	4640      	mov	r0, r8
  4032be:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4032c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4032c2:	682a      	ldr	r2, [r5, #0]
  4032c4:	2301      	movs	r3, #1
  4032c6:	4083      	lsls	r3, r0
  4032c8:	4313      	orrs	r3, r2
  4032ca:	602b      	str	r3, [r5, #0]
  4032cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4032d0:	4641      	mov	r1, r8
  4032d2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4032d6:	4b22      	ldr	r3, [pc, #136]	; (403360 <xTaskResumeAll+0xf8>)
  4032d8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4032da:	4b22      	ldr	r3, [pc, #136]	; (403364 <xTaskResumeAll+0xfc>)
  4032dc:	681b      	ldr	r3, [r3, #0]
  4032de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4032e2:	429a      	cmp	r2, r3
  4032e4:	d20c      	bcs.n	403300 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4032e6:	683b      	ldr	r3, [r7, #0]
  4032e8:	2b00      	cmp	r3, #0
  4032ea:	d1e0      	bne.n	4032ae <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4032ec:	4b1e      	ldr	r3, [pc, #120]	; (403368 <xTaskResumeAll+0x100>)
  4032ee:	681b      	ldr	r3, [r3, #0]
  4032f0:	b1db      	cbz	r3, 40332a <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4032f2:	4b1d      	ldr	r3, [pc, #116]	; (403368 <xTaskResumeAll+0x100>)
  4032f4:	681b      	ldr	r3, [r3, #0]
  4032f6:	b1c3      	cbz	r3, 40332a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4032f8:	4e1c      	ldr	r6, [pc, #112]	; (40336c <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4032fa:	4d1d      	ldr	r5, [pc, #116]	; (403370 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4032fc:	4c1a      	ldr	r4, [pc, #104]	; (403368 <xTaskResumeAll+0x100>)
  4032fe:	e00e      	b.n	40331e <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  403300:	2201      	movs	r2, #1
  403302:	4b1b      	ldr	r3, [pc, #108]	; (403370 <xTaskResumeAll+0x108>)
  403304:	601a      	str	r2, [r3, #0]
  403306:	e7ee      	b.n	4032e6 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  403308:	4f1a      	ldr	r7, [pc, #104]	; (403374 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40330a:	4e1b      	ldr	r6, [pc, #108]	; (403378 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  40330c:	4d1b      	ldr	r5, [pc, #108]	; (40337c <xTaskResumeAll+0x114>)
  40330e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 403384 <xTaskResumeAll+0x11c>
  403312:	e7e8      	b.n	4032e6 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  403314:	6823      	ldr	r3, [r4, #0]
  403316:	3b01      	subs	r3, #1
  403318:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40331a:	6823      	ldr	r3, [r4, #0]
  40331c:	b12b      	cbz	r3, 40332a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40331e:	47b0      	blx	r6
  403320:	2800      	cmp	r0, #0
  403322:	d0f7      	beq.n	403314 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  403324:	2301      	movs	r3, #1
  403326:	602b      	str	r3, [r5, #0]
  403328:	e7f4      	b.n	403314 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  40332a:	4b11      	ldr	r3, [pc, #68]	; (403370 <xTaskResumeAll+0x108>)
  40332c:	681b      	ldr	r3, [r3, #0]
  40332e:	2b01      	cmp	r3, #1
  403330:	d10b      	bne.n	40334a <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  403332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403336:	4b12      	ldr	r3, [pc, #72]	; (403380 <xTaskResumeAll+0x118>)
  403338:	601a      	str	r2, [r3, #0]
  40333a:	f3bf 8f4f 	dsb	sy
  40333e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  403342:	2401      	movs	r4, #1
  403344:	e7ae      	b.n	4032a4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  403346:	2400      	movs	r4, #0
  403348:	e7ac      	b.n	4032a4 <xTaskResumeAll+0x3c>
  40334a:	2400      	movs	r4, #0
  40334c:	e7aa      	b.n	4032a4 <xTaskResumeAll+0x3c>
  40334e:	bf00      	nop
  403350:	2040c840 	.word	0x2040c840
  403354:	004021c9 	.word	0x004021c9
  403358:	2040c838 	.word	0x2040c838
  40335c:	00402215 	.word	0x00402215
  403360:	00402099 	.word	0x00402099
  403364:	2040c7c8 	.word	0x2040c7c8
  403368:	2040c83c 	.word	0x2040c83c
  40336c:	0040311d 	.word	0x0040311d
  403370:	2040c8c4 	.word	0x2040c8c4
  403374:	2040c880 	.word	0x2040c880
  403378:	004020e5 	.word	0x004020e5
  40337c:	2040c84c 	.word	0x2040c84c
  403380:	e000ed04 	.word	0xe000ed04
  403384:	2040c7d4 	.word	0x2040c7d4

00403388 <vTaskDelay>:
	{
  403388:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40338a:	2800      	cmp	r0, #0
  40338c:	d029      	beq.n	4033e2 <vTaskDelay+0x5a>
  40338e:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  403390:	4b18      	ldr	r3, [pc, #96]	; (4033f4 <vTaskDelay+0x6c>)
  403392:	681b      	ldr	r3, [r3, #0]
  403394:	b153      	cbz	r3, 4033ac <vTaskDelay+0x24>
  403396:	f04f 0380 	mov.w	r3, #128	; 0x80
  40339a:	b672      	cpsid	i
  40339c:	f383 8811 	msr	BASEPRI, r3
  4033a0:	f3bf 8f6f 	isb	sy
  4033a4:	f3bf 8f4f 	dsb	sy
  4033a8:	b662      	cpsie	i
  4033aa:	e7fe      	b.n	4033aa <vTaskDelay+0x22>
			vTaskSuspendAll();
  4033ac:	4b12      	ldr	r3, [pc, #72]	; (4033f8 <vTaskDelay+0x70>)
  4033ae:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4033b0:	4b12      	ldr	r3, [pc, #72]	; (4033fc <vTaskDelay+0x74>)
  4033b2:	681b      	ldr	r3, [r3, #0]
  4033b4:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4033b6:	4b12      	ldr	r3, [pc, #72]	; (403400 <vTaskDelay+0x78>)
  4033b8:	6818      	ldr	r0, [r3, #0]
  4033ba:	3004      	adds	r0, #4
  4033bc:	4b11      	ldr	r3, [pc, #68]	; (403404 <vTaskDelay+0x7c>)
  4033be:	4798      	blx	r3
  4033c0:	b948      	cbnz	r0, 4033d6 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4033c2:	4b0f      	ldr	r3, [pc, #60]	; (403400 <vTaskDelay+0x78>)
  4033c4:	681a      	ldr	r2, [r3, #0]
  4033c6:	4910      	ldr	r1, [pc, #64]	; (403408 <vTaskDelay+0x80>)
  4033c8:	680b      	ldr	r3, [r1, #0]
  4033ca:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4033cc:	2201      	movs	r2, #1
  4033ce:	4082      	lsls	r2, r0
  4033d0:	ea23 0302 	bic.w	r3, r3, r2
  4033d4:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4033d6:	4620      	mov	r0, r4
  4033d8:	4b0c      	ldr	r3, [pc, #48]	; (40340c <vTaskDelay+0x84>)
  4033da:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4033dc:	4b0c      	ldr	r3, [pc, #48]	; (403410 <vTaskDelay+0x88>)
  4033de:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4033e0:	b938      	cbnz	r0, 4033f2 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  4033e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4033e6:	4b0b      	ldr	r3, [pc, #44]	; (403414 <vTaskDelay+0x8c>)
  4033e8:	601a      	str	r2, [r3, #0]
  4033ea:	f3bf 8f4f 	dsb	sy
  4033ee:	f3bf 8f6f 	isb	sy
  4033f2:	bd10      	pop	{r4, pc}
  4033f4:	2040c840 	.word	0x2040c840
  4033f8:	00403101 	.word	0x00403101
  4033fc:	2040c8c0 	.word	0x2040c8c0
  403400:	2040c7c8 	.word	0x2040c7c8
  403404:	004020e5 	.word	0x004020e5
  403408:	2040c84c 	.word	0x2040c84c
  40340c:	00402de9 	.word	0x00402de9
  403410:	00403269 	.word	0x00403269
  403414:	e000ed04 	.word	0xe000ed04

00403418 <prvIdleTask>:
{
  403418:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40341a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4034a4 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40341e:	4e19      	ldr	r6, [pc, #100]	; (403484 <prvIdleTask+0x6c>)
				taskYIELD();
  403420:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4034a8 <prvIdleTask+0x90>
  403424:	e02a      	b.n	40347c <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  403426:	4b18      	ldr	r3, [pc, #96]	; (403488 <prvIdleTask+0x70>)
  403428:	681b      	ldr	r3, [r3, #0]
  40342a:	2b01      	cmp	r3, #1
  40342c:	d81e      	bhi.n	40346c <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40342e:	682b      	ldr	r3, [r5, #0]
  403430:	2b00      	cmp	r3, #0
  403432:	d0f8      	beq.n	403426 <prvIdleTask+0xe>
			vTaskSuspendAll();
  403434:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  403436:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  403438:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40343a:	2c00      	cmp	r4, #0
  40343c:	d0f7      	beq.n	40342e <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  40343e:	4b13      	ldr	r3, [pc, #76]	; (40348c <prvIdleTask+0x74>)
  403440:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  403442:	68f3      	ldr	r3, [r6, #12]
  403444:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  403446:	1d20      	adds	r0, r4, #4
  403448:	4b11      	ldr	r3, [pc, #68]	; (403490 <prvIdleTask+0x78>)
  40344a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  40344c:	4a11      	ldr	r2, [pc, #68]	; (403494 <prvIdleTask+0x7c>)
  40344e:	6813      	ldr	r3, [r2, #0]
  403450:	3b01      	subs	r3, #1
  403452:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  403454:	682b      	ldr	r3, [r5, #0]
  403456:	3b01      	subs	r3, #1
  403458:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40345a:	4b0f      	ldr	r3, [pc, #60]	; (403498 <prvIdleTask+0x80>)
  40345c:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  40345e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  403460:	f8df a048 	ldr.w	sl, [pc, #72]	; 4034ac <prvIdleTask+0x94>
  403464:	47d0      	blx	sl
		vPortFree( pxTCB );
  403466:	4620      	mov	r0, r4
  403468:	47d0      	blx	sl
  40346a:	e7e0      	b.n	40342e <prvIdleTask+0x16>
				taskYIELD();
  40346c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403470:	f8c9 3000 	str.w	r3, [r9]
  403474:	f3bf 8f4f 	dsb	sy
  403478:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40347c:	4d07      	ldr	r5, [pc, #28]	; (40349c <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40347e:	4f08      	ldr	r7, [pc, #32]	; (4034a0 <prvIdleTask+0x88>)
  403480:	e7d5      	b.n	40342e <prvIdleTask+0x16>
  403482:	bf00      	nop
  403484:	2040c8ac 	.word	0x2040c8ac
  403488:	2040c7d4 	.word	0x2040c7d4
  40348c:	004021c9 	.word	0x004021c9
  403490:	004020e5 	.word	0x004020e5
  403494:	2040c838 	.word	0x2040c838
  403498:	00402215 	.word	0x00402215
  40349c:	2040c848 	.word	0x2040c848
  4034a0:	00403269 	.word	0x00403269
  4034a4:	00403101 	.word	0x00403101
  4034a8:	e000ed04 	.word	0xe000ed04
  4034ac:	00402495 	.word	0x00402495

004034b0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4034b0:	4b2d      	ldr	r3, [pc, #180]	; (403568 <vTaskSwitchContext+0xb8>)
  4034b2:	681b      	ldr	r3, [r3, #0]
  4034b4:	2b00      	cmp	r3, #0
  4034b6:	d12c      	bne.n	403512 <vTaskSwitchContext+0x62>
{
  4034b8:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4034ba:	2200      	movs	r2, #0
  4034bc:	4b2b      	ldr	r3, [pc, #172]	; (40356c <vTaskSwitchContext+0xbc>)
  4034be:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4034c0:	4b2b      	ldr	r3, [pc, #172]	; (403570 <vTaskSwitchContext+0xc0>)
  4034c2:	681b      	ldr	r3, [r3, #0]
  4034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4034c6:	681a      	ldr	r2, [r3, #0]
  4034c8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4034cc:	d103      	bne.n	4034d6 <vTaskSwitchContext+0x26>
  4034ce:	685a      	ldr	r2, [r3, #4]
  4034d0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4034d4:	d021      	beq.n	40351a <vTaskSwitchContext+0x6a>
  4034d6:	4b26      	ldr	r3, [pc, #152]	; (403570 <vTaskSwitchContext+0xc0>)
  4034d8:	6818      	ldr	r0, [r3, #0]
  4034da:	6819      	ldr	r1, [r3, #0]
  4034dc:	3134      	adds	r1, #52	; 0x34
  4034de:	4b25      	ldr	r3, [pc, #148]	; (403574 <vTaskSwitchContext+0xc4>)
  4034e0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4034e2:	4b25      	ldr	r3, [pc, #148]	; (403578 <vTaskSwitchContext+0xc8>)
  4034e4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4034e6:	fab3 f383 	clz	r3, r3
  4034ea:	b2db      	uxtb	r3, r3
  4034ec:	f1c3 031f 	rsb	r3, r3, #31
  4034f0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4034f4:	4a21      	ldr	r2, [pc, #132]	; (40357c <vTaskSwitchContext+0xcc>)
  4034f6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4034fa:	b9ba      	cbnz	r2, 40352c <vTaskSwitchContext+0x7c>
	__asm volatile
  4034fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  403500:	b672      	cpsid	i
  403502:	f383 8811 	msr	BASEPRI, r3
  403506:	f3bf 8f6f 	isb	sy
  40350a:	f3bf 8f4f 	dsb	sy
  40350e:	b662      	cpsie	i
  403510:	e7fe      	b.n	403510 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  403512:	2201      	movs	r2, #1
  403514:	4b15      	ldr	r3, [pc, #84]	; (40356c <vTaskSwitchContext+0xbc>)
  403516:	601a      	str	r2, [r3, #0]
  403518:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40351a:	689a      	ldr	r2, [r3, #8]
  40351c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403520:	d1d9      	bne.n	4034d6 <vTaskSwitchContext+0x26>
  403522:	68db      	ldr	r3, [r3, #12]
  403524:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  403528:	d1d5      	bne.n	4034d6 <vTaskSwitchContext+0x26>
  40352a:	e7da      	b.n	4034e2 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40352c:	4a13      	ldr	r2, [pc, #76]	; (40357c <vTaskSwitchContext+0xcc>)
  40352e:	0099      	lsls	r1, r3, #2
  403530:	18c8      	adds	r0, r1, r3
  403532:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  403536:	6844      	ldr	r4, [r0, #4]
  403538:	6864      	ldr	r4, [r4, #4]
  40353a:	6044      	str	r4, [r0, #4]
  40353c:	4419      	add	r1, r3
  40353e:	4602      	mov	r2, r0
  403540:	3208      	adds	r2, #8
  403542:	4294      	cmp	r4, r2
  403544:	d009      	beq.n	40355a <vTaskSwitchContext+0xaa>
  403546:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40354a:	4a0c      	ldr	r2, [pc, #48]	; (40357c <vTaskSwitchContext+0xcc>)
  40354c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403550:	685b      	ldr	r3, [r3, #4]
  403552:	68da      	ldr	r2, [r3, #12]
  403554:	4b06      	ldr	r3, [pc, #24]	; (403570 <vTaskSwitchContext+0xc0>)
  403556:	601a      	str	r2, [r3, #0]
  403558:	bd10      	pop	{r4, pc}
  40355a:	6860      	ldr	r0, [r4, #4]
  40355c:	4a07      	ldr	r2, [pc, #28]	; (40357c <vTaskSwitchContext+0xcc>)
  40355e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  403562:	6050      	str	r0, [r2, #4]
  403564:	e7ef      	b.n	403546 <vTaskSwitchContext+0x96>
  403566:	bf00      	nop
  403568:	2040c840 	.word	0x2040c840
  40356c:	2040c8c4 	.word	0x2040c8c4
  403570:	2040c7c8 	.word	0x2040c7c8
  403574:	00404035 	.word	0x00404035
  403578:	2040c84c 	.word	0x2040c84c
  40357c:	2040c7d4 	.word	0x2040c7d4

00403580 <vTaskPlaceOnEventList>:
{
  403580:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  403582:	b1e0      	cbz	r0, 4035be <vTaskPlaceOnEventList+0x3e>
  403584:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  403586:	4d17      	ldr	r5, [pc, #92]	; (4035e4 <vTaskPlaceOnEventList+0x64>)
  403588:	6829      	ldr	r1, [r5, #0]
  40358a:	3118      	adds	r1, #24
  40358c:	4b16      	ldr	r3, [pc, #88]	; (4035e8 <vTaskPlaceOnEventList+0x68>)
  40358e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403590:	6828      	ldr	r0, [r5, #0]
  403592:	3004      	adds	r0, #4
  403594:	4b15      	ldr	r3, [pc, #84]	; (4035ec <vTaskPlaceOnEventList+0x6c>)
  403596:	4798      	blx	r3
  403598:	b940      	cbnz	r0, 4035ac <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40359a:	682a      	ldr	r2, [r5, #0]
  40359c:	4914      	ldr	r1, [pc, #80]	; (4035f0 <vTaskPlaceOnEventList+0x70>)
  40359e:	680b      	ldr	r3, [r1, #0]
  4035a0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4035a2:	2201      	movs	r2, #1
  4035a4:	4082      	lsls	r2, r0
  4035a6:	ea23 0302 	bic.w	r3, r3, r2
  4035aa:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4035ac:	f1b4 3fff 	cmp.w	r4, #4294967295
  4035b0:	d010      	beq.n	4035d4 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  4035b2:	4b10      	ldr	r3, [pc, #64]	; (4035f4 <vTaskPlaceOnEventList+0x74>)
  4035b4:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4035b6:	4420      	add	r0, r4
  4035b8:	4b0f      	ldr	r3, [pc, #60]	; (4035f8 <vTaskPlaceOnEventList+0x78>)
  4035ba:	4798      	blx	r3
  4035bc:	bd38      	pop	{r3, r4, r5, pc}
  4035be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035c2:	b672      	cpsid	i
  4035c4:	f383 8811 	msr	BASEPRI, r3
  4035c8:	f3bf 8f6f 	isb	sy
  4035cc:	f3bf 8f4f 	dsb	sy
  4035d0:	b662      	cpsie	i
  4035d2:	e7fe      	b.n	4035d2 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4035d4:	4b03      	ldr	r3, [pc, #12]	; (4035e4 <vTaskPlaceOnEventList+0x64>)
  4035d6:	6819      	ldr	r1, [r3, #0]
  4035d8:	3104      	adds	r1, #4
  4035da:	4808      	ldr	r0, [pc, #32]	; (4035fc <vTaskPlaceOnEventList+0x7c>)
  4035dc:	4b08      	ldr	r3, [pc, #32]	; (403600 <vTaskPlaceOnEventList+0x80>)
  4035de:	4798      	blx	r3
  4035e0:	bd38      	pop	{r3, r4, r5, pc}
  4035e2:	bf00      	nop
  4035e4:	2040c7c8 	.word	0x2040c7c8
  4035e8:	004020b1 	.word	0x004020b1
  4035ec:	004020e5 	.word	0x004020e5
  4035f0:	2040c84c 	.word	0x2040c84c
  4035f4:	2040c8c0 	.word	0x2040c8c0
  4035f8:	00402de9 	.word	0x00402de9
  4035fc:	2040c898 	.word	0x2040c898
  403600:	00402099 	.word	0x00402099

00403604 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  403604:	b1e8      	cbz	r0, 403642 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  403606:	b570      	push	{r4, r5, r6, lr}
  403608:	4615      	mov	r5, r2
  40360a:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40360c:	4e16      	ldr	r6, [pc, #88]	; (403668 <vTaskPlaceOnEventListRestricted+0x64>)
  40360e:	6831      	ldr	r1, [r6, #0]
  403610:	3118      	adds	r1, #24
  403612:	4b16      	ldr	r3, [pc, #88]	; (40366c <vTaskPlaceOnEventListRestricted+0x68>)
  403614:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403616:	6830      	ldr	r0, [r6, #0]
  403618:	3004      	adds	r0, #4
  40361a:	4b15      	ldr	r3, [pc, #84]	; (403670 <vTaskPlaceOnEventListRestricted+0x6c>)
  40361c:	4798      	blx	r3
  40361e:	b940      	cbnz	r0, 403632 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403620:	6832      	ldr	r2, [r6, #0]
  403622:	4914      	ldr	r1, [pc, #80]	; (403674 <vTaskPlaceOnEventListRestricted+0x70>)
  403624:	680b      	ldr	r3, [r1, #0]
  403626:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403628:	2201      	movs	r2, #1
  40362a:	4082      	lsls	r2, r0
  40362c:	ea23 0302 	bic.w	r3, r3, r2
  403630:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  403632:	2d01      	cmp	r5, #1
  403634:	d010      	beq.n	403658 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  403636:	4b10      	ldr	r3, [pc, #64]	; (403678 <vTaskPlaceOnEventListRestricted+0x74>)
  403638:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40363a:	4420      	add	r0, r4
  40363c:	4b0f      	ldr	r3, [pc, #60]	; (40367c <vTaskPlaceOnEventListRestricted+0x78>)
  40363e:	4798      	blx	r3
  403640:	bd70      	pop	{r4, r5, r6, pc}
  403642:	f04f 0380 	mov.w	r3, #128	; 0x80
  403646:	b672      	cpsid	i
  403648:	f383 8811 	msr	BASEPRI, r3
  40364c:	f3bf 8f6f 	isb	sy
  403650:	f3bf 8f4f 	dsb	sy
  403654:	b662      	cpsie	i
  403656:	e7fe      	b.n	403656 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403658:	4b03      	ldr	r3, [pc, #12]	; (403668 <vTaskPlaceOnEventListRestricted+0x64>)
  40365a:	6819      	ldr	r1, [r3, #0]
  40365c:	3104      	adds	r1, #4
  40365e:	4808      	ldr	r0, [pc, #32]	; (403680 <vTaskPlaceOnEventListRestricted+0x7c>)
  403660:	4b02      	ldr	r3, [pc, #8]	; (40366c <vTaskPlaceOnEventListRestricted+0x68>)
  403662:	4798      	blx	r3
  403664:	bd70      	pop	{r4, r5, r6, pc}
  403666:	bf00      	nop
  403668:	2040c7c8 	.word	0x2040c7c8
  40366c:	00402099 	.word	0x00402099
  403670:	004020e5 	.word	0x004020e5
  403674:	2040c84c 	.word	0x2040c84c
  403678:	2040c8c0 	.word	0x2040c8c0
  40367c:	00402de9 	.word	0x00402de9
  403680:	2040c898 	.word	0x2040c898

00403684 <xTaskRemoveFromEventList>:
{
  403684:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  403686:	68c3      	ldr	r3, [r0, #12]
  403688:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40368a:	b324      	cbz	r4, 4036d6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40368c:	f104 0518 	add.w	r5, r4, #24
  403690:	4628      	mov	r0, r5
  403692:	4b1a      	ldr	r3, [pc, #104]	; (4036fc <xTaskRemoveFromEventList+0x78>)
  403694:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403696:	4b1a      	ldr	r3, [pc, #104]	; (403700 <xTaskRemoveFromEventList+0x7c>)
  403698:	681b      	ldr	r3, [r3, #0]
  40369a:	bb3b      	cbnz	r3, 4036ec <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40369c:	1d25      	adds	r5, r4, #4
  40369e:	4628      	mov	r0, r5
  4036a0:	4b16      	ldr	r3, [pc, #88]	; (4036fc <xTaskRemoveFromEventList+0x78>)
  4036a2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4036a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4036a6:	4a17      	ldr	r2, [pc, #92]	; (403704 <xTaskRemoveFromEventList+0x80>)
  4036a8:	6811      	ldr	r1, [r2, #0]
  4036aa:	2301      	movs	r3, #1
  4036ac:	4083      	lsls	r3, r0
  4036ae:	430b      	orrs	r3, r1
  4036b0:	6013      	str	r3, [r2, #0]
  4036b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4036b6:	4629      	mov	r1, r5
  4036b8:	4b13      	ldr	r3, [pc, #76]	; (403708 <xTaskRemoveFromEventList+0x84>)
  4036ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4036be:	4b13      	ldr	r3, [pc, #76]	; (40370c <xTaskRemoveFromEventList+0x88>)
  4036c0:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4036c2:	4b13      	ldr	r3, [pc, #76]	; (403710 <xTaskRemoveFromEventList+0x8c>)
  4036c4:	681b      	ldr	r3, [r3, #0]
  4036c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4036ca:	429a      	cmp	r2, r3
  4036cc:	d913      	bls.n	4036f6 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4036ce:	2001      	movs	r0, #1
  4036d0:	4b10      	ldr	r3, [pc, #64]	; (403714 <xTaskRemoveFromEventList+0x90>)
  4036d2:	6018      	str	r0, [r3, #0]
  4036d4:	bd38      	pop	{r3, r4, r5, pc}
  4036d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4036da:	b672      	cpsid	i
  4036dc:	f383 8811 	msr	BASEPRI, r3
  4036e0:	f3bf 8f6f 	isb	sy
  4036e4:	f3bf 8f4f 	dsb	sy
  4036e8:	b662      	cpsie	i
  4036ea:	e7fe      	b.n	4036ea <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4036ec:	4629      	mov	r1, r5
  4036ee:	480a      	ldr	r0, [pc, #40]	; (403718 <xTaskRemoveFromEventList+0x94>)
  4036f0:	4b06      	ldr	r3, [pc, #24]	; (40370c <xTaskRemoveFromEventList+0x88>)
  4036f2:	4798      	blx	r3
  4036f4:	e7e5      	b.n	4036c2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4036f6:	2000      	movs	r0, #0
}
  4036f8:	bd38      	pop	{r3, r4, r5, pc}
  4036fa:	bf00      	nop
  4036fc:	004020e5 	.word	0x004020e5
  403700:	2040c840 	.word	0x2040c840
  403704:	2040c84c 	.word	0x2040c84c
  403708:	2040c7d4 	.word	0x2040c7d4
  40370c:	00402099 	.word	0x00402099
  403710:	2040c7c8 	.word	0x2040c7c8
  403714:	2040c8c4 	.word	0x2040c8c4
  403718:	2040c880 	.word	0x2040c880

0040371c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  40371c:	b130      	cbz	r0, 40372c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40371e:	4a09      	ldr	r2, [pc, #36]	; (403744 <vTaskSetTimeOutState+0x28>)
  403720:	6812      	ldr	r2, [r2, #0]
  403722:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  403724:	4a08      	ldr	r2, [pc, #32]	; (403748 <vTaskSetTimeOutState+0x2c>)
  403726:	6812      	ldr	r2, [r2, #0]
  403728:	6042      	str	r2, [r0, #4]
  40372a:	4770      	bx	lr
  40372c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403730:	b672      	cpsid	i
  403732:	f383 8811 	msr	BASEPRI, r3
  403736:	f3bf 8f6f 	isb	sy
  40373a:	f3bf 8f4f 	dsb	sy
  40373e:	b662      	cpsie	i
  403740:	e7fe      	b.n	403740 <vTaskSetTimeOutState+0x24>
  403742:	bf00      	nop
  403744:	2040c87c 	.word	0x2040c87c
  403748:	2040c8c0 	.word	0x2040c8c0

0040374c <xTaskCheckForTimeOut>:
{
  40374c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  40374e:	b1c0      	cbz	r0, 403782 <xTaskCheckForTimeOut+0x36>
  403750:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  403752:	b309      	cbz	r1, 403798 <xTaskCheckForTimeOut+0x4c>
  403754:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  403756:	4b1d      	ldr	r3, [pc, #116]	; (4037cc <xTaskCheckForTimeOut+0x80>)
  403758:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40375a:	4b1d      	ldr	r3, [pc, #116]	; (4037d0 <xTaskCheckForTimeOut+0x84>)
  40375c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40375e:	682b      	ldr	r3, [r5, #0]
  403760:	f1b3 3fff 	cmp.w	r3, #4294967295
  403764:	d02e      	beq.n	4037c4 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  403766:	491b      	ldr	r1, [pc, #108]	; (4037d4 <xTaskCheckForTimeOut+0x88>)
  403768:	6809      	ldr	r1, [r1, #0]
  40376a:	6820      	ldr	r0, [r4, #0]
  40376c:	4288      	cmp	r0, r1
  40376e:	d002      	beq.n	403776 <xTaskCheckForTimeOut+0x2a>
  403770:	6861      	ldr	r1, [r4, #4]
  403772:	428a      	cmp	r2, r1
  403774:	d228      	bcs.n	4037c8 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  403776:	6861      	ldr	r1, [r4, #4]
  403778:	1a50      	subs	r0, r2, r1
  40377a:	4283      	cmp	r3, r0
  40377c:	d817      	bhi.n	4037ae <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  40377e:	2401      	movs	r4, #1
  403780:	e01c      	b.n	4037bc <xTaskCheckForTimeOut+0x70>
  403782:	f04f 0380 	mov.w	r3, #128	; 0x80
  403786:	b672      	cpsid	i
  403788:	f383 8811 	msr	BASEPRI, r3
  40378c:	f3bf 8f6f 	isb	sy
  403790:	f3bf 8f4f 	dsb	sy
  403794:	b662      	cpsie	i
  403796:	e7fe      	b.n	403796 <xTaskCheckForTimeOut+0x4a>
  403798:	f04f 0380 	mov.w	r3, #128	; 0x80
  40379c:	b672      	cpsid	i
  40379e:	f383 8811 	msr	BASEPRI, r3
  4037a2:	f3bf 8f6f 	isb	sy
  4037a6:	f3bf 8f4f 	dsb	sy
  4037aa:	b662      	cpsie	i
  4037ac:	e7fe      	b.n	4037ac <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4037ae:	1a9b      	subs	r3, r3, r2
  4037b0:	440b      	add	r3, r1
  4037b2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4037b4:	4620      	mov	r0, r4
  4037b6:	4b08      	ldr	r3, [pc, #32]	; (4037d8 <xTaskCheckForTimeOut+0x8c>)
  4037b8:	4798      	blx	r3
			xReturn = pdFALSE;
  4037ba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4037bc:	4b07      	ldr	r3, [pc, #28]	; (4037dc <xTaskCheckForTimeOut+0x90>)
  4037be:	4798      	blx	r3
}
  4037c0:	4620      	mov	r0, r4
  4037c2:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4037c4:	2400      	movs	r4, #0
  4037c6:	e7f9      	b.n	4037bc <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4037c8:	2401      	movs	r4, #1
  4037ca:	e7f7      	b.n	4037bc <xTaskCheckForTimeOut+0x70>
  4037cc:	004021c9 	.word	0x004021c9
  4037d0:	2040c8c0 	.word	0x2040c8c0
  4037d4:	2040c87c 	.word	0x2040c87c
  4037d8:	0040371d 	.word	0x0040371d
  4037dc:	00402215 	.word	0x00402215

004037e0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4037e0:	2201      	movs	r2, #1
  4037e2:	4b01      	ldr	r3, [pc, #4]	; (4037e8 <vTaskMissedYield+0x8>)
  4037e4:	601a      	str	r2, [r3, #0]
  4037e6:	4770      	bx	lr
  4037e8:	2040c8c4 	.word	0x2040c8c4

004037ec <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4037ec:	4b05      	ldr	r3, [pc, #20]	; (403804 <xTaskGetSchedulerState+0x18>)
  4037ee:	681b      	ldr	r3, [r3, #0]
  4037f0:	b133      	cbz	r3, 403800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4037f2:	4b05      	ldr	r3, [pc, #20]	; (403808 <xTaskGetSchedulerState+0x1c>)
  4037f4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4037f6:	2b00      	cmp	r3, #0
  4037f8:	bf0c      	ite	eq
  4037fa:	2002      	moveq	r0, #2
  4037fc:	2000      	movne	r0, #0
  4037fe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  403800:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  403802:	4770      	bx	lr
  403804:	2040c894 	.word	0x2040c894
  403808:	2040c840 	.word	0x2040c840

0040380c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  40380c:	2800      	cmp	r0, #0
  40380e:	d044      	beq.n	40389a <vTaskPriorityInherit+0x8e>
	{
  403810:	b538      	push	{r3, r4, r5, lr}
  403812:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  403814:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  403816:	4921      	ldr	r1, [pc, #132]	; (40389c <vTaskPriorityInherit+0x90>)
  403818:	6809      	ldr	r1, [r1, #0]
  40381a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40381c:	428a      	cmp	r2, r1
  40381e:	d214      	bcs.n	40384a <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  403820:	6981      	ldr	r1, [r0, #24]
  403822:	2900      	cmp	r1, #0
  403824:	db05      	blt.n	403832 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403826:	491d      	ldr	r1, [pc, #116]	; (40389c <vTaskPriorityInherit+0x90>)
  403828:	6809      	ldr	r1, [r1, #0]
  40382a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40382c:	f1c1 0105 	rsb	r1, r1, #5
  403830:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  403832:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  403836:	491a      	ldr	r1, [pc, #104]	; (4038a0 <vTaskPriorityInherit+0x94>)
  403838:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40383c:	6961      	ldr	r1, [r4, #20]
  40383e:	4291      	cmp	r1, r2
  403840:	d004      	beq.n	40384c <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403842:	4a16      	ldr	r2, [pc, #88]	; (40389c <vTaskPriorityInherit+0x90>)
  403844:	6812      	ldr	r2, [r2, #0]
  403846:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  403848:	62e2      	str	r2, [r4, #44]	; 0x2c
  40384a:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40384c:	1d25      	adds	r5, r4, #4
  40384e:	4628      	mov	r0, r5
  403850:	4b14      	ldr	r3, [pc, #80]	; (4038a4 <vTaskPriorityInherit+0x98>)
  403852:	4798      	blx	r3
  403854:	b970      	cbnz	r0, 403874 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403856:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403858:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40385c:	4a10      	ldr	r2, [pc, #64]	; (4038a0 <vTaskPriorityInherit+0x94>)
  40385e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403862:	b93a      	cbnz	r2, 403874 <vTaskPriorityInherit+0x68>
  403864:	4810      	ldr	r0, [pc, #64]	; (4038a8 <vTaskPriorityInherit+0x9c>)
  403866:	6802      	ldr	r2, [r0, #0]
  403868:	2101      	movs	r1, #1
  40386a:	fa01 f303 	lsl.w	r3, r1, r3
  40386e:	ea22 0303 	bic.w	r3, r2, r3
  403872:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403874:	4b09      	ldr	r3, [pc, #36]	; (40389c <vTaskPriorityInherit+0x90>)
  403876:	681b      	ldr	r3, [r3, #0]
  403878:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40387a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  40387c:	4a0a      	ldr	r2, [pc, #40]	; (4038a8 <vTaskPriorityInherit+0x9c>)
  40387e:	6811      	ldr	r1, [r2, #0]
  403880:	2301      	movs	r3, #1
  403882:	4083      	lsls	r3, r0
  403884:	430b      	orrs	r3, r1
  403886:	6013      	str	r3, [r2, #0]
  403888:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40388c:	4629      	mov	r1, r5
  40388e:	4b04      	ldr	r3, [pc, #16]	; (4038a0 <vTaskPriorityInherit+0x94>)
  403890:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403894:	4b05      	ldr	r3, [pc, #20]	; (4038ac <vTaskPriorityInherit+0xa0>)
  403896:	4798      	blx	r3
  403898:	bd38      	pop	{r3, r4, r5, pc}
  40389a:	4770      	bx	lr
  40389c:	2040c7c8 	.word	0x2040c7c8
  4038a0:	2040c7d4 	.word	0x2040c7d4
  4038a4:	004020e5 	.word	0x004020e5
  4038a8:	2040c84c 	.word	0x2040c84c
  4038ac:	00402099 	.word	0x00402099

004038b0 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  4038b0:	2800      	cmp	r0, #0
  4038b2:	d04d      	beq.n	403950 <xTaskPriorityDisinherit+0xa0>
	{
  4038b4:	b538      	push	{r3, r4, r5, lr}
  4038b6:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4038b8:	4a27      	ldr	r2, [pc, #156]	; (403958 <xTaskPriorityDisinherit+0xa8>)
  4038ba:	6812      	ldr	r2, [r2, #0]
  4038bc:	4290      	cmp	r0, r2
  4038be:	d00a      	beq.n	4038d6 <xTaskPriorityDisinherit+0x26>
  4038c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038c4:	b672      	cpsid	i
  4038c6:	f383 8811 	msr	BASEPRI, r3
  4038ca:	f3bf 8f6f 	isb	sy
  4038ce:	f3bf 8f4f 	dsb	sy
  4038d2:	b662      	cpsie	i
  4038d4:	e7fe      	b.n	4038d4 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4038d6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4038d8:	b952      	cbnz	r2, 4038f0 <xTaskPriorityDisinherit+0x40>
  4038da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038de:	b672      	cpsid	i
  4038e0:	f383 8811 	msr	BASEPRI, r3
  4038e4:	f3bf 8f6f 	isb	sy
  4038e8:	f3bf 8f4f 	dsb	sy
  4038ec:	b662      	cpsie	i
  4038ee:	e7fe      	b.n	4038ee <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4038f0:	3a01      	subs	r2, #1
  4038f2:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4038f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4038f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4038f8:	4288      	cmp	r0, r1
  4038fa:	d02b      	beq.n	403954 <xTaskPriorityDisinherit+0xa4>
  4038fc:	bb52      	cbnz	r2, 403954 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4038fe:	1d25      	adds	r5, r4, #4
  403900:	4628      	mov	r0, r5
  403902:	4b16      	ldr	r3, [pc, #88]	; (40395c <xTaskPriorityDisinherit+0xac>)
  403904:	4798      	blx	r3
  403906:	b968      	cbnz	r0, 403924 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403908:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40390a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40390e:	4b14      	ldr	r3, [pc, #80]	; (403960 <xTaskPriorityDisinherit+0xb0>)
  403910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403914:	b933      	cbnz	r3, 403924 <xTaskPriorityDisinherit+0x74>
  403916:	4813      	ldr	r0, [pc, #76]	; (403964 <xTaskPriorityDisinherit+0xb4>)
  403918:	6803      	ldr	r3, [r0, #0]
  40391a:	2201      	movs	r2, #1
  40391c:	408a      	lsls	r2, r1
  40391e:	ea23 0302 	bic.w	r3, r3, r2
  403922:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  403924:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  403926:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403928:	f1c0 0305 	rsb	r3, r0, #5
  40392c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40392e:	4a0d      	ldr	r2, [pc, #52]	; (403964 <xTaskPriorityDisinherit+0xb4>)
  403930:	6811      	ldr	r1, [r2, #0]
  403932:	2401      	movs	r4, #1
  403934:	fa04 f300 	lsl.w	r3, r4, r0
  403938:	430b      	orrs	r3, r1
  40393a:	6013      	str	r3, [r2, #0]
  40393c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403940:	4629      	mov	r1, r5
  403942:	4b07      	ldr	r3, [pc, #28]	; (403960 <xTaskPriorityDisinherit+0xb0>)
  403944:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403948:	4b07      	ldr	r3, [pc, #28]	; (403968 <xTaskPriorityDisinherit+0xb8>)
  40394a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  40394c:	4620      	mov	r0, r4
  40394e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403950:	2000      	movs	r0, #0
  403952:	4770      	bx	lr
  403954:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  403956:	bd38      	pop	{r3, r4, r5, pc}
  403958:	2040c7c8 	.word	0x2040c7c8
  40395c:	004020e5 	.word	0x004020e5
  403960:	2040c7d4 	.word	0x2040c7d4
  403964:	2040c84c 	.word	0x2040c84c
  403968:	00402099 	.word	0x00402099

0040396c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  40396c:	4b05      	ldr	r3, [pc, #20]	; (403984 <pvTaskIncrementMutexHeldCount+0x18>)
  40396e:	681b      	ldr	r3, [r3, #0]
  403970:	b123      	cbz	r3, 40397c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  403972:	4b04      	ldr	r3, [pc, #16]	; (403984 <pvTaskIncrementMutexHeldCount+0x18>)
  403974:	681a      	ldr	r2, [r3, #0]
  403976:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403978:	3301      	adds	r3, #1
  40397a:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  40397c:	4b01      	ldr	r3, [pc, #4]	; (403984 <pvTaskIncrementMutexHeldCount+0x18>)
  40397e:	6818      	ldr	r0, [r3, #0]
	}
  403980:	4770      	bx	lr
  403982:	bf00      	nop
  403984:	2040c7c8 	.word	0x2040c7c8

00403988 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  403988:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40398a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40398c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40398e:	4291      	cmp	r1, r2
  403990:	d80c      	bhi.n	4039ac <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403992:	1ad2      	subs	r2, r2, r3
  403994:	6983      	ldr	r3, [r0, #24]
  403996:	429a      	cmp	r2, r3
  403998:	d301      	bcc.n	40399e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40399a:	2001      	movs	r0, #1
  40399c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40399e:	1d01      	adds	r1, r0, #4
  4039a0:	4b09      	ldr	r3, [pc, #36]	; (4039c8 <prvInsertTimerInActiveList+0x40>)
  4039a2:	6818      	ldr	r0, [r3, #0]
  4039a4:	4b09      	ldr	r3, [pc, #36]	; (4039cc <prvInsertTimerInActiveList+0x44>)
  4039a6:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4039a8:	2000      	movs	r0, #0
  4039aa:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4039ac:	429a      	cmp	r2, r3
  4039ae:	d203      	bcs.n	4039b8 <prvInsertTimerInActiveList+0x30>
  4039b0:	4299      	cmp	r1, r3
  4039b2:	d301      	bcc.n	4039b8 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4039b4:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4039b6:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4039b8:	1d01      	adds	r1, r0, #4
  4039ba:	4b05      	ldr	r3, [pc, #20]	; (4039d0 <prvInsertTimerInActiveList+0x48>)
  4039bc:	6818      	ldr	r0, [r3, #0]
  4039be:	4b03      	ldr	r3, [pc, #12]	; (4039cc <prvInsertTimerInActiveList+0x44>)
  4039c0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4039c2:	2000      	movs	r0, #0
  4039c4:	bd08      	pop	{r3, pc}
  4039c6:	bf00      	nop
  4039c8:	2040c8cc 	.word	0x2040c8cc
  4039cc:	004020b1 	.word	0x004020b1
  4039d0:	2040c8c8 	.word	0x2040c8c8

004039d4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4039d4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4039d6:	4b15      	ldr	r3, [pc, #84]	; (403a2c <prvCheckForValidListAndQueue+0x58>)
  4039d8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4039da:	4b15      	ldr	r3, [pc, #84]	; (403a30 <prvCheckForValidListAndQueue+0x5c>)
  4039dc:	681b      	ldr	r3, [r3, #0]
  4039de:	b113      	cbz	r3, 4039e6 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4039e0:	4b14      	ldr	r3, [pc, #80]	; (403a34 <prvCheckForValidListAndQueue+0x60>)
  4039e2:	4798      	blx	r3
  4039e4:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4039e6:	4d14      	ldr	r5, [pc, #80]	; (403a38 <prvCheckForValidListAndQueue+0x64>)
  4039e8:	4628      	mov	r0, r5
  4039ea:	4e14      	ldr	r6, [pc, #80]	; (403a3c <prvCheckForValidListAndQueue+0x68>)
  4039ec:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4039ee:	4c14      	ldr	r4, [pc, #80]	; (403a40 <prvCheckForValidListAndQueue+0x6c>)
  4039f0:	4620      	mov	r0, r4
  4039f2:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4039f4:	4b13      	ldr	r3, [pc, #76]	; (403a44 <prvCheckForValidListAndQueue+0x70>)
  4039f6:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4039f8:	4b13      	ldr	r3, [pc, #76]	; (403a48 <prvCheckForValidListAndQueue+0x74>)
  4039fa:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4039fc:	2200      	movs	r2, #0
  4039fe:	2110      	movs	r1, #16
  403a00:	2005      	movs	r0, #5
  403a02:	4b12      	ldr	r3, [pc, #72]	; (403a4c <prvCheckForValidListAndQueue+0x78>)
  403a04:	4798      	blx	r3
  403a06:	4b0a      	ldr	r3, [pc, #40]	; (403a30 <prvCheckForValidListAndQueue+0x5c>)
  403a08:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  403a0a:	b118      	cbz	r0, 403a14 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  403a0c:	4910      	ldr	r1, [pc, #64]	; (403a50 <prvCheckForValidListAndQueue+0x7c>)
  403a0e:	4b11      	ldr	r3, [pc, #68]	; (403a54 <prvCheckForValidListAndQueue+0x80>)
  403a10:	4798      	blx	r3
  403a12:	e7e5      	b.n	4039e0 <prvCheckForValidListAndQueue+0xc>
  403a14:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a18:	b672      	cpsid	i
  403a1a:	f383 8811 	msr	BASEPRI, r3
  403a1e:	f3bf 8f6f 	isb	sy
  403a22:	f3bf 8f4f 	dsb	sy
  403a26:	b662      	cpsie	i
  403a28:	e7fe      	b.n	403a28 <prvCheckForValidListAndQueue+0x54>
  403a2a:	bf00      	nop
  403a2c:	004021c9 	.word	0x004021c9
  403a30:	2040c8fc 	.word	0x2040c8fc
  403a34:	00402215 	.word	0x00402215
  403a38:	2040c8d0 	.word	0x2040c8d0
  403a3c:	0040207d 	.word	0x0040207d
  403a40:	2040c8e4 	.word	0x2040c8e4
  403a44:	2040c8c8 	.word	0x2040c8c8
  403a48:	2040c8cc 	.word	0x2040c8cc
  403a4c:	00402721 	.word	0x00402721
  403a50:	00408d40 	.word	0x00408d40
  403a54:	00402d31 	.word	0x00402d31

00403a58 <xTimerCreateTimerTask>:
{
  403a58:	b510      	push	{r4, lr}
  403a5a:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  403a5c:	4b0f      	ldr	r3, [pc, #60]	; (403a9c <xTimerCreateTimerTask+0x44>)
  403a5e:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403a60:	4b0f      	ldr	r3, [pc, #60]	; (403aa0 <xTimerCreateTimerTask+0x48>)
  403a62:	681b      	ldr	r3, [r3, #0]
  403a64:	b173      	cbz	r3, 403a84 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  403a66:	2300      	movs	r3, #0
  403a68:	9303      	str	r3, [sp, #12]
  403a6a:	9302      	str	r3, [sp, #8]
  403a6c:	9301      	str	r3, [sp, #4]
  403a6e:	2204      	movs	r2, #4
  403a70:	9200      	str	r2, [sp, #0]
  403a72:	f44f 7282 	mov.w	r2, #260	; 0x104
  403a76:	490b      	ldr	r1, [pc, #44]	; (403aa4 <xTimerCreateTimerTask+0x4c>)
  403a78:	480b      	ldr	r0, [pc, #44]	; (403aa8 <xTimerCreateTimerTask+0x50>)
  403a7a:	4c0c      	ldr	r4, [pc, #48]	; (403aac <xTimerCreateTimerTask+0x54>)
  403a7c:	47a0      	blx	r4
	configASSERT( xReturn );
  403a7e:	b108      	cbz	r0, 403a84 <xTimerCreateTimerTask+0x2c>
}
  403a80:	b004      	add	sp, #16
  403a82:	bd10      	pop	{r4, pc}
  403a84:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a88:	b672      	cpsid	i
  403a8a:	f383 8811 	msr	BASEPRI, r3
  403a8e:	f3bf 8f6f 	isb	sy
  403a92:	f3bf 8f4f 	dsb	sy
  403a96:	b662      	cpsie	i
  403a98:	e7fe      	b.n	403a98 <xTimerCreateTimerTask+0x40>
  403a9a:	bf00      	nop
  403a9c:	004039d5 	.word	0x004039d5
  403aa0:	2040c8fc 	.word	0x2040c8fc
  403aa4:	00408d48 	.word	0x00408d48
  403aa8:	00403bd9 	.word	0x00403bd9
  403aac:	00402e41 	.word	0x00402e41

00403ab0 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403ab0:	b1d8      	cbz	r0, 403aea <xTimerGenericCommand+0x3a>
{
  403ab2:	b530      	push	{r4, r5, lr}
  403ab4:	b085      	sub	sp, #20
  403ab6:	4615      	mov	r5, r2
  403ab8:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  403aba:	4a15      	ldr	r2, [pc, #84]	; (403b10 <xTimerGenericCommand+0x60>)
  403abc:	6810      	ldr	r0, [r2, #0]
  403abe:	b320      	cbz	r0, 403b0a <xTimerGenericCommand+0x5a>
  403ac0:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403ac2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403ac4:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  403ac6:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  403ac8:	2905      	cmp	r1, #5
  403aca:	dc19      	bgt.n	403b00 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  403acc:	4b11      	ldr	r3, [pc, #68]	; (403b14 <xTimerGenericCommand+0x64>)
  403ace:	4798      	blx	r3
  403ad0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  403ad2:	f04f 0300 	mov.w	r3, #0
  403ad6:	bf0c      	ite	eq
  403ad8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  403ada:	461a      	movne	r2, r3
  403adc:	4669      	mov	r1, sp
  403ade:	480c      	ldr	r0, [pc, #48]	; (403b10 <xTimerGenericCommand+0x60>)
  403ae0:	6800      	ldr	r0, [r0, #0]
  403ae2:	4c0d      	ldr	r4, [pc, #52]	; (403b18 <xTimerGenericCommand+0x68>)
  403ae4:	47a0      	blx	r4
}
  403ae6:	b005      	add	sp, #20
  403ae8:	bd30      	pop	{r4, r5, pc}
  403aea:	f04f 0380 	mov.w	r3, #128	; 0x80
  403aee:	b672      	cpsid	i
  403af0:	f383 8811 	msr	BASEPRI, r3
  403af4:	f3bf 8f6f 	isb	sy
  403af8:	f3bf 8f4f 	dsb	sy
  403afc:	b662      	cpsie	i
  403afe:	e7fe      	b.n	403afe <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  403b00:	2300      	movs	r3, #0
  403b02:	4669      	mov	r1, sp
  403b04:	4c05      	ldr	r4, [pc, #20]	; (403b1c <xTimerGenericCommand+0x6c>)
  403b06:	47a0      	blx	r4
  403b08:	e7ed      	b.n	403ae6 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  403b0a:	2000      	movs	r0, #0
	return xReturn;
  403b0c:	e7eb      	b.n	403ae6 <xTimerGenericCommand+0x36>
  403b0e:	bf00      	nop
  403b10:	2040c8fc 	.word	0x2040c8fc
  403b14:	004037ed 	.word	0x004037ed
  403b18:	0040279d 	.word	0x0040279d
  403b1c:	00402981 	.word	0x00402981

00403b20 <prvSampleTimeNow>:
{
  403b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403b24:	b082      	sub	sp, #8
  403b26:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403b28:	4b24      	ldr	r3, [pc, #144]	; (403bbc <prvSampleTimeNow+0x9c>)
  403b2a:	4798      	blx	r3
  403b2c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  403b2e:	4b24      	ldr	r3, [pc, #144]	; (403bc0 <prvSampleTimeNow+0xa0>)
  403b30:	681b      	ldr	r3, [r3, #0]
  403b32:	4298      	cmp	r0, r3
  403b34:	d31b      	bcc.n	403b6e <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  403b36:	2300      	movs	r3, #0
  403b38:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  403b3c:	4b20      	ldr	r3, [pc, #128]	; (403bc0 <prvSampleTimeNow+0xa0>)
  403b3e:	601f      	str	r7, [r3, #0]
}
  403b40:	4638      	mov	r0, r7
  403b42:	b002      	add	sp, #8
  403b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403b48:	2100      	movs	r1, #0
  403b4a:	9100      	str	r1, [sp, #0]
  403b4c:	460b      	mov	r3, r1
  403b4e:	4652      	mov	r2, sl
  403b50:	4620      	mov	r0, r4
  403b52:	4c1c      	ldr	r4, [pc, #112]	; (403bc4 <prvSampleTimeNow+0xa4>)
  403b54:	47a0      	blx	r4
				configASSERT( xResult );
  403b56:	b960      	cbnz	r0, 403b72 <prvSampleTimeNow+0x52>
  403b58:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b5c:	b672      	cpsid	i
  403b5e:	f383 8811 	msr	BASEPRI, r3
  403b62:	f3bf 8f6f 	isb	sy
  403b66:	f3bf 8f4f 	dsb	sy
  403b6a:	b662      	cpsie	i
  403b6c:	e7fe      	b.n	403b6c <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403b6e:	4d16      	ldr	r5, [pc, #88]	; (403bc8 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403b70:	4e16      	ldr	r6, [pc, #88]	; (403bcc <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403b72:	682b      	ldr	r3, [r5, #0]
  403b74:	681a      	ldr	r2, [r3, #0]
  403b76:	b1c2      	cbz	r2, 403baa <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403b78:	68db      	ldr	r3, [r3, #12]
  403b7a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403b7e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403b80:	f104 0904 	add.w	r9, r4, #4
  403b84:	4648      	mov	r0, r9
  403b86:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403b8a:	4620      	mov	r0, r4
  403b8c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403b8e:	69e3      	ldr	r3, [r4, #28]
  403b90:	2b01      	cmp	r3, #1
  403b92:	d1ee      	bne.n	403b72 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403b94:	69a3      	ldr	r3, [r4, #24]
  403b96:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  403b98:	459a      	cmp	sl, r3
  403b9a:	d2d5      	bcs.n	403b48 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403b9c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403b9e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403ba0:	4649      	mov	r1, r9
  403ba2:	6828      	ldr	r0, [r5, #0]
  403ba4:	4b0a      	ldr	r3, [pc, #40]	; (403bd0 <prvSampleTimeNow+0xb0>)
  403ba6:	4798      	blx	r3
  403ba8:	e7e3      	b.n	403b72 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  403baa:	4a0a      	ldr	r2, [pc, #40]	; (403bd4 <prvSampleTimeNow+0xb4>)
  403bac:	6810      	ldr	r0, [r2, #0]
  403bae:	4906      	ldr	r1, [pc, #24]	; (403bc8 <prvSampleTimeNow+0xa8>)
  403bb0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403bb2:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403bb4:	2301      	movs	r3, #1
  403bb6:	f8c8 3000 	str.w	r3, [r8]
  403bba:	e7bf      	b.n	403b3c <prvSampleTimeNow+0x1c>
  403bbc:	00403111 	.word	0x00403111
  403bc0:	2040c8f8 	.word	0x2040c8f8
  403bc4:	00403ab1 	.word	0x00403ab1
  403bc8:	2040c8c8 	.word	0x2040c8c8
  403bcc:	004020e5 	.word	0x004020e5
  403bd0:	004020b1 	.word	0x004020b1
  403bd4:	2040c8cc 	.word	0x2040c8cc

00403bd8 <prvTimerTask>:
{
  403bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403bdc:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403bde:	4e75      	ldr	r6, [pc, #468]	; (403db4 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  403be0:	4f75      	ldr	r7, [pc, #468]	; (403db8 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  403be2:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403de0 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403be6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403de4 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403bea:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  403bec:	681a      	ldr	r2, [r3, #0]
  403bee:	2a00      	cmp	r2, #0
  403bf0:	f000 80ce 	beq.w	403d90 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403bf4:	68db      	ldr	r3, [r3, #12]
  403bf6:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  403bf8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403bfa:	a804      	add	r0, sp, #16
  403bfc:	4b6f      	ldr	r3, [pc, #444]	; (403dbc <prvTimerTask+0x1e4>)
  403bfe:	4798      	blx	r3
  403c00:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403c02:	9b04      	ldr	r3, [sp, #16]
  403c04:	2b00      	cmp	r3, #0
  403c06:	d144      	bne.n	403c92 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403c08:	42a0      	cmp	r0, r4
  403c0a:	d212      	bcs.n	403c32 <prvTimerTask+0x5a>
  403c0c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  403c0e:	1b61      	subs	r1, r4, r5
  403c10:	4b6b      	ldr	r3, [pc, #428]	; (403dc0 <prvTimerTask+0x1e8>)
  403c12:	6818      	ldr	r0, [r3, #0]
  403c14:	4b6b      	ldr	r3, [pc, #428]	; (403dc4 <prvTimerTask+0x1ec>)
  403c16:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403c18:	4b6b      	ldr	r3, [pc, #428]	; (403dc8 <prvTimerTask+0x1f0>)
  403c1a:	4798      	blx	r3
  403c1c:	2800      	cmp	r0, #0
  403c1e:	d13a      	bne.n	403c96 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403c20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403c24:	f8c9 3000 	str.w	r3, [r9]
  403c28:	f3bf 8f4f 	dsb	sy
  403c2c:	f3bf 8f6f 	isb	sy
  403c30:	e031      	b.n	403c96 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  403c32:	4b65      	ldr	r3, [pc, #404]	; (403dc8 <prvTimerTask+0x1f0>)
  403c34:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403c36:	6833      	ldr	r3, [r6, #0]
  403c38:	68db      	ldr	r3, [r3, #12]
  403c3a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403c3e:	f10a 0004 	add.w	r0, sl, #4
  403c42:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403c44:	f8da 301c 	ldr.w	r3, [sl, #28]
  403c48:	2b01      	cmp	r3, #1
  403c4a:	d004      	beq.n	403c56 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403c4c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403c50:	4650      	mov	r0, sl
  403c52:	4798      	blx	r3
  403c54:	e01f      	b.n	403c96 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  403c56:	f8da 1018 	ldr.w	r1, [sl, #24]
  403c5a:	4623      	mov	r3, r4
  403c5c:	462a      	mov	r2, r5
  403c5e:	4421      	add	r1, r4
  403c60:	4650      	mov	r0, sl
  403c62:	4d5a      	ldr	r5, [pc, #360]	; (403dcc <prvTimerTask+0x1f4>)
  403c64:	47a8      	blx	r5
  403c66:	2801      	cmp	r0, #1
  403c68:	d1f0      	bne.n	403c4c <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403c6a:	2100      	movs	r1, #0
  403c6c:	9100      	str	r1, [sp, #0]
  403c6e:	460b      	mov	r3, r1
  403c70:	4622      	mov	r2, r4
  403c72:	4650      	mov	r0, sl
  403c74:	4c56      	ldr	r4, [pc, #344]	; (403dd0 <prvTimerTask+0x1f8>)
  403c76:	47a0      	blx	r4
			configASSERT( xResult );
  403c78:	2800      	cmp	r0, #0
  403c7a:	d1e7      	bne.n	403c4c <prvTimerTask+0x74>
  403c7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c80:	b672      	cpsid	i
  403c82:	f383 8811 	msr	BASEPRI, r3
  403c86:	f3bf 8f6f 	isb	sy
  403c8a:	f3bf 8f4f 	dsb	sy
  403c8e:	b662      	cpsie	i
  403c90:	e7fe      	b.n	403c90 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403c92:	4b4d      	ldr	r3, [pc, #308]	; (403dc8 <prvTimerTask+0x1f0>)
  403c94:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403c96:	4d4a      	ldr	r5, [pc, #296]	; (403dc0 <prvTimerTask+0x1e8>)
  403c98:	4c4e      	ldr	r4, [pc, #312]	; (403dd4 <prvTimerTask+0x1fc>)
  403c9a:	e006      	b.n	403caa <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403c9c:	9907      	ldr	r1, [sp, #28]
  403c9e:	9806      	ldr	r0, [sp, #24]
  403ca0:	9b05      	ldr	r3, [sp, #20]
  403ca2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403ca4:	9b04      	ldr	r3, [sp, #16]
  403ca6:	2b00      	cmp	r3, #0
  403ca8:	da09      	bge.n	403cbe <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403caa:	2300      	movs	r3, #0
  403cac:	461a      	mov	r2, r3
  403cae:	a904      	add	r1, sp, #16
  403cb0:	6828      	ldr	r0, [r5, #0]
  403cb2:	47a0      	blx	r4
  403cb4:	2800      	cmp	r0, #0
  403cb6:	d098      	beq.n	403bea <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403cb8:	9b04      	ldr	r3, [sp, #16]
  403cba:	2b00      	cmp	r3, #0
  403cbc:	dbee      	blt.n	403c9c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403cbe:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403cc2:	f8da 3014 	ldr.w	r3, [sl, #20]
  403cc6:	b113      	cbz	r3, 403cce <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403cc8:	f10a 0004 	add.w	r0, sl, #4
  403ccc:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403cce:	a803      	add	r0, sp, #12
  403cd0:	4b3a      	ldr	r3, [pc, #232]	; (403dbc <prvTimerTask+0x1e4>)
  403cd2:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403cd4:	9b04      	ldr	r3, [sp, #16]
  403cd6:	2b09      	cmp	r3, #9
  403cd8:	d8e7      	bhi.n	403caa <prvTimerTask+0xd2>
  403cda:	a201      	add	r2, pc, #4	; (adr r2, 403ce0 <prvTimerTask+0x108>)
  403cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403ce0:	00403d09 	.word	0x00403d09
  403ce4:	00403d09 	.word	0x00403d09
  403ce8:	00403d09 	.word	0x00403d09
  403cec:	00403cab 	.word	0x00403cab
  403cf0:	00403d5d 	.word	0x00403d5d
  403cf4:	00403d89 	.word	0x00403d89
  403cf8:	00403d09 	.word	0x00403d09
  403cfc:	00403d09 	.word	0x00403d09
  403d00:	00403cab 	.word	0x00403cab
  403d04:	00403d5d 	.word	0x00403d5d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403d08:	9c05      	ldr	r4, [sp, #20]
  403d0a:	f8da 1018 	ldr.w	r1, [sl, #24]
  403d0e:	4623      	mov	r3, r4
  403d10:	4602      	mov	r2, r0
  403d12:	4421      	add	r1, r4
  403d14:	4650      	mov	r0, sl
  403d16:	4c2d      	ldr	r4, [pc, #180]	; (403dcc <prvTimerTask+0x1f4>)
  403d18:	47a0      	blx	r4
  403d1a:	2801      	cmp	r0, #1
  403d1c:	d1bc      	bne.n	403c98 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403d1e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403d22:	4650      	mov	r0, sl
  403d24:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403d26:	f8da 301c 	ldr.w	r3, [sl, #28]
  403d2a:	2b01      	cmp	r3, #1
  403d2c:	d1b4      	bne.n	403c98 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403d2e:	f8da 2018 	ldr.w	r2, [sl, #24]
  403d32:	2100      	movs	r1, #0
  403d34:	9100      	str	r1, [sp, #0]
  403d36:	460b      	mov	r3, r1
  403d38:	9805      	ldr	r0, [sp, #20]
  403d3a:	4402      	add	r2, r0
  403d3c:	4650      	mov	r0, sl
  403d3e:	4c24      	ldr	r4, [pc, #144]	; (403dd0 <prvTimerTask+0x1f8>)
  403d40:	47a0      	blx	r4
							configASSERT( xResult );
  403d42:	2800      	cmp	r0, #0
  403d44:	d1a8      	bne.n	403c98 <prvTimerTask+0xc0>
  403d46:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d4a:	b672      	cpsid	i
  403d4c:	f383 8811 	msr	BASEPRI, r3
  403d50:	f3bf 8f6f 	isb	sy
  403d54:	f3bf 8f4f 	dsb	sy
  403d58:	b662      	cpsie	i
  403d5a:	e7fe      	b.n	403d5a <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403d5c:	9905      	ldr	r1, [sp, #20]
  403d5e:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403d62:	b131      	cbz	r1, 403d72 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403d64:	4603      	mov	r3, r0
  403d66:	4602      	mov	r2, r0
  403d68:	4401      	add	r1, r0
  403d6a:	4650      	mov	r0, sl
  403d6c:	4c17      	ldr	r4, [pc, #92]	; (403dcc <prvTimerTask+0x1f4>)
  403d6e:	47a0      	blx	r4
  403d70:	e792      	b.n	403c98 <prvTimerTask+0xc0>
  403d72:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d76:	b672      	cpsid	i
  403d78:	f383 8811 	msr	BASEPRI, r3
  403d7c:	f3bf 8f6f 	isb	sy
  403d80:	f3bf 8f4f 	dsb	sy
  403d84:	b662      	cpsie	i
  403d86:	e7fe      	b.n	403d86 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403d88:	4650      	mov	r0, sl
  403d8a:	4b13      	ldr	r3, [pc, #76]	; (403dd8 <prvTimerTask+0x200>)
  403d8c:	4798      	blx	r3
  403d8e:	e783      	b.n	403c98 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403d90:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403d92:	a804      	add	r0, sp, #16
  403d94:	4b09      	ldr	r3, [pc, #36]	; (403dbc <prvTimerTask+0x1e4>)
  403d96:	4798      	blx	r3
  403d98:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403d9a:	9b04      	ldr	r3, [sp, #16]
  403d9c:	2b00      	cmp	r3, #0
  403d9e:	f47f af78 	bne.w	403c92 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403da2:	4b0e      	ldr	r3, [pc, #56]	; (403ddc <prvTimerTask+0x204>)
  403da4:	681b      	ldr	r3, [r3, #0]
  403da6:	681a      	ldr	r2, [r3, #0]
  403da8:	fab2 f282 	clz	r2, r2
  403dac:	0952      	lsrs	r2, r2, #5
  403dae:	2400      	movs	r4, #0
  403db0:	e72d      	b.n	403c0e <prvTimerTask+0x36>
  403db2:	bf00      	nop
  403db4:	2040c8c8 	.word	0x2040c8c8
  403db8:	00403101 	.word	0x00403101
  403dbc:	00403b21 	.word	0x00403b21
  403dc0:	2040c8fc 	.word	0x2040c8fc
  403dc4:	00402d65 	.word	0x00402d65
  403dc8:	00403269 	.word	0x00403269
  403dcc:	00403989 	.word	0x00403989
  403dd0:	00403ab1 	.word	0x00403ab1
  403dd4:	00402b61 	.word	0x00402b61
  403dd8:	00402495 	.word	0x00402495
  403ddc:	2040c8cc 	.word	0x2040c8cc
  403de0:	e000ed04 	.word	0xe000ed04
  403de4:	004020e5 	.word	0x004020e5

00403de8 <but_board_callback>:
		screen = 1;
	}
	change = 1;
}

void but_board_callback(void){
  403de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	second_sleep = 0;
  403dea:	2200      	movs	r2, #0
  403dec:	4b1c      	ldr	r3, [pc, #112]	; (403e60 <but_board_callback+0x78>)
  403dee:	601a      	str	r2, [r3, #0]
	if (flag_sleep == 1) {
  403df0:	4b1c      	ldr	r3, [pc, #112]	; (403e64 <but_board_callback+0x7c>)
  403df2:	781b      	ldrb	r3, [r3, #0]
  403df4:	b2db      	uxtb	r3, r3
  403df6:	2b01      	cmp	r3, #1
  403df8:	d025      	beq.n	403e46 <but_board_callback+0x5e>
		flag_sleep = 0;
	} else if (flag_sleep == 2){
  403dfa:	4b1a      	ldr	r3, [pc, #104]	; (403e64 <but_board_callback+0x7c>)
  403dfc:	781b      	ldrb	r3, [r3, #0]
  403dfe:	b2db      	uxtb	r3, r3
  403e00:	2b02      	cmp	r3, #2
  403e02:	d023      	beq.n	403e4c <but_board_callback+0x64>
		flag_sleep = 3;
	}
	pulses++;
  403e04:	4a18      	ldr	r2, [pc, #96]	; (403e68 <but_board_callback+0x80>)
  403e06:	6813      	ldr	r3, [r2, #0]
  403e08:	3301      	adds	r3, #1
  403e0a:	6013      	str	r3, [r2, #0]
	if(status){
  403e0c:	4b17      	ldr	r3, [pc, #92]	; (403e6c <but_board_callback+0x84>)
  403e0e:	681b      	ldr	r3, [r3, #0]
  403e10:	b1c3      	cbz	r3, 403e44 <but_board_callback+0x5c>
		total_pulses++;
  403e12:	4b17      	ldr	r3, [pc, #92]	; (403e70 <but_board_callback+0x88>)
  403e14:	681c      	ldr	r4, [r3, #0]
  403e16:	3401      	adds	r4, #1
  403e18:	601c      	str	r4, [r3, #0]
		distance = 2*MATH_PI*radius*total_pulses;
  403e1a:	4d16      	ldr	r5, [pc, #88]	; (403e74 <but_board_callback+0x8c>)
  403e1c:	a30e      	add	r3, pc, #56	; (adr r3, 403e58 <but_board_callback+0x70>)
  403e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e22:	4915      	ldr	r1, [pc, #84]	; (403e78 <but_board_callback+0x90>)
  403e24:	e9d1 0100 	ldrd	r0, r1, [r1]
  403e28:	47a8      	blx	r5
  403e2a:	4606      	mov	r6, r0
  403e2c:	460f      	mov	r7, r1
  403e2e:	4620      	mov	r0, r4
  403e30:	4b12      	ldr	r3, [pc, #72]	; (403e7c <but_board_callback+0x94>)
  403e32:	4798      	blx	r3
  403e34:	4602      	mov	r2, r0
  403e36:	460b      	mov	r3, r1
  403e38:	4630      	mov	r0, r6
  403e3a:	4639      	mov	r1, r7
  403e3c:	47a8      	blx	r5
  403e3e:	4b10      	ldr	r3, [pc, #64]	; (403e80 <but_board_callback+0x98>)
  403e40:	e9c3 0100 	strd	r0, r1, [r3]
  403e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		flag_sleep = 0;
  403e46:	4b07      	ldr	r3, [pc, #28]	; (403e64 <but_board_callback+0x7c>)
  403e48:	701a      	strb	r2, [r3, #0]
  403e4a:	e7db      	b.n	403e04 <but_board_callback+0x1c>
		flag_sleep = 3;
  403e4c:	2203      	movs	r2, #3
  403e4e:	4b05      	ldr	r3, [pc, #20]	; (403e64 <but_board_callback+0x7c>)
  403e50:	701a      	strb	r2, [r3, #0]
  403e52:	e7d7      	b.n	403e04 <but_board_callback+0x1c>
  403e54:	f3af 8000 	nop.w
  403e58:	54442d18 	.word	0x54442d18
  403e5c:	401921fb 	.word	0x401921fb
  403e60:	2040c92c 	.word	0x2040c92c
  403e64:	2040c912 	.word	0x2040c912
  403e68:	2040c924 	.word	0x2040c924
  403e6c:	2040c930 	.word	0x2040c930
  403e70:	2040c934 	.word	0x2040c934
  403e74:	00405941 	.word	0x00405941
  403e78:	204001a8 	.word	0x204001a8
  403e7c:	00405875 	.word	0x00405875
  403e80:	2040c908 	.word	0x2040c908

00403e84 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403e84:	b5f0      	push	{r4, r5, r6, r7, lr}
  403e86:	b083      	sub	sp, #12
  403e88:	4605      	mov	r5, r0
  403e8a:	460c      	mov	r4, r1
	uint32_t val = 0;
  403e8c:	2300      	movs	r3, #0
  403e8e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403e90:	4b2a      	ldr	r3, [pc, #168]	; (403f3c <usart_serial_getchar+0xb8>)
  403e92:	4298      	cmp	r0, r3
  403e94:	d013      	beq.n	403ebe <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403e96:	4b2a      	ldr	r3, [pc, #168]	; (403f40 <usart_serial_getchar+0xbc>)
  403e98:	4298      	cmp	r0, r3
  403e9a:	d018      	beq.n	403ece <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403e9c:	4b29      	ldr	r3, [pc, #164]	; (403f44 <usart_serial_getchar+0xc0>)
  403e9e:	4298      	cmp	r0, r3
  403ea0:	d01d      	beq.n	403ede <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403ea2:	4b29      	ldr	r3, [pc, #164]	; (403f48 <usart_serial_getchar+0xc4>)
  403ea4:	429d      	cmp	r5, r3
  403ea6:	d022      	beq.n	403eee <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403ea8:	4b28      	ldr	r3, [pc, #160]	; (403f4c <usart_serial_getchar+0xc8>)
  403eaa:	429d      	cmp	r5, r3
  403eac:	d027      	beq.n	403efe <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403eae:	4b28      	ldr	r3, [pc, #160]	; (403f50 <usart_serial_getchar+0xcc>)
  403eb0:	429d      	cmp	r5, r3
  403eb2:	d02e      	beq.n	403f12 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403eb4:	4b27      	ldr	r3, [pc, #156]	; (403f54 <usart_serial_getchar+0xd0>)
  403eb6:	429d      	cmp	r5, r3
  403eb8:	d035      	beq.n	403f26 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403eba:	b003      	add	sp, #12
  403ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403ebe:	461f      	mov	r7, r3
  403ec0:	4e25      	ldr	r6, [pc, #148]	; (403f58 <usart_serial_getchar+0xd4>)
  403ec2:	4621      	mov	r1, r4
  403ec4:	4638      	mov	r0, r7
  403ec6:	47b0      	blx	r6
  403ec8:	2800      	cmp	r0, #0
  403eca:	d1fa      	bne.n	403ec2 <usart_serial_getchar+0x3e>
  403ecc:	e7e9      	b.n	403ea2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403ece:	461f      	mov	r7, r3
  403ed0:	4e21      	ldr	r6, [pc, #132]	; (403f58 <usart_serial_getchar+0xd4>)
  403ed2:	4621      	mov	r1, r4
  403ed4:	4638      	mov	r0, r7
  403ed6:	47b0      	blx	r6
  403ed8:	2800      	cmp	r0, #0
  403eda:	d1fa      	bne.n	403ed2 <usart_serial_getchar+0x4e>
  403edc:	e7e4      	b.n	403ea8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403ede:	461f      	mov	r7, r3
  403ee0:	4e1d      	ldr	r6, [pc, #116]	; (403f58 <usart_serial_getchar+0xd4>)
  403ee2:	4621      	mov	r1, r4
  403ee4:	4638      	mov	r0, r7
  403ee6:	47b0      	blx	r6
  403ee8:	2800      	cmp	r0, #0
  403eea:	d1fa      	bne.n	403ee2 <usart_serial_getchar+0x5e>
  403eec:	e7df      	b.n	403eae <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403eee:	461f      	mov	r7, r3
  403ef0:	4e19      	ldr	r6, [pc, #100]	; (403f58 <usart_serial_getchar+0xd4>)
  403ef2:	4621      	mov	r1, r4
  403ef4:	4638      	mov	r0, r7
  403ef6:	47b0      	blx	r6
  403ef8:	2800      	cmp	r0, #0
  403efa:	d1fa      	bne.n	403ef2 <usart_serial_getchar+0x6e>
  403efc:	e7da      	b.n	403eb4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403efe:	461e      	mov	r6, r3
  403f00:	4d16      	ldr	r5, [pc, #88]	; (403f5c <usart_serial_getchar+0xd8>)
  403f02:	a901      	add	r1, sp, #4
  403f04:	4630      	mov	r0, r6
  403f06:	47a8      	blx	r5
  403f08:	2800      	cmp	r0, #0
  403f0a:	d1fa      	bne.n	403f02 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403f0c:	9b01      	ldr	r3, [sp, #4]
  403f0e:	7023      	strb	r3, [r4, #0]
  403f10:	e7d3      	b.n	403eba <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403f12:	461e      	mov	r6, r3
  403f14:	4d11      	ldr	r5, [pc, #68]	; (403f5c <usart_serial_getchar+0xd8>)
  403f16:	a901      	add	r1, sp, #4
  403f18:	4630      	mov	r0, r6
  403f1a:	47a8      	blx	r5
  403f1c:	2800      	cmp	r0, #0
  403f1e:	d1fa      	bne.n	403f16 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403f20:	9b01      	ldr	r3, [sp, #4]
  403f22:	7023      	strb	r3, [r4, #0]
  403f24:	e7c9      	b.n	403eba <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403f26:	461e      	mov	r6, r3
  403f28:	4d0c      	ldr	r5, [pc, #48]	; (403f5c <usart_serial_getchar+0xd8>)
  403f2a:	a901      	add	r1, sp, #4
  403f2c:	4630      	mov	r0, r6
  403f2e:	47a8      	blx	r5
  403f30:	2800      	cmp	r0, #0
  403f32:	d1fa      	bne.n	403f2a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403f34:	9b01      	ldr	r3, [sp, #4]
  403f36:	7023      	strb	r3, [r4, #0]
}
  403f38:	e7bf      	b.n	403eba <usart_serial_getchar+0x36>
  403f3a:	bf00      	nop
  403f3c:	400e0800 	.word	0x400e0800
  403f40:	400e0a00 	.word	0x400e0a00
  403f44:	400e1a00 	.word	0x400e1a00
  403f48:	400e1c00 	.word	0x400e1c00
  403f4c:	40024000 	.word	0x40024000
  403f50:	40028000 	.word	0x40028000
  403f54:	4002c000 	.word	0x4002c000
  403f58:	00401ca7 	.word	0x00401ca7
  403f5c:	00401db3 	.word	0x00401db3

00403f60 <usart_serial_putchar>:
{
  403f60:	b570      	push	{r4, r5, r6, lr}
  403f62:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403f64:	4b2a      	ldr	r3, [pc, #168]	; (404010 <usart_serial_putchar+0xb0>)
  403f66:	4298      	cmp	r0, r3
  403f68:	d013      	beq.n	403f92 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403f6a:	4b2a      	ldr	r3, [pc, #168]	; (404014 <usart_serial_putchar+0xb4>)
  403f6c:	4298      	cmp	r0, r3
  403f6e:	d019      	beq.n	403fa4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403f70:	4b29      	ldr	r3, [pc, #164]	; (404018 <usart_serial_putchar+0xb8>)
  403f72:	4298      	cmp	r0, r3
  403f74:	d01f      	beq.n	403fb6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403f76:	4b29      	ldr	r3, [pc, #164]	; (40401c <usart_serial_putchar+0xbc>)
  403f78:	4298      	cmp	r0, r3
  403f7a:	d025      	beq.n	403fc8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403f7c:	4b28      	ldr	r3, [pc, #160]	; (404020 <usart_serial_putchar+0xc0>)
  403f7e:	4298      	cmp	r0, r3
  403f80:	d02b      	beq.n	403fda <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403f82:	4b28      	ldr	r3, [pc, #160]	; (404024 <usart_serial_putchar+0xc4>)
  403f84:	4298      	cmp	r0, r3
  403f86:	d031      	beq.n	403fec <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403f88:	4b27      	ldr	r3, [pc, #156]	; (404028 <usart_serial_putchar+0xc8>)
  403f8a:	4298      	cmp	r0, r3
  403f8c:	d037      	beq.n	403ffe <usart_serial_putchar+0x9e>
	return 0;
  403f8e:	2000      	movs	r0, #0
}
  403f90:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403f92:	461e      	mov	r6, r3
  403f94:	4d25      	ldr	r5, [pc, #148]	; (40402c <usart_serial_putchar+0xcc>)
  403f96:	4621      	mov	r1, r4
  403f98:	4630      	mov	r0, r6
  403f9a:	47a8      	blx	r5
  403f9c:	2800      	cmp	r0, #0
  403f9e:	d1fa      	bne.n	403f96 <usart_serial_putchar+0x36>
		return 1;
  403fa0:	2001      	movs	r0, #1
  403fa2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403fa4:	461e      	mov	r6, r3
  403fa6:	4d21      	ldr	r5, [pc, #132]	; (40402c <usart_serial_putchar+0xcc>)
  403fa8:	4621      	mov	r1, r4
  403faa:	4630      	mov	r0, r6
  403fac:	47a8      	blx	r5
  403fae:	2800      	cmp	r0, #0
  403fb0:	d1fa      	bne.n	403fa8 <usart_serial_putchar+0x48>
		return 1;
  403fb2:	2001      	movs	r0, #1
  403fb4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403fb6:	461e      	mov	r6, r3
  403fb8:	4d1c      	ldr	r5, [pc, #112]	; (40402c <usart_serial_putchar+0xcc>)
  403fba:	4621      	mov	r1, r4
  403fbc:	4630      	mov	r0, r6
  403fbe:	47a8      	blx	r5
  403fc0:	2800      	cmp	r0, #0
  403fc2:	d1fa      	bne.n	403fba <usart_serial_putchar+0x5a>
		return 1;
  403fc4:	2001      	movs	r0, #1
  403fc6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403fc8:	461e      	mov	r6, r3
  403fca:	4d18      	ldr	r5, [pc, #96]	; (40402c <usart_serial_putchar+0xcc>)
  403fcc:	4621      	mov	r1, r4
  403fce:	4630      	mov	r0, r6
  403fd0:	47a8      	blx	r5
  403fd2:	2800      	cmp	r0, #0
  403fd4:	d1fa      	bne.n	403fcc <usart_serial_putchar+0x6c>
		return 1;
  403fd6:	2001      	movs	r0, #1
  403fd8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403fda:	461e      	mov	r6, r3
  403fdc:	4d14      	ldr	r5, [pc, #80]	; (404030 <usart_serial_putchar+0xd0>)
  403fde:	4621      	mov	r1, r4
  403fe0:	4630      	mov	r0, r6
  403fe2:	47a8      	blx	r5
  403fe4:	2800      	cmp	r0, #0
  403fe6:	d1fa      	bne.n	403fde <usart_serial_putchar+0x7e>
		return 1;
  403fe8:	2001      	movs	r0, #1
  403fea:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403fec:	461e      	mov	r6, r3
  403fee:	4d10      	ldr	r5, [pc, #64]	; (404030 <usart_serial_putchar+0xd0>)
  403ff0:	4621      	mov	r1, r4
  403ff2:	4630      	mov	r0, r6
  403ff4:	47a8      	blx	r5
  403ff6:	2800      	cmp	r0, #0
  403ff8:	d1fa      	bne.n	403ff0 <usart_serial_putchar+0x90>
		return 1;
  403ffa:	2001      	movs	r0, #1
  403ffc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403ffe:	461e      	mov	r6, r3
  404000:	4d0b      	ldr	r5, [pc, #44]	; (404030 <usart_serial_putchar+0xd0>)
  404002:	4621      	mov	r1, r4
  404004:	4630      	mov	r0, r6
  404006:	47a8      	blx	r5
  404008:	2800      	cmp	r0, #0
  40400a:	d1fa      	bne.n	404002 <usart_serial_putchar+0xa2>
		return 1;
  40400c:	2001      	movs	r0, #1
  40400e:	bd70      	pop	{r4, r5, r6, pc}
  404010:	400e0800 	.word	0x400e0800
  404014:	400e0a00 	.word	0x400e0a00
  404018:	400e1a00 	.word	0x400e1a00
  40401c:	400e1c00 	.word	0x400e1c00
  404020:	40024000 	.word	0x40024000
  404024:	40028000 	.word	0x40028000
  404028:	4002c000 	.word	0x4002c000
  40402c:	00401c95 	.word	0x00401c95
  404030:	00401d9d 	.word	0x00401d9d

00404034 <vApplicationStackOverflowHook>:
{
  404034:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  404036:	460a      	mov	r2, r1
  404038:	4601      	mov	r1, r0
  40403a:	4802      	ldr	r0, [pc, #8]	; (404044 <vApplicationStackOverflowHook+0x10>)
  40403c:	4b02      	ldr	r3, [pc, #8]	; (404048 <vApplicationStackOverflowHook+0x14>)
  40403e:	4798      	blx	r3
  404040:	e7fe      	b.n	404040 <vApplicationStackOverflowHook+0xc>
  404042:	bf00      	nop
  404044:	0041b93c 	.word	0x0041b93c
  404048:	00405db5 	.word	0x00405db5

0040404c <vApplicationTickHook>:
{
  40404c:	4770      	bx	lr

0040404e <vApplicationMallocFailedHook>:
  40404e:	f04f 0380 	mov.w	r3, #128	; 0x80
  404052:	b672      	cpsid	i
  404054:	f383 8811 	msr	BASEPRI, r3
  404058:	f3bf 8f6f 	isb	sy
  40405c:	f3bf 8f4f 	dsb	sy
  404060:	b662      	cpsie	i
  404062:	e7fe      	b.n	404062 <vApplicationMallocFailedHook+0x14>

00404064 <draw_screen>:
void draw_screen(int number) {
  404064:	b510      	push	{r4, lr}
	if (number == 2) {
  404066:	2802      	cmp	r0, #2
  404068:	d003      	beq.n	404072 <draw_screen+0xe>
	} else if (number == 0) {
  40406a:	b178      	cbz	r0, 40408c <draw_screen+0x28>
	} else if (number == 1) {
  40406c:	2801      	cmp	r0, #1
  40406e:	d019      	beq.n	4040a4 <draw_screen+0x40>
  404070:	bd10      	pop	{r4, pc}
	  ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  404072:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  404076:	4b12      	ldr	r3, [pc, #72]	; (4040c0 <draw_screen+0x5c>)
  404078:	4798      	blx	r3
	  ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  40407a:	f240 13df 	movw	r3, #479	; 0x1df
  40407e:	f240 123f 	movw	r2, #319	; 0x13f
  404082:	2100      	movs	r1, #0
  404084:	4608      	mov	r0, r1
  404086:	4c0f      	ldr	r4, [pc, #60]	; (4040c4 <draw_screen+0x60>)
  404088:	47a0      	blx	r4
  40408a:	bd10      	pop	{r4, pc}
		 ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  40408c:	480e      	ldr	r0, [pc, #56]	; (4040c8 <draw_screen+0x64>)
  40408e:	4b0c      	ldr	r3, [pc, #48]	; (4040c0 <draw_screen+0x5c>)
  404090:	4798      	blx	r3
		 ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  404092:	f240 13df 	movw	r3, #479	; 0x1df
  404096:	f240 123f 	movw	r2, #319	; 0x13f
  40409a:	2100      	movs	r1, #0
  40409c:	4608      	mov	r0, r1
  40409e:	4c09      	ldr	r4, [pc, #36]	; (4040c4 <draw_screen+0x60>)
  4040a0:	47a0      	blx	r4
  4040a2:	bd10      	pop	{r4, pc}
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_RED));
  4040a4:	f44f 007c 	mov.w	r0, #16515072	; 0xfc0000
  4040a8:	4b05      	ldr	r3, [pc, #20]	; (4040c0 <draw_screen+0x5c>)
  4040aa:	4798      	blx	r3
		ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  4040ac:	f240 13df 	movw	r3, #479	; 0x1df
  4040b0:	f240 123f 	movw	r2, #319	; 0x13f
  4040b4:	2100      	movs	r1, #0
  4040b6:	4608      	mov	r0, r1
  4040b8:	4c02      	ldr	r4, [pc, #8]	; (4040c4 <draw_screen+0x60>)
  4040ba:	47a0      	blx	r4
}
  4040bc:	e7d8      	b.n	404070 <draw_screen+0xc>
  4040be:	bf00      	nop
  4040c0:	00400fd5 	.word	0x00400fd5
  4040c4:	00401225 	.word	0x00401225
  4040c8:	00fcfcfc 	.word	0x00fcfcfc

004040cc <draw_screen_asterisk>:
void draw_screen_asterisk() {
  4040cc:	b510      	push	{r4, lr}
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4040ce:	4806      	ldr	r0, [pc, #24]	; (4040e8 <draw_screen_asterisk+0x1c>)
  4040d0:	4b06      	ldr	r3, [pc, #24]	; (4040ec <draw_screen_asterisk+0x20>)
  4040d2:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, 430, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  4040d4:	f240 13df 	movw	r3, #479	; 0x1df
  4040d8:	f240 123f 	movw	r2, #319	; 0x13f
  4040dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
  4040e0:	2000      	movs	r0, #0
  4040e2:	4c03      	ldr	r4, [pc, #12]	; (4040f0 <draw_screen_asterisk+0x24>)
  4040e4:	47a0      	blx	r4
  4040e6:	bd10      	pop	{r4, pc}
  4040e8:	00fcfcfc 	.word	0x00fcfcfc
  4040ec:	00400fd5 	.word	0x00400fd5
  4040f0:	00401225 	.word	0x00401225

004040f4 <font_draw_text>:
void font_draw_text(tFont *font, const char *text, int x, int y, int spacing) {
  4040f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4040f8:	b082      	sub	sp, #8
  4040fa:	461f      	mov	r7, r3
  4040fc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	while(*p != NULL) {
  404100:	780b      	ldrb	r3, [r1, #0]
  404102:	b30b      	cbz	r3, 404148 <font_draw_text+0x54>
  404104:	4605      	mov	r5, r0
  404106:	4616      	mov	r6, r2
  404108:	4618      	mov	r0, r3
  40410a:	460c      	mov	r4, r1
			ili9488_draw_pixmap(x, y, current_char->image->width, current_char->image->height, current_char->image->data);
  40410c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 404150 <font_draw_text+0x5c>
  404110:	e003      	b.n	40411a <font_draw_text+0x26>
	while(*p != NULL) {
  404112:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404116:	4618      	mov	r0, r3
  404118:	b1b3      	cbz	r3, 404148 <font_draw_text+0x54>
		if(letter <= font->end_char) {
  40411a:	7a6a      	ldrb	r2, [r5, #9]
  40411c:	429a      	cmp	r2, r3
  40411e:	d3f8      	bcc.n	404112 <font_draw_text+0x1e>
		int letter_offset = letter - font->start_char;
  404120:	7a2b      	ldrb	r3, [r5, #8]
  404122:	1ac0      	subs	r0, r0, r3
			tChar *current_char = font->chars + letter_offset;
  404124:	686b      	ldr	r3, [r5, #4]
  404126:	eb03 0ac0 	add.w	sl, r3, r0, lsl #3
			ili9488_draw_pixmap(x, y, current_char->image->width, current_char->image->height, current_char->image->data);
  40412a:	f8da 1004 	ldr.w	r1, [sl, #4]
  40412e:	688b      	ldr	r3, [r1, #8]
  404130:	684a      	ldr	r2, [r1, #4]
  404132:	6809      	ldr	r1, [r1, #0]
  404134:	9100      	str	r1, [sp, #0]
  404136:	4639      	mov	r1, r7
  404138:	4630      	mov	r0, r6
  40413a:	47c8      	blx	r9
			x += current_char->image->width + spacing;
  40413c:	f8da 3004 	ldr.w	r3, [sl, #4]
  404140:	685b      	ldr	r3, [r3, #4]
  404142:	4443      	add	r3, r8
  404144:	441e      	add	r6, r3
  404146:	e7e4      	b.n	404112 <font_draw_text+0x1e>
}
  404148:	b002      	add	sp, #8
  40414a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40414e:	bf00      	nop
  404150:	004012e1 	.word	0x004012e1

00404154 <draw_button_square>:
void draw_button_square(t_but but){
  404154:	b084      	sub	sp, #16
  404156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40415a:	b082      	sub	sp, #8
  40415c:	ac08      	add	r4, sp, #32
  40415e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  404162:	4605      	mov	r5, r0
  404164:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  404168:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40416a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40416c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	if (but.status == 0) {
  40416e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  404172:	bb53      	cbnz	r3, 4041ca <draw_button_square+0x76>
		ili9488_set_foreground_color(COLOR_CONVERT(but.colorOff));
  404174:	4858      	ldr	r0, [pc, #352]	; (4042d8 <draw_button_square+0x184>)
  404176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404178:	4018      	ands	r0, r3
  40417a:	4b58      	ldr	r3, [pc, #352]	; (4042dc <draw_button_square+0x188>)
  40417c:	4798      	blx	r3
		ili9488_draw_filled_rectangle(but.x-but.width/2, but.y-but.height/2,
  40417e:	0868      	lsrs	r0, r5, #1
  404180:	ea4f 0158 	mov.w	r1, r8, lsr #1
  404184:	19cb      	adds	r3, r1, r7
  404186:	1982      	adds	r2, r0, r6
  404188:	1a79      	subs	r1, r7, r1
  40418a:	1a30      	subs	r0, r6, r0
  40418c:	4d54      	ldr	r5, [pc, #336]	; (4042e0 <draw_button_square+0x18c>)
  40418e:	47a8      	blx	r5
	if (but.number == 0) {
  404190:	b354      	cbz	r4, 4041e8 <draw_button_square+0x94>
	} else if (but.number == 1) {
  404192:	2c01      	cmp	r4, #1
  404194:	d032      	beq.n	4041fc <draw_button_square+0xa8>
	} else if (but.number == 2) {
  404196:	2c02      	cmp	r4, #2
  404198:	d03a      	beq.n	404210 <draw_button_square+0xbc>
	} else if(but.number == 3) {
  40419a:	2c03      	cmp	r4, #3
  40419c:	d042      	beq.n	404224 <draw_button_square+0xd0>
	} else if(but.number == 4) {
  40419e:	2c04      	cmp	r4, #4
  4041a0:	d04a      	beq.n	404238 <draw_button_square+0xe4>
	} else if(but.number == 5) {
  4041a2:	2c05      	cmp	r4, #5
  4041a4:	d052      	beq.n	40424c <draw_button_square+0xf8>
	} else if(but.number == 6) {
  4041a6:	2c06      	cmp	r4, #6
  4041a8:	d05a      	beq.n	404260 <draw_button_square+0x10c>
	} else if(but.number == 7) {
  4041aa:	2c07      	cmp	r4, #7
  4041ac:	d062      	beq.n	404274 <draw_button_square+0x120>
	} else if(but.number == 8) {
  4041ae:	2c08      	cmp	r4, #8
  4041b0:	d06a      	beq.n	404288 <draw_button_square+0x134>
	} else if(but.number == 9) {
  4041b2:	2c09      	cmp	r4, #9
  4041b4:	d072      	beq.n	40429c <draw_button_square+0x148>
	} else if(but.number == 10) {
  4041b6:	2c0a      	cmp	r4, #10
  4041b8:	d07a      	beq.n	4042b0 <draw_button_square+0x15c>
	} else if(but.number == 11) {
  4041ba:	2c0b      	cmp	r4, #11
  4041bc:	f000 8082 	beq.w	4042c4 <draw_button_square+0x170>
}
  4041c0:	b002      	add	sp, #8
  4041c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4041c6:	b004      	add	sp, #16
  4041c8:	4770      	bx	lr
		ili9488_set_foreground_color(COLOR_CONVERT(but.colorOn));
  4041ca:	4843      	ldr	r0, [pc, #268]	; (4042d8 <draw_button_square+0x184>)
  4041cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4041ce:	4018      	ands	r0, r3
  4041d0:	4b42      	ldr	r3, [pc, #264]	; (4042dc <draw_button_square+0x188>)
  4041d2:	4798      	blx	r3
		ili9488_draw_filled_rectangle(but.x-but.width/2, but.y-but.height/2,
  4041d4:	0868      	lsrs	r0, r5, #1
  4041d6:	ea4f 0158 	mov.w	r1, r8, lsr #1
  4041da:	19cb      	adds	r3, r1, r7
  4041dc:	1982      	adds	r2, r0, r6
  4041de:	1a79      	subs	r1, r7, r1
  4041e0:	1a30      	subs	r0, r6, r0
  4041e2:	4d3f      	ldr	r5, [pc, #252]	; (4042e0 <draw_button_square+0x18c>)
  4041e4:	47a8      	blx	r5
  4041e6:	e7d3      	b.n	404190 <draw_button_square+0x3c>
		font_draw_text(&calibri_23, "0", but0.x, but0.y, 1);
  4041e8:	4a3e      	ldr	r2, [pc, #248]	; (4042e4 <draw_button_square+0x190>)
  4041ea:	6953      	ldr	r3, [r2, #20]
  4041ec:	6912      	ldr	r2, [r2, #16]
  4041ee:	2101      	movs	r1, #1
  4041f0:	9100      	str	r1, [sp, #0]
  4041f2:	493d      	ldr	r1, [pc, #244]	; (4042e8 <draw_button_square+0x194>)
  4041f4:	483d      	ldr	r0, [pc, #244]	; (4042ec <draw_button_square+0x198>)
  4041f6:	4c3e      	ldr	r4, [pc, #248]	; (4042f0 <draw_button_square+0x19c>)
  4041f8:	47a0      	blx	r4
  4041fa:	e7e1      	b.n	4041c0 <draw_button_square+0x6c>
		font_draw_text(&calibri_23, "1", but1.x, but1.y, 1);
  4041fc:	4a3d      	ldr	r2, [pc, #244]	; (4042f4 <draw_button_square+0x1a0>)
  4041fe:	6953      	ldr	r3, [r2, #20]
  404200:	6912      	ldr	r2, [r2, #16]
  404202:	2101      	movs	r1, #1
  404204:	9100      	str	r1, [sp, #0]
  404206:	493c      	ldr	r1, [pc, #240]	; (4042f8 <draw_button_square+0x1a4>)
  404208:	4838      	ldr	r0, [pc, #224]	; (4042ec <draw_button_square+0x198>)
  40420a:	4c39      	ldr	r4, [pc, #228]	; (4042f0 <draw_button_square+0x19c>)
  40420c:	47a0      	blx	r4
  40420e:	e7d7      	b.n	4041c0 <draw_button_square+0x6c>
		font_draw_text(&calibri_23, "2", but2.x, but2.y, 1);
  404210:	4a3a      	ldr	r2, [pc, #232]	; (4042fc <draw_button_square+0x1a8>)
  404212:	6953      	ldr	r3, [r2, #20]
  404214:	6912      	ldr	r2, [r2, #16]
  404216:	2101      	movs	r1, #1
  404218:	9100      	str	r1, [sp, #0]
  40421a:	4939      	ldr	r1, [pc, #228]	; (404300 <draw_button_square+0x1ac>)
  40421c:	4833      	ldr	r0, [pc, #204]	; (4042ec <draw_button_square+0x198>)
  40421e:	4c34      	ldr	r4, [pc, #208]	; (4042f0 <draw_button_square+0x19c>)
  404220:	47a0      	blx	r4
  404222:	e7cd      	b.n	4041c0 <draw_button_square+0x6c>
		font_draw_text(&calibri_23, "3", but3.x, but3.y, 1);
  404224:	4a37      	ldr	r2, [pc, #220]	; (404304 <draw_button_square+0x1b0>)
  404226:	6953      	ldr	r3, [r2, #20]
  404228:	6912      	ldr	r2, [r2, #16]
  40422a:	2101      	movs	r1, #1
  40422c:	9100      	str	r1, [sp, #0]
  40422e:	4936      	ldr	r1, [pc, #216]	; (404308 <draw_button_square+0x1b4>)
  404230:	482e      	ldr	r0, [pc, #184]	; (4042ec <draw_button_square+0x198>)
  404232:	4c2f      	ldr	r4, [pc, #188]	; (4042f0 <draw_button_square+0x19c>)
  404234:	47a0      	blx	r4
  404236:	e7c3      	b.n	4041c0 <draw_button_square+0x6c>
		font_draw_text(&calibri_23, "4", but4.x, but4.y, 1);
  404238:	4a34      	ldr	r2, [pc, #208]	; (40430c <draw_button_square+0x1b8>)
  40423a:	6953      	ldr	r3, [r2, #20]
  40423c:	6912      	ldr	r2, [r2, #16]
  40423e:	2101      	movs	r1, #1
  404240:	9100      	str	r1, [sp, #0]
  404242:	4933      	ldr	r1, [pc, #204]	; (404310 <draw_button_square+0x1bc>)
  404244:	4829      	ldr	r0, [pc, #164]	; (4042ec <draw_button_square+0x198>)
  404246:	4c2a      	ldr	r4, [pc, #168]	; (4042f0 <draw_button_square+0x19c>)
  404248:	47a0      	blx	r4
  40424a:	e7b9      	b.n	4041c0 <draw_button_square+0x6c>
		font_draw_text(&calibri_23, "5", but5.x, but5.y, 1);
  40424c:	4a31      	ldr	r2, [pc, #196]	; (404314 <draw_button_square+0x1c0>)
  40424e:	6953      	ldr	r3, [r2, #20]
  404250:	6912      	ldr	r2, [r2, #16]
  404252:	2101      	movs	r1, #1
  404254:	9100      	str	r1, [sp, #0]
  404256:	4930      	ldr	r1, [pc, #192]	; (404318 <draw_button_square+0x1c4>)
  404258:	4824      	ldr	r0, [pc, #144]	; (4042ec <draw_button_square+0x198>)
  40425a:	4c25      	ldr	r4, [pc, #148]	; (4042f0 <draw_button_square+0x19c>)
  40425c:	47a0      	blx	r4
  40425e:	e7af      	b.n	4041c0 <draw_button_square+0x6c>
		font_draw_text(&calibri_23, "6", but6.x, but6.y, 1);
  404260:	4a2e      	ldr	r2, [pc, #184]	; (40431c <draw_button_square+0x1c8>)
  404262:	6953      	ldr	r3, [r2, #20]
  404264:	6912      	ldr	r2, [r2, #16]
  404266:	2101      	movs	r1, #1
  404268:	9100      	str	r1, [sp, #0]
  40426a:	492d      	ldr	r1, [pc, #180]	; (404320 <draw_button_square+0x1cc>)
  40426c:	481f      	ldr	r0, [pc, #124]	; (4042ec <draw_button_square+0x198>)
  40426e:	4c20      	ldr	r4, [pc, #128]	; (4042f0 <draw_button_square+0x19c>)
  404270:	47a0      	blx	r4
  404272:	e7a5      	b.n	4041c0 <draw_button_square+0x6c>
		font_draw_text(&calibri_23, "7", but7.x, but7.y, 1);
  404274:	4a2b      	ldr	r2, [pc, #172]	; (404324 <draw_button_square+0x1d0>)
  404276:	6953      	ldr	r3, [r2, #20]
  404278:	6912      	ldr	r2, [r2, #16]
  40427a:	2101      	movs	r1, #1
  40427c:	9100      	str	r1, [sp, #0]
  40427e:	492a      	ldr	r1, [pc, #168]	; (404328 <draw_button_square+0x1d4>)
  404280:	481a      	ldr	r0, [pc, #104]	; (4042ec <draw_button_square+0x198>)
  404282:	4c1b      	ldr	r4, [pc, #108]	; (4042f0 <draw_button_square+0x19c>)
  404284:	47a0      	blx	r4
  404286:	e79b      	b.n	4041c0 <draw_button_square+0x6c>
		font_draw_text(&calibri_23, "8", but8.x, but8.y, 1);
  404288:	4a28      	ldr	r2, [pc, #160]	; (40432c <draw_button_square+0x1d8>)
  40428a:	6953      	ldr	r3, [r2, #20]
  40428c:	6912      	ldr	r2, [r2, #16]
  40428e:	2101      	movs	r1, #1
  404290:	9100      	str	r1, [sp, #0]
  404292:	4927      	ldr	r1, [pc, #156]	; (404330 <draw_button_square+0x1dc>)
  404294:	4815      	ldr	r0, [pc, #84]	; (4042ec <draw_button_square+0x198>)
  404296:	4c16      	ldr	r4, [pc, #88]	; (4042f0 <draw_button_square+0x19c>)
  404298:	47a0      	blx	r4
  40429a:	e791      	b.n	4041c0 <draw_button_square+0x6c>
		font_draw_text(&calibri_23, "9", but9.x, but9.y, 1);
  40429c:	4a25      	ldr	r2, [pc, #148]	; (404334 <draw_button_square+0x1e0>)
  40429e:	6953      	ldr	r3, [r2, #20]
  4042a0:	6912      	ldr	r2, [r2, #16]
  4042a2:	2101      	movs	r1, #1
  4042a4:	9100      	str	r1, [sp, #0]
  4042a6:	4924      	ldr	r1, [pc, #144]	; (404338 <draw_button_square+0x1e4>)
  4042a8:	4810      	ldr	r0, [pc, #64]	; (4042ec <draw_button_square+0x198>)
  4042aa:	4c11      	ldr	r4, [pc, #68]	; (4042f0 <draw_button_square+0x19c>)
  4042ac:	47a0      	blx	r4
  4042ae:	e787      	b.n	4041c0 <draw_button_square+0x6c>
		font_draw_text(&calibri_23, "*", butx.x, butx.y, 1);
  4042b0:	4a22      	ldr	r2, [pc, #136]	; (40433c <draw_button_square+0x1e8>)
  4042b2:	6953      	ldr	r3, [r2, #20]
  4042b4:	6912      	ldr	r2, [r2, #16]
  4042b6:	2101      	movs	r1, #1
  4042b8:	9100      	str	r1, [sp, #0]
  4042ba:	4921      	ldr	r1, [pc, #132]	; (404340 <draw_button_square+0x1ec>)
  4042bc:	480b      	ldr	r0, [pc, #44]	; (4042ec <draw_button_square+0x198>)
  4042be:	4c0c      	ldr	r4, [pc, #48]	; (4042f0 <draw_button_square+0x19c>)
  4042c0:	47a0      	blx	r4
  4042c2:	e77d      	b.n	4041c0 <draw_button_square+0x6c>
		font_draw_text(&calibri_23, "Clear", 50, butx.y, 1);
  4042c4:	4b1d      	ldr	r3, [pc, #116]	; (40433c <draw_button_square+0x1e8>)
  4042c6:	695b      	ldr	r3, [r3, #20]
  4042c8:	2201      	movs	r2, #1
  4042ca:	9200      	str	r2, [sp, #0]
  4042cc:	2232      	movs	r2, #50	; 0x32
  4042ce:	491d      	ldr	r1, [pc, #116]	; (404344 <draw_button_square+0x1f0>)
  4042d0:	4806      	ldr	r0, [pc, #24]	; (4042ec <draw_button_square+0x198>)
  4042d2:	4c07      	ldr	r4, [pc, #28]	; (4042f0 <draw_button_square+0x19c>)
  4042d4:	47a0      	blx	r4
}
  4042d6:	e773      	b.n	4041c0 <draw_button_square+0x6c>
  4042d8:	00fcfcfc 	.word	0x00fcfcfc
  4042dc:	00400fd5 	.word	0x00400fd5
  4042e0:	00401225 	.word	0x00401225
  4042e4:	20400014 	.word	0x20400014
  4042e8:	00409644 	.word	0x00409644
  4042ec:	00408d50 	.word	0x00408d50
  4042f0:	004040f5 	.word	0x004040f5
  4042f4:	20400034 	.word	0x20400034
  4042f8:	00409648 	.word	0x00409648
  4042fc:	20400054 	.word	0x20400054
  404300:	0040964c 	.word	0x0040964c
  404304:	20400074 	.word	0x20400074
  404308:	00409650 	.word	0x00409650
  40430c:	20400094 	.word	0x20400094
  404310:	00409654 	.word	0x00409654
  404314:	204000b4 	.word	0x204000b4
  404318:	00409658 	.word	0x00409658
  40431c:	204000d4 	.word	0x204000d4
  404320:	0040965c 	.word	0x0040965c
  404324:	204000f4 	.word	0x204000f4
  404328:	00409660 	.word	0x00409660
  40432c:	20400114 	.word	0x20400114
  404330:	00409664 	.word	0x00409664
  404334:	20400134 	.word	0x20400134
  404338:	00409668 	.word	0x00409668
  40433c:	20400174 	.word	0x20400174
  404340:	0040966c 	.word	0x0040966c
  404344:	00409670 	.word	0x00409670

00404348 <mxt_handler>:
{
  404348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40434c:	b084      	sub	sp, #16
  40434e:	4605      	mov	r5, r0
  404350:	4689      	mov	r9, r1
  404352:	4690      	mov	r8, r2
  uint first = 0;
  404354:	f04f 0a00 	mov.w	sl, #0
  uint8_t i = 0; /* Iterator */
  404358:	4654      	mov	r4, sl
    if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  40435a:	4f15      	ldr	r7, [pc, #84]	; (4043b0 <mxt_handler+0x68>)
  } while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  40435c:	4e15      	ldr	r6, [pc, #84]	; (4043b4 <mxt_handler+0x6c>)
  40435e:	e008      	b.n	404372 <mxt_handler+0x2a>
    i++;
  404360:	3401      	adds	r4, #1
  404362:	b2e4      	uxtb	r4, r4
  404364:	f04f 0a01 	mov.w	sl, #1
  } while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  404368:	4628      	mov	r0, r5
  40436a:	47b0      	blx	r6
  40436c:	2c09      	cmp	r4, #9
  40436e:	d81b      	bhi.n	4043a8 <mxt_handler+0x60>
  404370:	b1d0      	cbz	r0, 4043a8 <mxt_handler+0x60>
    if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  404372:	a901      	add	r1, sp, #4
  404374:	4628      	mov	r0, r5
  404376:	47b8      	blx	r7
  404378:	2800      	cmp	r0, #0
  40437a:	d1f5      	bne.n	404368 <mxt_handler+0x20>
    if(first == 0 ){
  40437c:	f1ba 0f00 	cmp.w	sl, #0
  404380:	d1ee      	bne.n	404360 <mxt_handler+0x18>
      *x = convert_axis_system_x(touch_event.y);
  404382:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH*touch_y/4096;
  404386:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40438a:	f3c3 1393 	ubfx	r3, r3, #6, #20
  40438e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
      *x = convert_axis_system_x(touch_event.y);
  404392:	f8c9 3000 	str.w	r3, [r9]
      *y = convert_axis_system_y(touch_event.x);
  404396:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  return ILI9488_LCD_HEIGHT*touch_x/4096;
  40439a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40439e:	f3c3 13d3 	ubfx	r3, r3, #7, #20
      *y = convert_axis_system_y(touch_event.x);
  4043a2:	f8c8 3000 	str.w	r3, [r8]
  4043a6:	e7db      	b.n	404360 <mxt_handler+0x18>
}
  4043a8:	b004      	add	sp, #16
  4043aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4043ae:	bf00      	nop
  4043b0:	004007f5 	.word	0x004007f5
  4043b4:	00400785 	.word	0x00400785

004043b8 <task_mxt>:
void task_mxt(void){
  4043b8:	b580      	push	{r7, lr}
  4043ba:	b08a      	sub	sp, #40	; 0x28
  mxt_init(&device);       	/* Initialize the mXT touch device */
  4043bc:	a802      	add	r0, sp, #8
  4043be:	4b13      	ldr	r3, [pc, #76]	; (40440c <task_mxt+0x54>)
  4043c0:	4798      	blx	r3
    if (mxt_is_message_pending(&device)) {
  4043c2:	4d13      	ldr	r5, [pc, #76]	; (404410 <task_mxt+0x58>)
      mxt_handler(&device, &touch.x, &touch.y);
  4043c4:	4e13      	ldr	r6, [pc, #76]	; (404414 <task_mxt+0x5c>)
      xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  4043c6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 404420 <task_mxt+0x68>
      vTaskDelay(200);
  4043ca:	4c13      	ldr	r4, [pc, #76]	; (404418 <task_mxt+0x60>)
  4043cc:	e00c      	b.n	4043e8 <task_mxt+0x30>
        mxt_handler(&device, NULL, NULL);
  4043ce:	2200      	movs	r2, #0
  4043d0:	4611      	mov	r1, r2
  4043d2:	a802      	add	r0, sp, #8
  4043d4:	47b0      	blx	r6
        vTaskDelay(50);
  4043d6:	2032      	movs	r0, #50	; 0x32
  4043d8:	47a0      	blx	r4
      while (mxt_is_message_pending(&device)){
  4043da:	a802      	add	r0, sp, #8
  4043dc:	47a8      	blx	r5
  4043de:	2800      	cmp	r0, #0
  4043e0:	d1f5      	bne.n	4043ce <task_mxt+0x16>
    vTaskDelay(300);
  4043e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
  4043e6:	47a0      	blx	r4
    if (mxt_is_message_pending(&device)) {
  4043e8:	a802      	add	r0, sp, #8
  4043ea:	47a8      	blx	r5
  4043ec:	2800      	cmp	r0, #0
  4043ee:	d0f8      	beq.n	4043e2 <task_mxt+0x2a>
      mxt_handler(&device, &touch.x, &touch.y);
  4043f0:	aa01      	add	r2, sp, #4
  4043f2:	4669      	mov	r1, sp
  4043f4:	a802      	add	r0, sp, #8
  4043f6:	47b0      	blx	r6
      xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  4043f8:	2300      	movs	r3, #0
  4043fa:	461a      	mov	r2, r3
  4043fc:	4669      	mov	r1, sp
  4043fe:	f8d8 0000 	ldr.w	r0, [r8]
  404402:	4f06      	ldr	r7, [pc, #24]	; (40441c <task_mxt+0x64>)
  404404:	47b8      	blx	r7
      vTaskDelay(200);
  404406:	20c8      	movs	r0, #200	; 0xc8
  404408:	47a0      	blx	r4
      while (mxt_is_message_pending(&device)){
  40440a:	e7e6      	b.n	4043da <task_mxt+0x22>
  40440c:	00400291 	.word	0x00400291
  404410:	00400785 	.word	0x00400785
  404414:	00404349 	.word	0x00404349
  404418:	00403389 	.word	0x00403389
  40441c:	0040279d 	.word	0x0040279d
  404420:	2040ca4c 	.word	0x2040ca4c

00404424 <RTC_Handler>:
void RTC_Handler(void){
  404424:	b530      	push	{r4, r5, lr}
  404426:	b083      	sub	sp, #12
	uint32_t ul_status = rtc_get_status(RTC);
  404428:	481b      	ldr	r0, [pc, #108]	; (404498 <RTC_Handler+0x74>)
  40442a:	4b1c      	ldr	r3, [pc, #112]	; (40449c <RTC_Handler+0x78>)
  40442c:	4798      	blx	r3
  40442e:	4604      	mov	r4, r0
	if (flag_return) {
  404430:	4b1b      	ldr	r3, [pc, #108]	; (4044a0 <RTC_Handler+0x7c>)
  404432:	781b      	ldrb	r3, [r3, #0]
  404434:	b11b      	cbz	r3, 40443e <RTC_Handler+0x1a>
		second ++;
  404436:	4a1b      	ldr	r2, [pc, #108]	; (4044a4 <RTC_Handler+0x80>)
  404438:	6813      	ldr	r3, [r2, #0]
  40443a:	3301      	adds	r3, #1
  40443c:	6013      	str	r3, [r2, #0]
	second_sleep ++;
  40443e:	4a1a      	ldr	r2, [pc, #104]	; (4044a8 <RTC_Handler+0x84>)
  404440:	6813      	ldr	r3, [r2, #0]
  404442:	3301      	adds	r3, #1
  404444:	6013      	str	r3, [r2, #0]
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC){
  404446:	f014 0f04 	tst.w	r4, #4
  40444a:	d112      	bne.n	404472 <RTC_Handler+0x4e>
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM){
  40444c:	f014 0f02 	tst.w	r4, #2
  404450:	d11c      	bne.n	40448c <RTC_Handler+0x68>
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  404452:	4d11      	ldr	r5, [pc, #68]	; (404498 <RTC_Handler+0x74>)
  404454:	2101      	movs	r1, #1
  404456:	4628      	mov	r0, r5
  404458:	4c14      	ldr	r4, [pc, #80]	; (4044ac <RTC_Handler+0x88>)
  40445a:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  40445c:	2108      	movs	r1, #8
  40445e:	4628      	mov	r0, r5
  404460:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  404462:	2110      	movs	r1, #16
  404464:	4628      	mov	r0, r5
  404466:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  404468:	2120      	movs	r1, #32
  40446a:	4628      	mov	r0, r5
  40446c:	47a0      	blx	r4
}
  40446e:	b003      	add	sp, #12
  404470:	bd30      	pop	{r4, r5, pc}
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  404472:	a902      	add	r1, sp, #8
  404474:	2300      	movs	r3, #0
  404476:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphore_1, &xHigherPriorityTaskWoken);
  40447a:	4b0d      	ldr	r3, [pc, #52]	; (4044b0 <RTC_Handler+0x8c>)
  40447c:	6818      	ldr	r0, [r3, #0]
  40447e:	4b0d      	ldr	r3, [pc, #52]	; (4044b4 <RTC_Handler+0x90>)
  404480:	4798      	blx	r3
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  404482:	2104      	movs	r1, #4
  404484:	4804      	ldr	r0, [pc, #16]	; (404498 <RTC_Handler+0x74>)
  404486:	4b09      	ldr	r3, [pc, #36]	; (4044ac <RTC_Handler+0x88>)
  404488:	4798      	blx	r3
  40448a:	e7df      	b.n	40444c <RTC_Handler+0x28>
		rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  40448c:	2102      	movs	r1, #2
  40448e:	4802      	ldr	r0, [pc, #8]	; (404498 <RTC_Handler+0x74>)
  404490:	4b06      	ldr	r3, [pc, #24]	; (4044ac <RTC_Handler+0x88>)
  404492:	4798      	blx	r3
  404494:	e7dd      	b.n	404452 <RTC_Handler+0x2e>
  404496:	bf00      	nop
  404498:	400e1860 	.word	0x400e1860
  40449c:	00400285 	.word	0x00400285
  4044a0:	2040c910 	.word	0x2040c910
  4044a4:	2040c928 	.word	0x2040c928
  4044a8:	2040c92c 	.word	0x2040c92c
  4044ac:	00400289 	.word	0x00400289
  4044b0:	2040ca38 	.word	0x2040ca38
  4044b4:	00402a81 	.word	0x00402a81

004044b8 <RTT_Handler>:
{
  4044b8:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  4044ba:	4805      	ldr	r0, [pc, #20]	; (4044d0 <RTT_Handler+0x18>)
  4044bc:	4b05      	ldr	r3, [pc, #20]	; (4044d4 <RTT_Handler+0x1c>)
  4044be:	4798      	blx	r3
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  4044c0:	f010 0f01 	tst.w	r0, #1
  4044c4:	d002      	beq.n	4044cc <RTT_Handler+0x14>
		flag_rtt = true; 
  4044c6:	2201      	movs	r2, #1
  4044c8:	4b03      	ldr	r3, [pc, #12]	; (4044d8 <RTT_Handler+0x20>)
  4044ca:	701a      	strb	r2, [r3, #0]
  4044cc:	bd08      	pop	{r3, pc}
  4044ce:	bf00      	nop
  4044d0:	400e1830 	.word	0x400e1830
  4044d4:	0040028d 	.word	0x0040028d
  4044d8:	2040c911 	.word	0x2040c911

004044dc <process_touch>:
		}
	}
	return 0;
}

int process_touch(t_but button, touchData touch){
  4044dc:	b084      	sub	sp, #16
  4044de:	b470      	push	{r4, r5, r6}
  4044e0:	ac03      	add	r4, sp, #12
  4044e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  4044e6:	9e07      	ldr	r6, [sp, #28]
  4044e8:	9908      	ldr	r1, [sp, #32]
  4044ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4044ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (button.y - (button.height/2) <= touch.y && button.y + (button.height/2) >= touch.y) {
  4044ee:	9b04      	ldr	r3, [sp, #16]
  4044f0:	085b      	lsrs	r3, r3, #1
  4044f2:	1acc      	subs	r4, r1, r3
  4044f4:	4294      	cmp	r4, r2
  4044f6:	d80c      	bhi.n	404512 <process_touch+0x36>
  4044f8:	440b      	add	r3, r1
  4044fa:	4293      	cmp	r3, r2
  4044fc:	d30d      	bcc.n	40451a <process_touch+0x3e>
		if (button.x - (button.width/2) <= touch.x && button.x + (button.width/2) >= touch.x){
  4044fe:	0840      	lsrs	r0, r0, #1
  404500:	1a33      	subs	r3, r6, r0
  404502:	42ab      	cmp	r3, r5
  404504:	d80b      	bhi.n	40451e <process_touch+0x42>
  404506:	4430      	add	r0, r6
  404508:	42a8      	cmp	r0, r5
  40450a:	bf34      	ite	cc
  40450c:	2000      	movcc	r0, #0
  40450e:	2001      	movcs	r0, #1
  404510:	e000      	b.n	404514 <process_touch+0x38>
			return 1;
		}
	}
	return 0;
  404512:	2000      	movs	r0, #0
}
  404514:	bc70      	pop	{r4, r5, r6}
  404516:	b004      	add	sp, #16
  404518:	4770      	bx	lr
	return 0;
  40451a:	2000      	movs	r0, #0
  40451c:	e7fa      	b.n	404514 <process_touch+0x38>
  40451e:	2000      	movs	r0, #0
  404520:	e7f8      	b.n	404514 <process_touch+0x38>
	...

00404524 <task_lcd>:
}




void task_lcd(void){
  404524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404528:	b089      	sub	sp, #36	; 0x24
	xQueueTouch = xQueueCreate( 10, sizeof( touchData ) );
  40452a:	2200      	movs	r2, #0
  40452c:	2108      	movs	r1, #8
  40452e:	200a      	movs	r0, #10
  404530:	4b97      	ldr	r3, [pc, #604]	; (404790 <task_lcd+0x26c>)
  404532:	4798      	blx	r3
  404534:	4b97      	ldr	r3, [pc, #604]	; (404794 <task_lcd+0x270>)
  404536:	6018      	str	r0, [r3, #0]
  g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  404538:	4897      	ldr	r0, [pc, #604]	; (404798 <task_lcd+0x274>)
  40453a:	f44f 73a0 	mov.w	r3, #320	; 0x140
  40453e:	6003      	str	r3, [r0, #0]
  g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  404540:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  404544:	6043      	str	r3, [r0, #4]
  g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  404546:	4b95      	ldr	r3, [pc, #596]	; (40479c <task_lcd+0x278>)
  404548:	6083      	str	r3, [r0, #8]
  g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  40454a:	60c3      	str	r3, [r0, #12]
  ili9488_init(&g_ili9488_display_opt);
  40454c:	4b94      	ldr	r3, [pc, #592]	; (4047a0 <task_lcd+0x27c>)
  40454e:	4798      	blx	r3
	configure_lcd();
	draw_screen(0);
  404550:	2000      	movs	r0, #0
  404552:	4b94      	ldr	r3, [pc, #592]	; (4047a4 <task_lcd+0x280>)
  404554:	4798      	blx	r3
// 	
// 	double speeds[2] = {0.0, 0.0};
// 	int speed_index = 0;
// 		

		draw_button_square(but0);
  404556:	4c94      	ldr	r4, [pc, #592]	; (4047a8 <task_lcd+0x284>)
  404558:	f104 0310 	add.w	r3, r4, #16
  40455c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40455e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404562:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  404566:	4c91      	ldr	r4, [pc, #580]	; (4047ac <task_lcd+0x288>)
  404568:	47a0      	blx	r4
		draw_button_square(but1);
  40456a:	4d91      	ldr	r5, [pc, #580]	; (4047b0 <task_lcd+0x28c>)
  40456c:	f105 0310 	add.w	r3, r5, #16
  404570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404572:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404576:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  40457a:	47a0      	blx	r4
		draw_button_square(but2);
  40457c:	4d8d      	ldr	r5, [pc, #564]	; (4047b4 <task_lcd+0x290>)
  40457e:	f105 0310 	add.w	r3, r5, #16
  404582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404584:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404588:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  40458c:	47a0      	blx	r4
		draw_button_square(but3);
  40458e:	4d8a      	ldr	r5, [pc, #552]	; (4047b8 <task_lcd+0x294>)
  404590:	f105 0310 	add.w	r3, r5, #16
  404594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404596:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  40459a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  40459e:	47a0      	blx	r4
		draw_button_square(but4);
  4045a0:	4d86      	ldr	r5, [pc, #536]	; (4047bc <task_lcd+0x298>)
  4045a2:	f105 0310 	add.w	r3, r5, #16
  4045a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4045a8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4045ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  4045b0:	47a0      	blx	r4
		draw_button_square(but5);
  4045b2:	4d83      	ldr	r5, [pc, #524]	; (4047c0 <task_lcd+0x29c>)
  4045b4:	f105 0310 	add.w	r3, r5, #16
  4045b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4045ba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4045be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  4045c2:	47a0      	blx	r4
		draw_button_square(but6);
  4045c4:	4d7f      	ldr	r5, [pc, #508]	; (4047c4 <task_lcd+0x2a0>)
  4045c6:	f105 0310 	add.w	r3, r5, #16
  4045ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4045cc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4045d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  4045d4:	47a0      	blx	r4
		draw_button_square(but7);
  4045d6:	4d7c      	ldr	r5, [pc, #496]	; (4047c8 <task_lcd+0x2a4>)
  4045d8:	f105 0310 	add.w	r3, r5, #16
  4045dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4045de:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4045e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  4045e6:	47a0      	blx	r4
		draw_button_square(but8);
  4045e8:	4d78      	ldr	r5, [pc, #480]	; (4047cc <task_lcd+0x2a8>)
  4045ea:	f105 0310 	add.w	r3, r5, #16
  4045ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4045f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4045f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  4045f8:	47a0      	blx	r4
		draw_button_square(but9);
  4045fa:	4d75      	ldr	r5, [pc, #468]	; (4047d0 <task_lcd+0x2ac>)
  4045fc:	f105 0310 	add.w	r3, r5, #16
  404600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404602:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404606:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  40460a:	47a0      	blx	r4
		draw_button_square(butx);
  40460c:	4d71      	ldr	r5, [pc, #452]	; (4047d4 <task_lcd+0x2b0>)
  40460e:	f105 0310 	add.w	r3, r5, #16
  404612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404614:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404618:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  40461c:	47a0      	blx	r4
		draw_button_square(butclear);
  40461e:	4d6e      	ldr	r5, [pc, #440]	; (4047d8 <task_lcd+0x2b4>)
  404620:	f105 0310 	add.w	r3, r5, #16
  404624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404626:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  40462a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  40462e:	47a0      	blx	r4
		
// 		printf("%d",flag_return);
// 		printf("%d" ,second);

		
		if (flag_return == 1) {
  404630:	4f6a      	ldr	r7, [pc, #424]	; (4047dc <task_lcd+0x2b8>)
			
			vTaskDelay(1000);
  404632:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 4047f8 <task_lcd+0x2d4>
			
			draw_screen(0);

			draw_button_square(but0);
  404636:	4c5c      	ldr	r4, [pc, #368]	; (4047a8 <task_lcd+0x284>)
  404638:	f104 0510 	add.w	r5, r4, #16
			draw_button_square(but1);
  40463c:	4b5c      	ldr	r3, [pc, #368]	; (4047b0 <task_lcd+0x28c>)
  40463e:	f103 0b10 	add.w	fp, r3, #16
  404642:	e231      	b.n	404aa8 <task_lcd+0x584>
			vTaskDelay(1000);
  404644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  404648:	47c0      	blx	r8
			draw_screen(0);
  40464a:	2000      	movs	r0, #0
  40464c:	4b55      	ldr	r3, [pc, #340]	; (4047a4 <task_lcd+0x280>)
  40464e:	4798      	blx	r3
			draw_button_square(but0);
  404650:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  404654:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404658:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  40465c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 4047ac <task_lcd+0x288>
  404660:	47c8      	blx	r9
			draw_button_square(but1);
  404662:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
  404666:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  40466a:	4b51      	ldr	r3, [pc, #324]	; (4047b0 <task_lcd+0x28c>)
  40466c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40466e:	47c8      	blx	r9
			draw_button_square(but2);
  404670:	f8df e140 	ldr.w	lr, [pc, #320]	; 4047b4 <task_lcd+0x290>
  404674:	f10e 0310 	add.w	r3, lr, #16
  404678:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40467a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  40467e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  404682:	47c8      	blx	r9
			draw_button_square(but3);
  404684:	f8df e130 	ldr.w	lr, [pc, #304]	; 4047b8 <task_lcd+0x294>
  404688:	f10e 0310 	add.w	r3, lr, #16
  40468c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40468e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404692:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  404696:	47c8      	blx	r9
			draw_button_square(but4);
  404698:	f8df e120 	ldr.w	lr, [pc, #288]	; 4047bc <task_lcd+0x298>
  40469c:	f10e 0310 	add.w	r3, lr, #16
  4046a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4046a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4046a6:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  4046aa:	47c8      	blx	r9
			draw_button_square(but5);
  4046ac:	f8df e110 	ldr.w	lr, [pc, #272]	; 4047c0 <task_lcd+0x29c>
  4046b0:	f10e 0310 	add.w	r3, lr, #16
  4046b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4046b6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4046ba:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  4046be:	47c8      	blx	r9
			draw_button_square(but6);
  4046c0:	f8df e100 	ldr.w	lr, [pc, #256]	; 4047c4 <task_lcd+0x2a0>
  4046c4:	f10e 0310 	add.w	r3, lr, #16
  4046c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4046ca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4046ce:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  4046d2:	47c8      	blx	r9
			draw_button_square(but7);
  4046d4:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 4047c8 <task_lcd+0x2a4>
  4046d8:	f10e 0310 	add.w	r3, lr, #16
  4046dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4046de:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4046e2:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  4046e6:	47c8      	blx	r9
			draw_button_square(but8);
  4046e8:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 4047cc <task_lcd+0x2a8>
  4046ec:	f10e 0310 	add.w	r3, lr, #16
  4046f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4046f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4046f6:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  4046fa:	47c8      	blx	r9
			draw_button_square(but9);
  4046fc:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 4047d0 <task_lcd+0x2ac>
  404700:	f10e 0310 	add.w	r3, lr, #16
  404704:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404706:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  40470a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  40470e:	47c8      	blx	r9
			draw_button_square(butx);
  404710:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 4047d4 <task_lcd+0x2b0>
  404714:	f10e 0310 	add.w	r3, lr, #16
  404718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40471a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  40471e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  404722:	47c8      	blx	r9
			draw_button_square(butclear);
  404724:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 4047d8 <task_lcd+0x2b4>
  404728:	f10e 0310 	add.w	r3, lr, #16
  40472c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40472e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404732:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  404736:	47c8      	blx	r9
			// font_draw_text(&calibri_23, "7", but7.x, but7.y, 1);
			// font_draw_text(&calibri_23, "8", but8.x, but8.y, 1);
			// font_draw_text(&calibri_23, "9", but9.x, but9.y, 1);
			// font_draw_text(&calibri_23, "*", butx.x, butx.y, 1);

			flag_return = 0;
  404738:	2300      	movs	r3, #0
  40473a:	703b      	strb	r3, [r7, #0]
  40473c:	e1b9      	b.n	404ab2 <task_lcd+0x58e>
				draw_button_square(but0);
			
				
				if (counter == 4) {
					for (int i = 0; i < counter; i++) {
						pass_temp[i] = 0;
  40473e:	4a28      	ldr	r2, [pc, #160]	; (4047e0 <task_lcd+0x2bc>)
  404740:	2300      	movs	r3, #0
  404742:	6013      	str	r3, [r2, #0]
  404744:	6053      	str	r3, [r2, #4]
  404746:	6093      	str	r3, [r2, #8]
  404748:	60d3      	str	r3, [r2, #12]
					}
					counter = 0;
  40474a:	4a26      	ldr	r2, [pc, #152]	; (4047e4 <task_lcd+0x2c0>)
  40474c:	6013      	str	r3, [r2, #0]
  40474e:	e1ef      	b.n	404b30 <task_lcd+0x60c>
				}
				
				draw_screen_asterisk();

				if (counter == 1) {
					font_draw_text(&calibri_23, "*", 130, 450, 1);
  404750:	9300      	str	r3, [sp, #0]
  404752:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404756:	2282      	movs	r2, #130	; 0x82
  404758:	4923      	ldr	r1, [pc, #140]	; (4047e8 <task_lcd+0x2c4>)
  40475a:	4824      	ldr	r0, [pc, #144]	; (4047ec <task_lcd+0x2c8>)
  40475c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 4047fc <task_lcd+0x2d8>
  404760:	47c8      	blx	r9
  404762:	e1a1      	b.n	404aa8 <task_lcd+0x584>
					} else if (counter == 2) {
					font_draw_text(&calibri_23, "**", 130, 450, 1);
  404764:	2301      	movs	r3, #1
  404766:	9300      	str	r3, [sp, #0]
  404768:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  40476c:	2282      	movs	r2, #130	; 0x82
  40476e:	4920      	ldr	r1, [pc, #128]	; (4047f0 <task_lcd+0x2cc>)
  404770:	481e      	ldr	r0, [pc, #120]	; (4047ec <task_lcd+0x2c8>)
  404772:	f8df 9088 	ldr.w	r9, [pc, #136]	; 4047fc <task_lcd+0x2d8>
  404776:	47c8      	blx	r9
  404778:	e196      	b.n	404aa8 <task_lcd+0x584>
					} else if (counter == 3) {
					font_draw_text(&calibri_23, "***", 130, 450, 1);
  40477a:	2301      	movs	r3, #1
  40477c:	9300      	str	r3, [sp, #0]
  40477e:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404782:	2282      	movs	r2, #130	; 0x82
  404784:	491b      	ldr	r1, [pc, #108]	; (4047f4 <task_lcd+0x2d0>)
  404786:	4819      	ldr	r0, [pc, #100]	; (4047ec <task_lcd+0x2c8>)
  404788:	f8df 9070 	ldr.w	r9, [pc, #112]	; 4047fc <task_lcd+0x2d8>
  40478c:	47c8      	blx	r9
  40478e:	e18b      	b.n	404aa8 <task_lcd+0x584>
  404790:	00402721 	.word	0x00402721
  404794:	2040ca4c 	.word	0x2040ca4c
  404798:	2040ca3c 	.word	0x2040ca3c
  40479c:	00fcfcfc 	.word	0x00fcfcfc
  4047a0:	00401061 	.word	0x00401061
  4047a4:	00404065 	.word	0x00404065
  4047a8:	20400014 	.word	0x20400014
  4047ac:	00404155 	.word	0x00404155
  4047b0:	20400034 	.word	0x20400034
  4047b4:	20400054 	.word	0x20400054
  4047b8:	20400074 	.word	0x20400074
  4047bc:	20400094 	.word	0x20400094
  4047c0:	204000b4 	.word	0x204000b4
  4047c4:	204000d4 	.word	0x204000d4
  4047c8:	204000f4 	.word	0x204000f4
  4047cc:	20400114 	.word	0x20400114
  4047d0:	20400134 	.word	0x20400134
  4047d4:	20400174 	.word	0x20400174
  4047d8:	20400154 	.word	0x20400154
  4047dc:	2040c910 	.word	0x2040c910
  4047e0:	2040c914 	.word	0x2040c914
  4047e4:	2040c900 	.word	0x2040c900
  4047e8:	0040966c 	.word	0x0040966c
  4047ec:	00408d50 	.word	0x00408d50
  4047f0:	0041b92c 	.word	0x0041b92c
  4047f4:	0041b930 	.word	0x0041b930
  4047f8:	00403389 	.word	0x00403389
  4047fc:	004040f5 	.word	0x004040f5
					} else if (counter == 4) {
					font_draw_text(&calibri_23, "****", 130, 450, 1);
				}
			}
			else if(process_touch(but1, touch)) {
  404800:	ab04      	add	r3, sp, #16
  404802:	aa08      	add	r2, sp, #32
  404804:	e912 0003 	ldmdb	r2, {r0, r1}
  404808:	e883 0003 	stmia.w	r3, {r0, r1}
  40480c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
  404810:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404814:	4b7c      	ldr	r3, [pc, #496]	; (404a08 <task_lcd+0x4e4>)
  404816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404818:	f8df 9200 	ldr.w	r9, [pc, #512]	; 404a1c <task_lcd+0x4f8>
  40481c:	47c8      	blx	r9
  40481e:	2800      	cmp	r0, #0
  404820:	f040 8112 	bne.w	404a48 <task_lcd+0x524>
				} else if (counter == 4) {
					font_draw_text(&calibri_23, "****", 130, 450, 1);
				}
			}
			
			else if(process_touch(but2, touch)) {
  404824:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 404a20 <task_lcd+0x4fc>
  404828:	ab04      	add	r3, sp, #16
  40482a:	aa08      	add	r2, sp, #32
  40482c:	e912 0003 	ldmdb	r2, {r0, r1}
  404830:	e883 0003 	stmia.w	r3, {r0, r1}
  404834:	f10e 0310 	add.w	r3, lr, #16
  404838:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40483a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  40483e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  404842:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 404a1c <task_lcd+0x4f8>
  404846:	47c8      	blx	r9
  404848:	2800      	cmp	r0, #0
  40484a:	f040 81bf 	bne.w	404bcc <task_lcd+0x6a8>
				} else if (counter == 4) {
					font_draw_text(&calibri_23, "****", 130, 450, 1);
				}
			}
			
			else if(process_touch(but3, touch)) {
  40484e:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 404a24 <task_lcd+0x500>
  404852:	ab04      	add	r3, sp, #16
  404854:	aa08      	add	r2, sp, #32
  404856:	e912 0003 	ldmdb	r2, {r0, r1}
  40485a:	e883 0003 	stmia.w	r3, {r0, r1}
  40485e:	f10e 0310 	add.w	r3, lr, #16
  404862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404864:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404868:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  40486c:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 404a1c <task_lcd+0x4f8>
  404870:	47c8      	blx	r9
  404872:	2800      	cmp	r0, #0
  404874:	f040 8211 	bne.w	404c9a <task_lcd+0x776>
					font_draw_text(&calibri_23, "***", 130, 450, 1);
				} else if (counter == 4) {
					font_draw_text(&calibri_23, "****", 130, 450, 1);
				}
			}
			else if(process_touch(but4, touch)) {
  404878:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 404a28 <task_lcd+0x504>
  40487c:	ab04      	add	r3, sp, #16
  40487e:	aa08      	add	r2, sp, #32
  404880:	e912 0003 	ldmdb	r2, {r0, r1}
  404884:	e883 0003 	stmia.w	r3, {r0, r1}
  404888:	f10e 0310 	add.w	r3, lr, #16
  40488c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40488e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404892:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  404896:	f8df 9184 	ldr.w	r9, [pc, #388]	; 404a1c <task_lcd+0x4f8>
  40489a:	47c8      	blx	r9
  40489c:	2800      	cmp	r0, #0
  40489e:	f040 8284 	bne.w	404daa <task_lcd+0x886>
				} else if (counter == 4) {
					font_draw_text(&calibri_23, "****", 130, 450, 1);
				}
			}
			
			else if(process_touch(but5, touch)) {
  4048a2:	f8df e188 	ldr.w	lr, [pc, #392]	; 404a2c <task_lcd+0x508>
  4048a6:	ab04      	add	r3, sp, #16
  4048a8:	aa08      	add	r2, sp, #32
  4048aa:	e912 0003 	ldmdb	r2, {r0, r1}
  4048ae:	e883 0003 	stmia.w	r3, {r0, r1}
  4048b2:	f10e 0310 	add.w	r3, lr, #16
  4048b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4048b8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4048bc:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  4048c0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404a1c <task_lcd+0x4f8>
  4048c4:	47c8      	blx	r9
  4048c6:	2800      	cmp	r0, #0
  4048c8:	f040 82d6 	bne.w	404e78 <task_lcd+0x954>
				} else if (counter == 4) {
					font_draw_text(&calibri_23, "****", 130, 450, 1);
				}
			}
			
			else if(process_touch(but6, touch)) {
  4048cc:	f8df e160 	ldr.w	lr, [pc, #352]	; 404a30 <task_lcd+0x50c>
  4048d0:	ab04      	add	r3, sp, #16
  4048d2:	aa08      	add	r2, sp, #32
  4048d4:	e912 0003 	ldmdb	r2, {r0, r1}
  4048d8:	e883 0003 	stmia.w	r3, {r0, r1}
  4048dc:	f10e 0310 	add.w	r3, lr, #16
  4048e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4048e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4048e6:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  4048ea:	f8df 9130 	ldr.w	r9, [pc, #304]	; 404a1c <task_lcd+0x4f8>
  4048ee:	47c8      	blx	r9
  4048f0:	2800      	cmp	r0, #0
  4048f2:	f040 8328 	bne.w	404f46 <task_lcd+0xa22>
				} else if (counter == 4) {
					font_draw_text(&calibri_23, "****", 130, 450, 1);
				}
			}
			
			else if(process_touch(but7, touch)) {
  4048f6:	f8df e13c 	ldr.w	lr, [pc, #316]	; 404a34 <task_lcd+0x510>
  4048fa:	ab04      	add	r3, sp, #16
  4048fc:	aa08      	add	r2, sp, #32
  4048fe:	e912 0003 	ldmdb	r2, {r0, r1}
  404902:	e883 0003 	stmia.w	r3, {r0, r1}
  404906:	f10e 0310 	add.w	r3, lr, #16
  40490a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40490c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404910:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  404914:	f8df 9104 	ldr.w	r9, [pc, #260]	; 404a1c <task_lcd+0x4f8>
  404918:	47c8      	blx	r9
  40491a:	2800      	cmp	r0, #0
  40491c:	f040 8394 	bne.w	405048 <task_lcd+0xb24>
				} else if (counter == 4) {
					font_draw_text(&calibri_23, "****", 130, 450, 1);
				}
			}
			
			else if(process_touch(but8, touch)) {
  404920:	f8df e114 	ldr.w	lr, [pc, #276]	; 404a38 <task_lcd+0x514>
  404924:	ab04      	add	r3, sp, #16
  404926:	aa08      	add	r2, sp, #32
  404928:	e912 0003 	ldmdb	r2, {r0, r1}
  40492c:	e883 0003 	stmia.w	r3, {r0, r1}
  404930:	f10e 0310 	add.w	r3, lr, #16
  404934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404936:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  40493a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  40493e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 404a1c <task_lcd+0x4f8>
  404942:	47c8      	blx	r9
  404944:	2800      	cmp	r0, #0
  404946:	f040 83e6 	bne.w	405116 <task_lcd+0xbf2>
				} else if (counter == 4) {
					font_draw_text(&calibri_23, "****", 130, 450, 1);
				}
			}
			
			else if(process_touch(but9, touch)) {
  40494a:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 404a3c <task_lcd+0x518>
  40494e:	ab04      	add	r3, sp, #16
  404950:	aa08      	add	r2, sp, #32
  404952:	e912 0003 	ldmdb	r2, {r0, r1}
  404956:	e883 0003 	stmia.w	r3, {r0, r1}
  40495a:	f10e 0310 	add.w	r3, lr, #16
  40495e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404960:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404964:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  404968:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 404a1c <task_lcd+0x4f8>
  40496c:	47c8      	blx	r9
  40496e:	2800      	cmp	r0, #0
  404970:	f040 8438 	bne.w	4051e4 <task_lcd+0xcc0>
					font_draw_text(&calibri_23, "***", 130, 450, 1);
				} else if (counter == 4) {
					font_draw_text(&calibri_23, "****", 130, 450, 1);
				}
			}
			else if(process_touch(butclear, touch)) {
  404974:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 404a40 <task_lcd+0x51c>
  404978:	ab04      	add	r3, sp, #16
  40497a:	aa08      	add	r2, sp, #32
  40497c:	e912 0003 	ldmdb	r2, {r0, r1}
  404980:	e883 0003 	stmia.w	r3, {r0, r1}
  404984:	f10e 0310 	add.w	r3, lr, #16
  404988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40498a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  40498e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  404992:	f8df 9088 	ldr.w	r9, [pc, #136]	; 404a1c <task_lcd+0x4f8>
  404996:	47c8      	blx	r9
  404998:	2800      	cmp	r0, #0
  40499a:	f040 848b 	bne.w	4052b4 <task_lcd+0xd90>
				}
				counter = 0;
				draw_screen_asterisk();

			}
			else if(process_touch(butx, touch)) {
  40499e:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 404a44 <task_lcd+0x520>
  4049a2:	ab04      	add	r3, sp, #16
  4049a4:	aa08      	add	r2, sp, #32
  4049a6:	e912 0003 	ldmdb	r2, {r0, r1}
  4049aa:	e883 0003 	stmia.w	r3, {r0, r1}
  4049ae:	f10e 0310 	add.w	r3, lr, #16
  4049b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4049b4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4049b8:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  4049bc:	f8df 905c 	ldr.w	r9, [pc, #92]	; 404a1c <task_lcd+0x4f8>
  4049c0:	47c8      	blx	r9
  4049c2:	2800      	cmp	r0, #0
  4049c4:	d070      	beq.n	404aa8 <task_lcd+0x584>
				if (counter == 4) {
  4049c6:	4b11      	ldr	r3, [pc, #68]	; (404a0c <task_lcd+0x4e8>)
  4049c8:	681b      	ldr	r3, [r3, #0]
  4049ca:	2b04      	cmp	r3, #4
  4049cc:	f040 8526 	bne.w	40541c <task_lcd+0xef8>
					if (pass_temp[0] == pass[0]) {
  4049d0:	4b0f      	ldr	r3, [pc, #60]	; (404a10 <task_lcd+0x4ec>)
  4049d2:	681a      	ldr	r2, [r3, #0]
  4049d4:	4b0f      	ldr	r3, [pc, #60]	; (404a14 <task_lcd+0x4f0>)
  4049d6:	681b      	ldr	r3, [r3, #0]
  4049d8:	429a      	cmp	r2, r3
  4049da:	f000 84b5 	beq.w	405348 <task_lcd+0xe24>
								pass_temp[i] = 0;
							}
							counter = 0;
						}
					} else {
						draw_screen(1);
  4049de:	2001      	movs	r0, #1
  4049e0:	4b0d      	ldr	r3, [pc, #52]	; (404a18 <task_lcd+0x4f4>)
  4049e2:	4798      	blx	r3
						flag_return = 1;
  4049e4:	2301      	movs	r3, #1
  4049e6:	703b      	strb	r3, [r7, #0]
						for (int i = 0; i < counter; i++) {
  4049e8:	4b08      	ldr	r3, [pc, #32]	; (404a0c <task_lcd+0x4e8>)
  4049ea:	681a      	ldr	r2, [r3, #0]
  4049ec:	2a00      	cmp	r2, #0
  4049ee:	dd07      	ble.n	404a00 <task_lcd+0x4dc>
  4049f0:	4b07      	ldr	r3, [pc, #28]	; (404a10 <task_lcd+0x4ec>)
  4049f2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
							pass_temp[i] = 0;
  4049f6:	2100      	movs	r1, #0
  4049f8:	f843 1b04 	str.w	r1, [r3], #4
						for (int i = 0; i < counter; i++) {
  4049fc:	4293      	cmp	r3, r2
  4049fe:	d1fb      	bne.n	4049f8 <task_lcd+0x4d4>
						}
						counter = 0;
  404a00:	2200      	movs	r2, #0
  404a02:	4b02      	ldr	r3, [pc, #8]	; (404a0c <task_lcd+0x4e8>)
  404a04:	601a      	str	r2, [r3, #0]
  404a06:	e04f      	b.n	404aa8 <task_lcd+0x584>
  404a08:	20400034 	.word	0x20400034
  404a0c:	2040c900 	.word	0x2040c900
  404a10:	2040c914 	.word	0x2040c914
  404a14:	20400194 	.word	0x20400194
  404a18:	00404065 	.word	0x00404065
  404a1c:	004044dd 	.word	0x004044dd
  404a20:	20400054 	.word	0x20400054
  404a24:	20400074 	.word	0x20400074
  404a28:	20400094 	.word	0x20400094
  404a2c:	204000b4 	.word	0x204000b4
  404a30:	204000d4 	.word	0x204000d4
  404a34:	204000f4 	.word	0x204000f4
  404a38:	20400114 	.word	0x20400114
  404a3c:	20400134 	.word	0x20400134
  404a40:	20400154 	.word	0x20400154
  404a44:	20400174 	.word	0x20400174
				but1.status = 1;
  404a48:	2301      	movs	r3, #1
  404a4a:	4ab3      	ldr	r2, [pc, #716]	; (404d18 <task_lcd+0x7f4>)
  404a4c:	7613      	strb	r3, [r2, #24]
				draw_button_square(but1);
  404a4e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
  404a52:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404a56:	4bb0      	ldr	r3, [pc, #704]	; (404d18 <task_lcd+0x7f4>)
  404a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404a5a:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 404d40 <task_lcd+0x81c>
  404a5e:	47c8      	blx	r9
				vTaskDelay(100);
  404a60:	2064      	movs	r0, #100	; 0x64
  404a62:	47c0      	blx	r8
				but1.status = 0;
  404a64:	2300      	movs	r3, #0
  404a66:	4aac      	ldr	r2, [pc, #688]	; (404d18 <task_lcd+0x7f4>)
  404a68:	7613      	strb	r3, [r2, #24]
				draw_button_square(but1);
  404a6a:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
  404a6e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404a72:	4ba9      	ldr	r3, [pc, #676]	; (404d18 <task_lcd+0x7f4>)
  404a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404a76:	47c8      	blx	r9
				if (counter == 4) {
  404a78:	4ba8      	ldr	r3, [pc, #672]	; (404d1c <task_lcd+0x7f8>)
  404a7a:	681b      	ldr	r3, [r3, #0]
  404a7c:	2b04      	cmp	r3, #4
  404a7e:	d071      	beq.n	404b64 <task_lcd+0x640>
					pass_temp[counter] = 1;
  404a80:	2101      	movs	r1, #1
  404a82:	4aa7      	ldr	r2, [pc, #668]	; (404d20 <task_lcd+0x7fc>)
  404a84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter++;
  404a88:	440b      	add	r3, r1
  404a8a:	4aa4      	ldr	r2, [pc, #656]	; (404d1c <task_lcd+0x7f8>)
  404a8c:	6013      	str	r3, [r2, #0]
				draw_screen_asterisk();
  404a8e:	4ba5      	ldr	r3, [pc, #660]	; (404d24 <task_lcd+0x800>)
  404a90:	4798      	blx	r3
				if (counter == 1) {
  404a92:	4ba2      	ldr	r3, [pc, #648]	; (404d1c <task_lcd+0x7f8>)
  404a94:	681b      	ldr	r3, [r3, #0]
  404a96:	2b01      	cmp	r3, #1
  404a98:	d06d      	beq.n	404b76 <task_lcd+0x652>
				} else if (counter == 2) {
  404a9a:	2b02      	cmp	r3, #2
  404a9c:	d075      	beq.n	404b8a <task_lcd+0x666>
				} else if (counter == 3) {
  404a9e:	2b03      	cmp	r3, #3
  404aa0:	d07e      	beq.n	404ba0 <task_lcd+0x67c>
				} else if (counter == 4) {
  404aa2:	2b04      	cmp	r3, #4
  404aa4:	f000 8087 	beq.w	404bb6 <task_lcd+0x692>
		if (flag_return == 1) {
  404aa8:	783b      	ldrb	r3, [r7, #0]
  404aaa:	b2db      	uxtb	r3, r3
  404aac:	2b01      	cmp	r3, #1
  404aae:	f43f adc9 	beq.w	404644 <task_lcd+0x120>
		if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  404ab2:	2300      	movs	r3, #0
  404ab4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  404ab8:	a906      	add	r1, sp, #24
  404aba:	489b      	ldr	r0, [pc, #620]	; (404d28 <task_lcd+0x804>)
  404abc:	6800      	ldr	r0, [r0, #0]
  404abe:	f8df 9284 	ldr.w	r9, [pc, #644]	; 404d44 <task_lcd+0x820>
  404ac2:	47c8      	blx	r9
  404ac4:	2800      	cmp	r0, #0
  404ac6:	d0ef      	beq.n	404aa8 <task_lcd+0x584>
			if(process_touch(but0, touch)) {
  404ac8:	ab04      	add	r3, sp, #16
  404aca:	aa08      	add	r2, sp, #32
  404acc:	e912 0003 	ldmdb	r2, {r0, r1}
  404ad0:	e883 0003 	stmia.w	r3, {r0, r1}
  404ad4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  404ad8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404adc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  404ae0:	f8df 9264 	ldr.w	r9, [pc, #612]	; 404d48 <task_lcd+0x824>
  404ae4:	47c8      	blx	r9
  404ae6:	2800      	cmp	r0, #0
  404ae8:	f43f ae8a 	beq.w	404800 <task_lcd+0x2dc>
				but0.status = 1;
  404aec:	2301      	movs	r3, #1
  404aee:	7623      	strb	r3, [r4, #24]
				draw_button_square(but0);
  404af0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  404af4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404af8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  404afc:	f8df 9240 	ldr.w	r9, [pc, #576]	; 404d40 <task_lcd+0x81c>
  404b00:	47c8      	blx	r9
				vTaskDelay(100);
  404b02:	2064      	movs	r0, #100	; 0x64
  404b04:	47c0      	blx	r8
				but0.status = 0;
  404b06:	2300      	movs	r3, #0
  404b08:	7623      	strb	r3, [r4, #24]
				draw_button_square(but0);
  404b0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  404b0e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404b12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  404b16:	47c8      	blx	r9
				if (counter == 4) {
  404b18:	4b80      	ldr	r3, [pc, #512]	; (404d1c <task_lcd+0x7f8>)
  404b1a:	681b      	ldr	r3, [r3, #0]
  404b1c:	2b04      	cmp	r3, #4
  404b1e:	f43f ae0e 	beq.w	40473e <task_lcd+0x21a>
					pass_temp[counter] = 0;
  404b22:	2100      	movs	r1, #0
  404b24:	4a7e      	ldr	r2, [pc, #504]	; (404d20 <task_lcd+0x7fc>)
  404b26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter++;
  404b2a:	3301      	adds	r3, #1
  404b2c:	4a7b      	ldr	r2, [pc, #492]	; (404d1c <task_lcd+0x7f8>)
  404b2e:	6013      	str	r3, [r2, #0]
				draw_screen_asterisk();
  404b30:	4b7c      	ldr	r3, [pc, #496]	; (404d24 <task_lcd+0x800>)
  404b32:	4798      	blx	r3
				if (counter == 1) {
  404b34:	4b79      	ldr	r3, [pc, #484]	; (404d1c <task_lcd+0x7f8>)
  404b36:	681b      	ldr	r3, [r3, #0]
  404b38:	2b01      	cmp	r3, #1
  404b3a:	f43f ae09 	beq.w	404750 <task_lcd+0x22c>
					} else if (counter == 2) {
  404b3e:	2b02      	cmp	r3, #2
  404b40:	f43f ae10 	beq.w	404764 <task_lcd+0x240>
					} else if (counter == 3) {
  404b44:	2b03      	cmp	r3, #3
  404b46:	f43f ae18 	beq.w	40477a <task_lcd+0x256>
					} else if (counter == 4) {
  404b4a:	2b04      	cmp	r3, #4
  404b4c:	d1ac      	bne.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "****", 130, 450, 1);
  404b4e:	2301      	movs	r3, #1
  404b50:	9300      	str	r3, [sp, #0]
  404b52:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404b56:	2282      	movs	r2, #130	; 0x82
  404b58:	4974      	ldr	r1, [pc, #464]	; (404d2c <task_lcd+0x808>)
  404b5a:	4875      	ldr	r0, [pc, #468]	; (404d30 <task_lcd+0x80c>)
  404b5c:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 404d4c <task_lcd+0x828>
  404b60:	47c8      	blx	r9
  404b62:	e7a1      	b.n	404aa8 <task_lcd+0x584>
						pass_temp[i] = 0;
  404b64:	4a6e      	ldr	r2, [pc, #440]	; (404d20 <task_lcd+0x7fc>)
  404b66:	2300      	movs	r3, #0
  404b68:	6013      	str	r3, [r2, #0]
  404b6a:	6053      	str	r3, [r2, #4]
  404b6c:	6093      	str	r3, [r2, #8]
  404b6e:	60d3      	str	r3, [r2, #12]
					counter = 0;
  404b70:	4a6a      	ldr	r2, [pc, #424]	; (404d1c <task_lcd+0x7f8>)
  404b72:	6013      	str	r3, [r2, #0]
  404b74:	e78b      	b.n	404a8e <task_lcd+0x56a>
					font_draw_text(&calibri_23, "*", 130, 450, 1);
  404b76:	9300      	str	r3, [sp, #0]
  404b78:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404b7c:	2282      	movs	r2, #130	; 0x82
  404b7e:	496d      	ldr	r1, [pc, #436]	; (404d34 <task_lcd+0x810>)
  404b80:	486b      	ldr	r0, [pc, #428]	; (404d30 <task_lcd+0x80c>)
  404b82:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 404d4c <task_lcd+0x828>
  404b86:	47c8      	blx	r9
  404b88:	e78e      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "**", 130, 450, 1);
  404b8a:	2301      	movs	r3, #1
  404b8c:	9300      	str	r3, [sp, #0]
  404b8e:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404b92:	2282      	movs	r2, #130	; 0x82
  404b94:	4968      	ldr	r1, [pc, #416]	; (404d38 <task_lcd+0x814>)
  404b96:	4866      	ldr	r0, [pc, #408]	; (404d30 <task_lcd+0x80c>)
  404b98:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 404d4c <task_lcd+0x828>
  404b9c:	47c8      	blx	r9
  404b9e:	e783      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "***", 130, 450, 1);
  404ba0:	2301      	movs	r3, #1
  404ba2:	9300      	str	r3, [sp, #0]
  404ba4:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404ba8:	2282      	movs	r2, #130	; 0x82
  404baa:	4964      	ldr	r1, [pc, #400]	; (404d3c <task_lcd+0x818>)
  404bac:	4860      	ldr	r0, [pc, #384]	; (404d30 <task_lcd+0x80c>)
  404bae:	f8df 919c 	ldr.w	r9, [pc, #412]	; 404d4c <task_lcd+0x828>
  404bb2:	47c8      	blx	r9
  404bb4:	e778      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "****", 130, 450, 1);
  404bb6:	2301      	movs	r3, #1
  404bb8:	9300      	str	r3, [sp, #0]
  404bba:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404bbe:	2282      	movs	r2, #130	; 0x82
  404bc0:	495a      	ldr	r1, [pc, #360]	; (404d2c <task_lcd+0x808>)
  404bc2:	485b      	ldr	r0, [pc, #364]	; (404d30 <task_lcd+0x80c>)
  404bc4:	f8df 9184 	ldr.w	r9, [pc, #388]	; 404d4c <task_lcd+0x828>
  404bc8:	47c8      	blx	r9
  404bca:	e76d      	b.n	404aa8 <task_lcd+0x584>
				but2.status = 1;
  404bcc:	f8df a180 	ldr.w	sl, [pc, #384]	; 404d50 <task_lcd+0x82c>
  404bd0:	2301      	movs	r3, #1
  404bd2:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but2);
  404bd6:	f10a 0910 	add.w	r9, sl, #16
  404bda:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  404bde:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404be2:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  404be6:	4e56      	ldr	r6, [pc, #344]	; (404d40 <task_lcd+0x81c>)
  404be8:	47b0      	blx	r6
				vTaskDelay(100);
  404bea:	2064      	movs	r0, #100	; 0x64
  404bec:	47c0      	blx	r8
				but2.status = 0;
  404bee:	2300      	movs	r3, #0
  404bf0:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but2);
  404bf4:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  404bf8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404bfc:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  404c00:	47b0      	blx	r6
				if (counter == 4) {
  404c02:	4b46      	ldr	r3, [pc, #280]	; (404d1c <task_lcd+0x7f8>)
  404c04:	681b      	ldr	r3, [r3, #0]
  404c06:	2b04      	cmp	r3, #4
  404c08:	d01e      	beq.n	404c48 <task_lcd+0x724>
					pass_temp[counter] = 2;
  404c0a:	2102      	movs	r1, #2
  404c0c:	4a44      	ldr	r2, [pc, #272]	; (404d20 <task_lcd+0x7fc>)
  404c0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter++;
  404c12:	3301      	adds	r3, #1
  404c14:	4a41      	ldr	r2, [pc, #260]	; (404d1c <task_lcd+0x7f8>)
  404c16:	6013      	str	r3, [r2, #0]
				draw_screen_asterisk();
  404c18:	4b42      	ldr	r3, [pc, #264]	; (404d24 <task_lcd+0x800>)
  404c1a:	4798      	blx	r3
				if (counter == 1) {
  404c1c:	4b3f      	ldr	r3, [pc, #252]	; (404d1c <task_lcd+0x7f8>)
  404c1e:	681b      	ldr	r3, [r3, #0]
  404c20:	2b01      	cmp	r3, #1
  404c22:	d01a      	beq.n	404c5a <task_lcd+0x736>
				} else if (counter == 2) {
  404c24:	2b02      	cmp	r3, #2
  404c26:	d022      	beq.n	404c6e <task_lcd+0x74a>
				} else if (counter == 3) {
  404c28:	2b03      	cmp	r3, #3
  404c2a:	d02b      	beq.n	404c84 <task_lcd+0x760>
				} else if (counter == 4) {
  404c2c:	2b04      	cmp	r3, #4
  404c2e:	f47f af3b 	bne.w	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "****", 130, 450, 1);
  404c32:	2301      	movs	r3, #1
  404c34:	9300      	str	r3, [sp, #0]
  404c36:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404c3a:	2282      	movs	r2, #130	; 0x82
  404c3c:	493b      	ldr	r1, [pc, #236]	; (404d2c <task_lcd+0x808>)
  404c3e:	483c      	ldr	r0, [pc, #240]	; (404d30 <task_lcd+0x80c>)
  404c40:	f8df 9108 	ldr.w	r9, [pc, #264]	; 404d4c <task_lcd+0x828>
  404c44:	47c8      	blx	r9
  404c46:	e72f      	b.n	404aa8 <task_lcd+0x584>
						pass_temp[i] = 0;
  404c48:	4a35      	ldr	r2, [pc, #212]	; (404d20 <task_lcd+0x7fc>)
  404c4a:	2300      	movs	r3, #0
  404c4c:	6013      	str	r3, [r2, #0]
  404c4e:	6053      	str	r3, [r2, #4]
  404c50:	6093      	str	r3, [r2, #8]
  404c52:	60d3      	str	r3, [r2, #12]
					counter = 0;
  404c54:	4a31      	ldr	r2, [pc, #196]	; (404d1c <task_lcd+0x7f8>)
  404c56:	6013      	str	r3, [r2, #0]
  404c58:	e7de      	b.n	404c18 <task_lcd+0x6f4>
					font_draw_text(&calibri_23, "*", 130, 450, 1);
  404c5a:	9300      	str	r3, [sp, #0]
  404c5c:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404c60:	2282      	movs	r2, #130	; 0x82
  404c62:	4934      	ldr	r1, [pc, #208]	; (404d34 <task_lcd+0x810>)
  404c64:	4832      	ldr	r0, [pc, #200]	; (404d30 <task_lcd+0x80c>)
  404c66:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 404d4c <task_lcd+0x828>
  404c6a:	47c8      	blx	r9
  404c6c:	e71c      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "**", 130, 450, 1);
  404c6e:	2301      	movs	r3, #1
  404c70:	9300      	str	r3, [sp, #0]
  404c72:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404c76:	2282      	movs	r2, #130	; 0x82
  404c78:	492f      	ldr	r1, [pc, #188]	; (404d38 <task_lcd+0x814>)
  404c7a:	482d      	ldr	r0, [pc, #180]	; (404d30 <task_lcd+0x80c>)
  404c7c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 404d4c <task_lcd+0x828>
  404c80:	47c8      	blx	r9
  404c82:	e711      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "***", 130, 450, 1);
  404c84:	2301      	movs	r3, #1
  404c86:	9300      	str	r3, [sp, #0]
  404c88:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404c8c:	2282      	movs	r2, #130	; 0x82
  404c8e:	492b      	ldr	r1, [pc, #172]	; (404d3c <task_lcd+0x818>)
  404c90:	4827      	ldr	r0, [pc, #156]	; (404d30 <task_lcd+0x80c>)
  404c92:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 404d4c <task_lcd+0x828>
  404c96:	47c8      	blx	r9
  404c98:	e706      	b.n	404aa8 <task_lcd+0x584>
				but3.status = 1;
  404c9a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 404d54 <task_lcd+0x830>
  404c9e:	2301      	movs	r3, #1
  404ca0:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but3);
  404ca4:	f10a 0910 	add.w	r9, sl, #16
  404ca8:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  404cac:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404cb0:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  404cb4:	4e22      	ldr	r6, [pc, #136]	; (404d40 <task_lcd+0x81c>)
  404cb6:	47b0      	blx	r6
				vTaskDelay(100);
  404cb8:	2064      	movs	r0, #100	; 0x64
  404cba:	47c0      	blx	r8
				but3.status = 0;
  404cbc:	2300      	movs	r3, #0
  404cbe:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but3);
  404cc2:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  404cc6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404cca:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  404cce:	47b0      	blx	r6
				if (counter == 4) {
  404cd0:	4b12      	ldr	r3, [pc, #72]	; (404d1c <task_lcd+0x7f8>)
  404cd2:	681b      	ldr	r3, [r3, #0]
  404cd4:	2b04      	cmp	r3, #4
  404cd6:	d03f      	beq.n	404d58 <task_lcd+0x834>
					pass_temp[counter] = 3;
  404cd8:	2103      	movs	r1, #3
  404cda:	4a11      	ldr	r2, [pc, #68]	; (404d20 <task_lcd+0x7fc>)
  404cdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter++;
  404ce0:	3301      	adds	r3, #1
  404ce2:	4a0e      	ldr	r2, [pc, #56]	; (404d1c <task_lcd+0x7f8>)
  404ce4:	6013      	str	r3, [r2, #0]
				draw_screen_asterisk();
  404ce6:	4b0f      	ldr	r3, [pc, #60]	; (404d24 <task_lcd+0x800>)
  404ce8:	4798      	blx	r3
				if (counter == 1) {
  404cea:	4b0c      	ldr	r3, [pc, #48]	; (404d1c <task_lcd+0x7f8>)
  404cec:	681b      	ldr	r3, [r3, #0]
  404cee:	2b01      	cmp	r3, #1
  404cf0:	d03b      	beq.n	404d6a <task_lcd+0x846>
				} else if (counter == 2) {
  404cf2:	2b02      	cmp	r3, #2
  404cf4:	d043      	beq.n	404d7e <task_lcd+0x85a>
				} else if (counter == 3) {
  404cf6:	2b03      	cmp	r3, #3
  404cf8:	d04c      	beq.n	404d94 <task_lcd+0x870>
				} else if (counter == 4) {
  404cfa:	2b04      	cmp	r3, #4
  404cfc:	f47f aed4 	bne.w	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "****", 130, 450, 1);
  404d00:	2301      	movs	r3, #1
  404d02:	9300      	str	r3, [sp, #0]
  404d04:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404d08:	2282      	movs	r2, #130	; 0x82
  404d0a:	4908      	ldr	r1, [pc, #32]	; (404d2c <task_lcd+0x808>)
  404d0c:	4808      	ldr	r0, [pc, #32]	; (404d30 <task_lcd+0x80c>)
  404d0e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 404d4c <task_lcd+0x828>
  404d12:	47c8      	blx	r9
  404d14:	e6c8      	b.n	404aa8 <task_lcd+0x584>
  404d16:	bf00      	nop
  404d18:	20400034 	.word	0x20400034
  404d1c:	2040c900 	.word	0x2040c900
  404d20:	2040c914 	.word	0x2040c914
  404d24:	004040cd 	.word	0x004040cd
  404d28:	2040ca4c 	.word	0x2040ca4c
  404d2c:	0041b934 	.word	0x0041b934
  404d30:	00408d50 	.word	0x00408d50
  404d34:	0040966c 	.word	0x0040966c
  404d38:	0041b92c 	.word	0x0041b92c
  404d3c:	0041b930 	.word	0x0041b930
  404d40:	00404155 	.word	0x00404155
  404d44:	00402b61 	.word	0x00402b61
  404d48:	004044dd 	.word	0x004044dd
  404d4c:	004040f5 	.word	0x004040f5
  404d50:	20400054 	.word	0x20400054
  404d54:	20400074 	.word	0x20400074
						pass_temp[i] = 0;
  404d58:	4aae      	ldr	r2, [pc, #696]	; (405014 <task_lcd+0xaf0>)
  404d5a:	2300      	movs	r3, #0
  404d5c:	6013      	str	r3, [r2, #0]
  404d5e:	6053      	str	r3, [r2, #4]
  404d60:	6093      	str	r3, [r2, #8]
  404d62:	60d3      	str	r3, [r2, #12]
					counter = 0;
  404d64:	4aac      	ldr	r2, [pc, #688]	; (405018 <task_lcd+0xaf4>)
  404d66:	6013      	str	r3, [r2, #0]
  404d68:	e7bd      	b.n	404ce6 <task_lcd+0x7c2>
					font_draw_text(&calibri_23, "*", 130, 450, 1);
  404d6a:	9300      	str	r3, [sp, #0]
  404d6c:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404d70:	2282      	movs	r2, #130	; 0x82
  404d72:	49aa      	ldr	r1, [pc, #680]	; (40501c <task_lcd+0xaf8>)
  404d74:	48aa      	ldr	r0, [pc, #680]	; (405020 <task_lcd+0xafc>)
  404d76:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 405038 <task_lcd+0xb14>
  404d7a:	47c8      	blx	r9
  404d7c:	e694      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "**", 130, 450, 1);
  404d7e:	2301      	movs	r3, #1
  404d80:	9300      	str	r3, [sp, #0]
  404d82:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404d86:	2282      	movs	r2, #130	; 0x82
  404d88:	49a6      	ldr	r1, [pc, #664]	; (405024 <task_lcd+0xb00>)
  404d8a:	48a5      	ldr	r0, [pc, #660]	; (405020 <task_lcd+0xafc>)
  404d8c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 405038 <task_lcd+0xb14>
  404d90:	47c8      	blx	r9
  404d92:	e689      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "***", 130, 450, 1);
  404d94:	2301      	movs	r3, #1
  404d96:	9300      	str	r3, [sp, #0]
  404d98:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404d9c:	2282      	movs	r2, #130	; 0x82
  404d9e:	49a2      	ldr	r1, [pc, #648]	; (405028 <task_lcd+0xb04>)
  404da0:	489f      	ldr	r0, [pc, #636]	; (405020 <task_lcd+0xafc>)
  404da2:	f8df 9294 	ldr.w	r9, [pc, #660]	; 405038 <task_lcd+0xb14>
  404da6:	47c8      	blx	r9
  404da8:	e67e      	b.n	404aa8 <task_lcd+0x584>
				but4.status = 1;
  404daa:	f8df a290 	ldr.w	sl, [pc, #656]	; 40503c <task_lcd+0xb18>
  404dae:	2301      	movs	r3, #1
  404db0:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but4);
  404db4:	f10a 0910 	add.w	r9, sl, #16
  404db8:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  404dbc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404dc0:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  404dc4:	4e99      	ldr	r6, [pc, #612]	; (40502c <task_lcd+0xb08>)
  404dc6:	47b0      	blx	r6
				vTaskDelay(100);
  404dc8:	2064      	movs	r0, #100	; 0x64
  404dca:	47c0      	blx	r8
				but4.status = 0;
  404dcc:	2300      	movs	r3, #0
  404dce:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but4);
  404dd2:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  404dd6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404dda:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  404dde:	47b0      	blx	r6
				if (counter == 4) {
  404de0:	4b8d      	ldr	r3, [pc, #564]	; (405018 <task_lcd+0xaf4>)
  404de2:	681b      	ldr	r3, [r3, #0]
  404de4:	2b04      	cmp	r3, #4
  404de6:	d01e      	beq.n	404e26 <task_lcd+0x902>
					pass_temp[counter] = 4;
  404de8:	2104      	movs	r1, #4
  404dea:	4a8a      	ldr	r2, [pc, #552]	; (405014 <task_lcd+0xaf0>)
  404dec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter++;
  404df0:	3301      	adds	r3, #1
  404df2:	4a89      	ldr	r2, [pc, #548]	; (405018 <task_lcd+0xaf4>)
  404df4:	6013      	str	r3, [r2, #0]
				draw_screen_asterisk();
  404df6:	4b8e      	ldr	r3, [pc, #568]	; (405030 <task_lcd+0xb0c>)
  404df8:	4798      	blx	r3
				if (counter == 1) {
  404dfa:	4b87      	ldr	r3, [pc, #540]	; (405018 <task_lcd+0xaf4>)
  404dfc:	681b      	ldr	r3, [r3, #0]
  404dfe:	2b01      	cmp	r3, #1
  404e00:	d01a      	beq.n	404e38 <task_lcd+0x914>
				} else if (counter == 2) {
  404e02:	2b02      	cmp	r3, #2
  404e04:	d022      	beq.n	404e4c <task_lcd+0x928>
				} else if (counter == 3) {
  404e06:	2b03      	cmp	r3, #3
  404e08:	d02b      	beq.n	404e62 <task_lcd+0x93e>
				} else if (counter == 4) {
  404e0a:	2b04      	cmp	r3, #4
  404e0c:	f47f ae4c 	bne.w	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "****", 130, 450, 1);
  404e10:	2301      	movs	r3, #1
  404e12:	9300      	str	r3, [sp, #0]
  404e14:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404e18:	2282      	movs	r2, #130	; 0x82
  404e1a:	4986      	ldr	r1, [pc, #536]	; (405034 <task_lcd+0xb10>)
  404e1c:	4880      	ldr	r0, [pc, #512]	; (405020 <task_lcd+0xafc>)
  404e1e:	f8df 9218 	ldr.w	r9, [pc, #536]	; 405038 <task_lcd+0xb14>
  404e22:	47c8      	blx	r9
  404e24:	e640      	b.n	404aa8 <task_lcd+0x584>
						pass_temp[i] = 0;
  404e26:	4a7b      	ldr	r2, [pc, #492]	; (405014 <task_lcd+0xaf0>)
  404e28:	2300      	movs	r3, #0
  404e2a:	6013      	str	r3, [r2, #0]
  404e2c:	6053      	str	r3, [r2, #4]
  404e2e:	6093      	str	r3, [r2, #8]
  404e30:	60d3      	str	r3, [r2, #12]
					counter = 0;
  404e32:	4a79      	ldr	r2, [pc, #484]	; (405018 <task_lcd+0xaf4>)
  404e34:	6013      	str	r3, [r2, #0]
  404e36:	e7de      	b.n	404df6 <task_lcd+0x8d2>
					font_draw_text(&calibri_23, "*", 130, 450, 1);
  404e38:	9300      	str	r3, [sp, #0]
  404e3a:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404e3e:	2282      	movs	r2, #130	; 0x82
  404e40:	4976      	ldr	r1, [pc, #472]	; (40501c <task_lcd+0xaf8>)
  404e42:	4877      	ldr	r0, [pc, #476]	; (405020 <task_lcd+0xafc>)
  404e44:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 405038 <task_lcd+0xb14>
  404e48:	47c8      	blx	r9
  404e4a:	e62d      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "**", 130, 450, 1);
  404e4c:	2301      	movs	r3, #1
  404e4e:	9300      	str	r3, [sp, #0]
  404e50:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404e54:	2282      	movs	r2, #130	; 0x82
  404e56:	4973      	ldr	r1, [pc, #460]	; (405024 <task_lcd+0xb00>)
  404e58:	4871      	ldr	r0, [pc, #452]	; (405020 <task_lcd+0xafc>)
  404e5a:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 405038 <task_lcd+0xb14>
  404e5e:	47c8      	blx	r9
  404e60:	e622      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "***", 130, 450, 1);
  404e62:	2301      	movs	r3, #1
  404e64:	9300      	str	r3, [sp, #0]
  404e66:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404e6a:	2282      	movs	r2, #130	; 0x82
  404e6c:	496e      	ldr	r1, [pc, #440]	; (405028 <task_lcd+0xb04>)
  404e6e:	486c      	ldr	r0, [pc, #432]	; (405020 <task_lcd+0xafc>)
  404e70:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 405038 <task_lcd+0xb14>
  404e74:	47c8      	blx	r9
  404e76:	e617      	b.n	404aa8 <task_lcd+0x584>
				but5.status = 1;
  404e78:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 405040 <task_lcd+0xb1c>
  404e7c:	2301      	movs	r3, #1
  404e7e:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but5);
  404e82:	f10a 0910 	add.w	r9, sl, #16
  404e86:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  404e8a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404e8e:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  404e92:	4e66      	ldr	r6, [pc, #408]	; (40502c <task_lcd+0xb08>)
  404e94:	47b0      	blx	r6
				vTaskDelay(100);
  404e96:	2064      	movs	r0, #100	; 0x64
  404e98:	47c0      	blx	r8
				but5.status = 0;
  404e9a:	2300      	movs	r3, #0
  404e9c:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but5);
  404ea0:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  404ea4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404ea8:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  404eac:	47b0      	blx	r6
				if (counter == 4) {
  404eae:	4b5a      	ldr	r3, [pc, #360]	; (405018 <task_lcd+0xaf4>)
  404eb0:	681b      	ldr	r3, [r3, #0]
  404eb2:	2b04      	cmp	r3, #4
  404eb4:	d01e      	beq.n	404ef4 <task_lcd+0x9d0>
					pass_temp[counter] = 5;
  404eb6:	2105      	movs	r1, #5
  404eb8:	4a56      	ldr	r2, [pc, #344]	; (405014 <task_lcd+0xaf0>)
  404eba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter++;
  404ebe:	3301      	adds	r3, #1
  404ec0:	4a55      	ldr	r2, [pc, #340]	; (405018 <task_lcd+0xaf4>)
  404ec2:	6013      	str	r3, [r2, #0]
				draw_screen_asterisk();
  404ec4:	4b5a      	ldr	r3, [pc, #360]	; (405030 <task_lcd+0xb0c>)
  404ec6:	4798      	blx	r3
				if (counter == 1) {
  404ec8:	4b53      	ldr	r3, [pc, #332]	; (405018 <task_lcd+0xaf4>)
  404eca:	681b      	ldr	r3, [r3, #0]
  404ecc:	2b01      	cmp	r3, #1
  404ece:	d01a      	beq.n	404f06 <task_lcd+0x9e2>
				} else if (counter == 2) {
  404ed0:	2b02      	cmp	r3, #2
  404ed2:	d022      	beq.n	404f1a <task_lcd+0x9f6>
				} else if (counter == 3) {
  404ed4:	2b03      	cmp	r3, #3
  404ed6:	d02b      	beq.n	404f30 <task_lcd+0xa0c>
				} else if (counter == 4) {
  404ed8:	2b04      	cmp	r3, #4
  404eda:	f47f ade5 	bne.w	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "****", 130, 450, 1);
  404ede:	2301      	movs	r3, #1
  404ee0:	9300      	str	r3, [sp, #0]
  404ee2:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404ee6:	2282      	movs	r2, #130	; 0x82
  404ee8:	4952      	ldr	r1, [pc, #328]	; (405034 <task_lcd+0xb10>)
  404eea:	484d      	ldr	r0, [pc, #308]	; (405020 <task_lcd+0xafc>)
  404eec:	f8df 9148 	ldr.w	r9, [pc, #328]	; 405038 <task_lcd+0xb14>
  404ef0:	47c8      	blx	r9
  404ef2:	e5d9      	b.n	404aa8 <task_lcd+0x584>
						pass_temp[i] = 0;
  404ef4:	4a47      	ldr	r2, [pc, #284]	; (405014 <task_lcd+0xaf0>)
  404ef6:	2300      	movs	r3, #0
  404ef8:	6013      	str	r3, [r2, #0]
  404efa:	6053      	str	r3, [r2, #4]
  404efc:	6093      	str	r3, [r2, #8]
  404efe:	60d3      	str	r3, [r2, #12]
					counter = 0;
  404f00:	4a45      	ldr	r2, [pc, #276]	; (405018 <task_lcd+0xaf4>)
  404f02:	6013      	str	r3, [r2, #0]
  404f04:	e7de      	b.n	404ec4 <task_lcd+0x9a0>
					font_draw_text(&calibri_23, "*", 130, 450, 1);
  404f06:	9300      	str	r3, [sp, #0]
  404f08:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404f0c:	2282      	movs	r2, #130	; 0x82
  404f0e:	4943      	ldr	r1, [pc, #268]	; (40501c <task_lcd+0xaf8>)
  404f10:	4843      	ldr	r0, [pc, #268]	; (405020 <task_lcd+0xafc>)
  404f12:	f8df 9124 	ldr.w	r9, [pc, #292]	; 405038 <task_lcd+0xb14>
  404f16:	47c8      	blx	r9
  404f18:	e5c6      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "**", 130, 450, 1);
  404f1a:	2301      	movs	r3, #1
  404f1c:	9300      	str	r3, [sp, #0]
  404f1e:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404f22:	2282      	movs	r2, #130	; 0x82
  404f24:	493f      	ldr	r1, [pc, #252]	; (405024 <task_lcd+0xb00>)
  404f26:	483e      	ldr	r0, [pc, #248]	; (405020 <task_lcd+0xafc>)
  404f28:	f8df 910c 	ldr.w	r9, [pc, #268]	; 405038 <task_lcd+0xb14>
  404f2c:	47c8      	blx	r9
  404f2e:	e5bb      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "***", 130, 450, 1);
  404f30:	2301      	movs	r3, #1
  404f32:	9300      	str	r3, [sp, #0]
  404f34:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404f38:	2282      	movs	r2, #130	; 0x82
  404f3a:	493b      	ldr	r1, [pc, #236]	; (405028 <task_lcd+0xb04>)
  404f3c:	4838      	ldr	r0, [pc, #224]	; (405020 <task_lcd+0xafc>)
  404f3e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 405038 <task_lcd+0xb14>
  404f42:	47c8      	blx	r9
  404f44:	e5b0      	b.n	404aa8 <task_lcd+0x584>
				but6.status = 1;
  404f46:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 405044 <task_lcd+0xb20>
  404f4a:	2301      	movs	r3, #1
  404f4c:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but6);
  404f50:	f10a 0910 	add.w	r9, sl, #16
  404f54:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  404f58:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404f5c:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  404f60:	4e32      	ldr	r6, [pc, #200]	; (40502c <task_lcd+0xb08>)
  404f62:	47b0      	blx	r6
				vTaskDelay(100);
  404f64:	2064      	movs	r0, #100	; 0x64
  404f66:	47c0      	blx	r8
				but6.status = 0;
  404f68:	2300      	movs	r3, #0
  404f6a:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but6);
  404f6e:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  404f72:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  404f76:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  404f7a:	47b0      	blx	r6
				if (counter == 4) {
  404f7c:	4b26      	ldr	r3, [pc, #152]	; (405018 <task_lcd+0xaf4>)
  404f7e:	681b      	ldr	r3, [r3, #0]
  404f80:	2b04      	cmp	r3, #4
  404f82:	d01e      	beq.n	404fc2 <task_lcd+0xa9e>
					pass_temp[counter] = 6;
  404f84:	2106      	movs	r1, #6
  404f86:	4a23      	ldr	r2, [pc, #140]	; (405014 <task_lcd+0xaf0>)
  404f88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter++;
  404f8c:	3301      	adds	r3, #1
  404f8e:	4a22      	ldr	r2, [pc, #136]	; (405018 <task_lcd+0xaf4>)
  404f90:	6013      	str	r3, [r2, #0]
				draw_screen_asterisk();
  404f92:	4b27      	ldr	r3, [pc, #156]	; (405030 <task_lcd+0xb0c>)
  404f94:	4798      	blx	r3
				if (counter == 1) {
  404f96:	4b20      	ldr	r3, [pc, #128]	; (405018 <task_lcd+0xaf4>)
  404f98:	681b      	ldr	r3, [r3, #0]
  404f9a:	2b01      	cmp	r3, #1
  404f9c:	d01a      	beq.n	404fd4 <task_lcd+0xab0>
				} else if (counter == 2) {
  404f9e:	2b02      	cmp	r3, #2
  404fa0:	d022      	beq.n	404fe8 <task_lcd+0xac4>
				} else if (counter == 3) {
  404fa2:	2b03      	cmp	r3, #3
  404fa4:	d02b      	beq.n	404ffe <task_lcd+0xada>
				} else if (counter == 4) {
  404fa6:	2b04      	cmp	r3, #4
  404fa8:	f47f ad7e 	bne.w	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "****", 130, 450, 1);
  404fac:	2301      	movs	r3, #1
  404fae:	9300      	str	r3, [sp, #0]
  404fb0:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404fb4:	2282      	movs	r2, #130	; 0x82
  404fb6:	491f      	ldr	r1, [pc, #124]	; (405034 <task_lcd+0xb10>)
  404fb8:	4819      	ldr	r0, [pc, #100]	; (405020 <task_lcd+0xafc>)
  404fba:	f8df 907c 	ldr.w	r9, [pc, #124]	; 405038 <task_lcd+0xb14>
  404fbe:	47c8      	blx	r9
  404fc0:	e572      	b.n	404aa8 <task_lcd+0x584>
						pass_temp[i] = 0;
  404fc2:	4a14      	ldr	r2, [pc, #80]	; (405014 <task_lcd+0xaf0>)
  404fc4:	2300      	movs	r3, #0
  404fc6:	6013      	str	r3, [r2, #0]
  404fc8:	6053      	str	r3, [r2, #4]
  404fca:	6093      	str	r3, [r2, #8]
  404fcc:	60d3      	str	r3, [r2, #12]
					counter = 0;
  404fce:	4a12      	ldr	r2, [pc, #72]	; (405018 <task_lcd+0xaf4>)
  404fd0:	6013      	str	r3, [r2, #0]
  404fd2:	e7de      	b.n	404f92 <task_lcd+0xa6e>
					font_draw_text(&calibri_23, "*", 130, 450, 1);
  404fd4:	9300      	str	r3, [sp, #0]
  404fd6:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404fda:	2282      	movs	r2, #130	; 0x82
  404fdc:	490f      	ldr	r1, [pc, #60]	; (40501c <task_lcd+0xaf8>)
  404fde:	4810      	ldr	r0, [pc, #64]	; (405020 <task_lcd+0xafc>)
  404fe0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 405038 <task_lcd+0xb14>
  404fe4:	47c8      	blx	r9
  404fe6:	e55f      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "**", 130, 450, 1);
  404fe8:	2301      	movs	r3, #1
  404fea:	9300      	str	r3, [sp, #0]
  404fec:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  404ff0:	2282      	movs	r2, #130	; 0x82
  404ff2:	490c      	ldr	r1, [pc, #48]	; (405024 <task_lcd+0xb00>)
  404ff4:	480a      	ldr	r0, [pc, #40]	; (405020 <task_lcd+0xafc>)
  404ff6:	f8df 9040 	ldr.w	r9, [pc, #64]	; 405038 <task_lcd+0xb14>
  404ffa:	47c8      	blx	r9
  404ffc:	e554      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "***", 130, 450, 1);
  404ffe:	2301      	movs	r3, #1
  405000:	9300      	str	r3, [sp, #0]
  405002:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  405006:	2282      	movs	r2, #130	; 0x82
  405008:	4907      	ldr	r1, [pc, #28]	; (405028 <task_lcd+0xb04>)
  40500a:	4805      	ldr	r0, [pc, #20]	; (405020 <task_lcd+0xafc>)
  40500c:	f8df 9028 	ldr.w	r9, [pc, #40]	; 405038 <task_lcd+0xb14>
  405010:	47c8      	blx	r9
  405012:	e549      	b.n	404aa8 <task_lcd+0x584>
  405014:	2040c914 	.word	0x2040c914
  405018:	2040c900 	.word	0x2040c900
  40501c:	0040966c 	.word	0x0040966c
  405020:	00408d50 	.word	0x00408d50
  405024:	0041b92c 	.word	0x0041b92c
  405028:	0041b930 	.word	0x0041b930
  40502c:	00404155 	.word	0x00404155
  405030:	004040cd 	.word	0x004040cd
  405034:	0041b934 	.word	0x0041b934
  405038:	004040f5 	.word	0x004040f5
  40503c:	20400094 	.word	0x20400094
  405040:	204000b4 	.word	0x204000b4
  405044:	204000d4 	.word	0x204000d4
				but7.status = 1;
  405048:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 405334 <task_lcd+0xe10>
  40504c:	2301      	movs	r3, #1
  40504e:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but7);
  405052:	f10a 0910 	add.w	r9, sl, #16
  405056:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  40505a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  40505e:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  405062:	4eab      	ldr	r6, [pc, #684]	; (405310 <task_lcd+0xdec>)
  405064:	47b0      	blx	r6
				vTaskDelay(100);
  405066:	2064      	movs	r0, #100	; 0x64
  405068:	47c0      	blx	r8
				but7.status = 0;
  40506a:	2300      	movs	r3, #0
  40506c:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but7);
  405070:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  405074:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  405078:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  40507c:	47b0      	blx	r6
				if (counter == 4) {
  40507e:	4ba5      	ldr	r3, [pc, #660]	; (405314 <task_lcd+0xdf0>)
  405080:	681b      	ldr	r3, [r3, #0]
  405082:	2b04      	cmp	r3, #4
  405084:	d01e      	beq.n	4050c4 <task_lcd+0xba0>
					pass_temp[counter] = 7;
  405086:	2107      	movs	r1, #7
  405088:	4aa3      	ldr	r2, [pc, #652]	; (405318 <task_lcd+0xdf4>)
  40508a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter++;
  40508e:	3301      	adds	r3, #1
  405090:	4aa0      	ldr	r2, [pc, #640]	; (405314 <task_lcd+0xdf0>)
  405092:	6013      	str	r3, [r2, #0]
				draw_screen_asterisk();
  405094:	4ba1      	ldr	r3, [pc, #644]	; (40531c <task_lcd+0xdf8>)
  405096:	4798      	blx	r3
				if (counter == 1) {
  405098:	4b9e      	ldr	r3, [pc, #632]	; (405314 <task_lcd+0xdf0>)
  40509a:	681b      	ldr	r3, [r3, #0]
  40509c:	2b01      	cmp	r3, #1
  40509e:	d01a      	beq.n	4050d6 <task_lcd+0xbb2>
				} else if (counter == 2) {
  4050a0:	2b02      	cmp	r3, #2
  4050a2:	d022      	beq.n	4050ea <task_lcd+0xbc6>
				} else if (counter == 3) {
  4050a4:	2b03      	cmp	r3, #3
  4050a6:	d02b      	beq.n	405100 <task_lcd+0xbdc>
				} else if (counter == 4) {
  4050a8:	2b04      	cmp	r3, #4
  4050aa:	f47f acfd 	bne.w	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "****", 130, 450, 1);
  4050ae:	2301      	movs	r3, #1
  4050b0:	9300      	str	r3, [sp, #0]
  4050b2:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  4050b6:	2282      	movs	r2, #130	; 0x82
  4050b8:	4999      	ldr	r1, [pc, #612]	; (405320 <task_lcd+0xdfc>)
  4050ba:	489a      	ldr	r0, [pc, #616]	; (405324 <task_lcd+0xe00>)
  4050bc:	f8df 9278 	ldr.w	r9, [pc, #632]	; 405338 <task_lcd+0xe14>
  4050c0:	47c8      	blx	r9
  4050c2:	e4f1      	b.n	404aa8 <task_lcd+0x584>
						pass_temp[i] = 0;
  4050c4:	4a94      	ldr	r2, [pc, #592]	; (405318 <task_lcd+0xdf4>)
  4050c6:	2300      	movs	r3, #0
  4050c8:	6013      	str	r3, [r2, #0]
  4050ca:	6053      	str	r3, [r2, #4]
  4050cc:	6093      	str	r3, [r2, #8]
  4050ce:	60d3      	str	r3, [r2, #12]
					counter = 0;
  4050d0:	4a90      	ldr	r2, [pc, #576]	; (405314 <task_lcd+0xdf0>)
  4050d2:	6013      	str	r3, [r2, #0]
  4050d4:	e7de      	b.n	405094 <task_lcd+0xb70>
					font_draw_text(&calibri_23, "*", 130, 450, 1);
  4050d6:	9300      	str	r3, [sp, #0]
  4050d8:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  4050dc:	2282      	movs	r2, #130	; 0x82
  4050de:	4992      	ldr	r1, [pc, #584]	; (405328 <task_lcd+0xe04>)
  4050e0:	4890      	ldr	r0, [pc, #576]	; (405324 <task_lcd+0xe00>)
  4050e2:	f8df 9254 	ldr.w	r9, [pc, #596]	; 405338 <task_lcd+0xe14>
  4050e6:	47c8      	blx	r9
  4050e8:	e4de      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "**", 130, 450, 1);
  4050ea:	2301      	movs	r3, #1
  4050ec:	9300      	str	r3, [sp, #0]
  4050ee:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  4050f2:	2282      	movs	r2, #130	; 0x82
  4050f4:	498d      	ldr	r1, [pc, #564]	; (40532c <task_lcd+0xe08>)
  4050f6:	488b      	ldr	r0, [pc, #556]	; (405324 <task_lcd+0xe00>)
  4050f8:	f8df 923c 	ldr.w	r9, [pc, #572]	; 405338 <task_lcd+0xe14>
  4050fc:	47c8      	blx	r9
  4050fe:	e4d3      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "***", 130, 450, 1);
  405100:	2301      	movs	r3, #1
  405102:	9300      	str	r3, [sp, #0]
  405104:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  405108:	2282      	movs	r2, #130	; 0x82
  40510a:	4989      	ldr	r1, [pc, #548]	; (405330 <task_lcd+0xe0c>)
  40510c:	4885      	ldr	r0, [pc, #532]	; (405324 <task_lcd+0xe00>)
  40510e:	f8df 9228 	ldr.w	r9, [pc, #552]	; 405338 <task_lcd+0xe14>
  405112:	47c8      	blx	r9
  405114:	e4c8      	b.n	404aa8 <task_lcd+0x584>
				but8.status = 1;
  405116:	f8df a224 	ldr.w	sl, [pc, #548]	; 40533c <task_lcd+0xe18>
  40511a:	2301      	movs	r3, #1
  40511c:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but8);
  405120:	f10a 0910 	add.w	r9, sl, #16
  405124:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  405128:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  40512c:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  405130:	4e77      	ldr	r6, [pc, #476]	; (405310 <task_lcd+0xdec>)
  405132:	47b0      	blx	r6
				vTaskDelay(100);
  405134:	2064      	movs	r0, #100	; 0x64
  405136:	47c0      	blx	r8
				but8.status = 0;
  405138:	2300      	movs	r3, #0
  40513a:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but8);
  40513e:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  405142:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  405146:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  40514a:	47b0      	blx	r6
				if (counter == 4) {
  40514c:	4b71      	ldr	r3, [pc, #452]	; (405314 <task_lcd+0xdf0>)
  40514e:	681b      	ldr	r3, [r3, #0]
  405150:	2b04      	cmp	r3, #4
  405152:	d01e      	beq.n	405192 <task_lcd+0xc6e>
					pass_temp[counter] = 8;
  405154:	2108      	movs	r1, #8
  405156:	4a70      	ldr	r2, [pc, #448]	; (405318 <task_lcd+0xdf4>)
  405158:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter++;
  40515c:	3301      	adds	r3, #1
  40515e:	4a6d      	ldr	r2, [pc, #436]	; (405314 <task_lcd+0xdf0>)
  405160:	6013      	str	r3, [r2, #0]
				draw_screen_asterisk();
  405162:	4b6e      	ldr	r3, [pc, #440]	; (40531c <task_lcd+0xdf8>)
  405164:	4798      	blx	r3
				if (counter == 1) {
  405166:	4b6b      	ldr	r3, [pc, #428]	; (405314 <task_lcd+0xdf0>)
  405168:	681b      	ldr	r3, [r3, #0]
  40516a:	2b01      	cmp	r3, #1
  40516c:	d01a      	beq.n	4051a4 <task_lcd+0xc80>
				} else if (counter == 2) {
  40516e:	2b02      	cmp	r3, #2
  405170:	d022      	beq.n	4051b8 <task_lcd+0xc94>
				} else if (counter == 3) {
  405172:	2b03      	cmp	r3, #3
  405174:	d02b      	beq.n	4051ce <task_lcd+0xcaa>
				} else if (counter == 4) {
  405176:	2b04      	cmp	r3, #4
  405178:	f47f ac96 	bne.w	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "****", 130, 450, 1);
  40517c:	2301      	movs	r3, #1
  40517e:	9300      	str	r3, [sp, #0]
  405180:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  405184:	2282      	movs	r2, #130	; 0x82
  405186:	4966      	ldr	r1, [pc, #408]	; (405320 <task_lcd+0xdfc>)
  405188:	4866      	ldr	r0, [pc, #408]	; (405324 <task_lcd+0xe00>)
  40518a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 405338 <task_lcd+0xe14>
  40518e:	47c8      	blx	r9
  405190:	e48a      	b.n	404aa8 <task_lcd+0x584>
						pass_temp[i] = 0;
  405192:	4a61      	ldr	r2, [pc, #388]	; (405318 <task_lcd+0xdf4>)
  405194:	2300      	movs	r3, #0
  405196:	6013      	str	r3, [r2, #0]
  405198:	6053      	str	r3, [r2, #4]
  40519a:	6093      	str	r3, [r2, #8]
  40519c:	60d3      	str	r3, [r2, #12]
					counter = 0;
  40519e:	4a5d      	ldr	r2, [pc, #372]	; (405314 <task_lcd+0xdf0>)
  4051a0:	6013      	str	r3, [r2, #0]
  4051a2:	e7de      	b.n	405162 <task_lcd+0xc3e>
					font_draw_text(&calibri_23, "*", 130, 450, 1);
  4051a4:	9300      	str	r3, [sp, #0]
  4051a6:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  4051aa:	2282      	movs	r2, #130	; 0x82
  4051ac:	495e      	ldr	r1, [pc, #376]	; (405328 <task_lcd+0xe04>)
  4051ae:	485d      	ldr	r0, [pc, #372]	; (405324 <task_lcd+0xe00>)
  4051b0:	f8df 9184 	ldr.w	r9, [pc, #388]	; 405338 <task_lcd+0xe14>
  4051b4:	47c8      	blx	r9
  4051b6:	e477      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "**", 130, 450, 1);
  4051b8:	2301      	movs	r3, #1
  4051ba:	9300      	str	r3, [sp, #0]
  4051bc:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  4051c0:	2282      	movs	r2, #130	; 0x82
  4051c2:	495a      	ldr	r1, [pc, #360]	; (40532c <task_lcd+0xe08>)
  4051c4:	4857      	ldr	r0, [pc, #348]	; (405324 <task_lcd+0xe00>)
  4051c6:	f8df 9170 	ldr.w	r9, [pc, #368]	; 405338 <task_lcd+0xe14>
  4051ca:	47c8      	blx	r9
  4051cc:	e46c      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "***", 130, 450, 1);
  4051ce:	2301      	movs	r3, #1
  4051d0:	9300      	str	r3, [sp, #0]
  4051d2:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  4051d6:	2282      	movs	r2, #130	; 0x82
  4051d8:	4955      	ldr	r1, [pc, #340]	; (405330 <task_lcd+0xe0c>)
  4051da:	4852      	ldr	r0, [pc, #328]	; (405324 <task_lcd+0xe00>)
  4051dc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405338 <task_lcd+0xe14>
  4051e0:	47c8      	blx	r9
  4051e2:	e461      	b.n	404aa8 <task_lcd+0x584>
				but9.status = 1;
  4051e4:	f8df a158 	ldr.w	sl, [pc, #344]	; 405340 <task_lcd+0xe1c>
  4051e8:	2301      	movs	r3, #1
  4051ea:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but9);
  4051ee:	f10a 0910 	add.w	r9, sl, #16
  4051f2:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  4051f6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4051fa:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  4051fe:	4e44      	ldr	r6, [pc, #272]	; (405310 <task_lcd+0xdec>)
  405200:	47b0      	blx	r6
				vTaskDelay(100);
  405202:	2064      	movs	r0, #100	; 0x64
  405204:	47c0      	blx	r8
				but9.status = 0;
  405206:	2300      	movs	r3, #0
  405208:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(but9);
  40520c:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  405210:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  405214:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  405218:	47b0      	blx	r6
				if (counter == 4) {
  40521a:	4b3e      	ldr	r3, [pc, #248]	; (405314 <task_lcd+0xdf0>)
  40521c:	681b      	ldr	r3, [r3, #0]
  40521e:	2b04      	cmp	r3, #4
  405220:	d01e      	beq.n	405260 <task_lcd+0xd3c>
					pass_temp[counter] = 9;
  405222:	2109      	movs	r1, #9
  405224:	4a3c      	ldr	r2, [pc, #240]	; (405318 <task_lcd+0xdf4>)
  405226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter++;
  40522a:	3301      	adds	r3, #1
  40522c:	4a39      	ldr	r2, [pc, #228]	; (405314 <task_lcd+0xdf0>)
  40522e:	6013      	str	r3, [r2, #0]
				draw_screen_asterisk();
  405230:	4b3a      	ldr	r3, [pc, #232]	; (40531c <task_lcd+0xdf8>)
  405232:	4798      	blx	r3
				if (counter == 1) {
  405234:	4b37      	ldr	r3, [pc, #220]	; (405314 <task_lcd+0xdf0>)
  405236:	681b      	ldr	r3, [r3, #0]
  405238:	2b01      	cmp	r3, #1
  40523a:	d01a      	beq.n	405272 <task_lcd+0xd4e>
				} else if (counter == 2) {
  40523c:	2b02      	cmp	r3, #2
  40523e:	d022      	beq.n	405286 <task_lcd+0xd62>
				} else if (counter == 3) {
  405240:	2b03      	cmp	r3, #3
  405242:	d02b      	beq.n	40529c <task_lcd+0xd78>
				} else if (counter == 4) {
  405244:	2b04      	cmp	r3, #4
  405246:	f47f ac2f 	bne.w	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "****", 130, 450, 1);
  40524a:	2301      	movs	r3, #1
  40524c:	9300      	str	r3, [sp, #0]
  40524e:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  405252:	2282      	movs	r2, #130	; 0x82
  405254:	4932      	ldr	r1, [pc, #200]	; (405320 <task_lcd+0xdfc>)
  405256:	4833      	ldr	r0, [pc, #204]	; (405324 <task_lcd+0xe00>)
  405258:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 405338 <task_lcd+0xe14>
  40525c:	47c8      	blx	r9
  40525e:	e423      	b.n	404aa8 <task_lcd+0x584>
						pass_temp[i] = 0;
  405260:	4a2d      	ldr	r2, [pc, #180]	; (405318 <task_lcd+0xdf4>)
  405262:	2300      	movs	r3, #0
  405264:	6013      	str	r3, [r2, #0]
  405266:	6053      	str	r3, [r2, #4]
  405268:	6093      	str	r3, [r2, #8]
  40526a:	60d3      	str	r3, [r2, #12]
					counter = 0;
  40526c:	4a29      	ldr	r2, [pc, #164]	; (405314 <task_lcd+0xdf0>)
  40526e:	6013      	str	r3, [r2, #0]
  405270:	e7de      	b.n	405230 <task_lcd+0xd0c>
					font_draw_text(&calibri_23, "*", 130, 450, 1);
  405272:	9300      	str	r3, [sp, #0]
  405274:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  405278:	2282      	movs	r2, #130	; 0x82
  40527a:	492b      	ldr	r1, [pc, #172]	; (405328 <task_lcd+0xe04>)
  40527c:	4829      	ldr	r0, [pc, #164]	; (405324 <task_lcd+0xe00>)
  40527e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 405338 <task_lcd+0xe14>
  405282:	47c8      	blx	r9
  405284:	e410      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "**", 130, 450, 1);
  405286:	2301      	movs	r3, #1
  405288:	9300      	str	r3, [sp, #0]
  40528a:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  40528e:	2282      	movs	r2, #130	; 0x82
  405290:	4926      	ldr	r1, [pc, #152]	; (40532c <task_lcd+0xe08>)
  405292:	4824      	ldr	r0, [pc, #144]	; (405324 <task_lcd+0xe00>)
  405294:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 405338 <task_lcd+0xe14>
  405298:	47c8      	blx	r9
  40529a:	e405      	b.n	404aa8 <task_lcd+0x584>
					font_draw_text(&calibri_23, "***", 130, 450, 1);
  40529c:	2301      	movs	r3, #1
  40529e:	9300      	str	r3, [sp, #0]
  4052a0:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  4052a4:	2282      	movs	r2, #130	; 0x82
  4052a6:	4922      	ldr	r1, [pc, #136]	; (405330 <task_lcd+0xe0c>)
  4052a8:	481e      	ldr	r0, [pc, #120]	; (405324 <task_lcd+0xe00>)
  4052aa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 405338 <task_lcd+0xe14>
  4052ae:	47c8      	blx	r9
  4052b0:	f7ff bbfa 	b.w	404aa8 <task_lcd+0x584>
				butclear.status = 1;
  4052b4:	f8df a08c 	ldr.w	sl, [pc, #140]	; 405344 <task_lcd+0xe20>
  4052b8:	2301      	movs	r3, #1
  4052ba:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(butclear);
  4052be:	f10a 0910 	add.w	r9, sl, #16
  4052c2:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  4052c6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4052ca:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  4052ce:	4e10      	ldr	r6, [pc, #64]	; (405310 <task_lcd+0xdec>)
  4052d0:	47b0      	blx	r6
				vTaskDelay(100);
  4052d2:	2064      	movs	r0, #100	; 0x64
  4052d4:	47c0      	blx	r8
				butclear.status = 0;
  4052d6:	2300      	movs	r3, #0
  4052d8:	f88a 3018 	strb.w	r3, [sl, #24]
				draw_button_square(butclear);
  4052dc:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  4052e0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4052e4:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  4052e8:	47b0      	blx	r6
				for (int i = 0; i < counter; i++) {
  4052ea:	4b0a      	ldr	r3, [pc, #40]	; (405314 <task_lcd+0xdf0>)
  4052ec:	681a      	ldr	r2, [r3, #0]
  4052ee:	2a00      	cmp	r2, #0
  4052f0:	dd07      	ble.n	405302 <task_lcd+0xdde>
  4052f2:	4b09      	ldr	r3, [pc, #36]	; (405318 <task_lcd+0xdf4>)
  4052f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
					pass_temp[i] = 0;
  4052f8:	2100      	movs	r1, #0
  4052fa:	f843 1b04 	str.w	r1, [r3], #4
				for (int i = 0; i < counter; i++) {
  4052fe:	429a      	cmp	r2, r3
  405300:	d1fb      	bne.n	4052fa <task_lcd+0xdd6>
				counter = 0;
  405302:	2200      	movs	r2, #0
  405304:	4b03      	ldr	r3, [pc, #12]	; (405314 <task_lcd+0xdf0>)
  405306:	601a      	str	r2, [r3, #0]
				draw_screen_asterisk();
  405308:	4b04      	ldr	r3, [pc, #16]	; (40531c <task_lcd+0xdf8>)
  40530a:	4798      	blx	r3
  40530c:	f7ff bbcc 	b.w	404aa8 <task_lcd+0x584>
  405310:	00404155 	.word	0x00404155
  405314:	2040c900 	.word	0x2040c900
  405318:	2040c914 	.word	0x2040c914
  40531c:	004040cd 	.word	0x004040cd
  405320:	0041b934 	.word	0x0041b934
  405324:	00408d50 	.word	0x00408d50
  405328:	0040966c 	.word	0x0040966c
  40532c:	0041b92c 	.word	0x0041b92c
  405330:	0041b930 	.word	0x0041b930
  405334:	204000f4 	.word	0x204000f4
  405338:	004040f5 	.word	0x004040f5
  40533c:	20400114 	.word	0x20400114
  405340:	20400134 	.word	0x20400134
  405344:	20400154 	.word	0x20400154
						if(pass_temp[1] == pass[1]) {
  405348:	4b3f      	ldr	r3, [pc, #252]	; (405448 <task_lcd+0xf24>)
  40534a:	685a      	ldr	r2, [r3, #4]
  40534c:	4b3f      	ldr	r3, [pc, #252]	; (40544c <task_lcd+0xf28>)
  40534e:	685b      	ldr	r3, [r3, #4]
  405350:	429a      	cmp	r2, r3
  405352:	d14d      	bne.n	4053f0 <task_lcd+0xecc>
							if (pass_temp[2] == pass[2]) {
  405354:	4b3c      	ldr	r3, [pc, #240]	; (405448 <task_lcd+0xf24>)
  405356:	689a      	ldr	r2, [r3, #8]
  405358:	4b3c      	ldr	r3, [pc, #240]	; (40544c <task_lcd+0xf28>)
  40535a:	689b      	ldr	r3, [r3, #8]
  40535c:	429a      	cmp	r2, r3
  40535e:	d015      	beq.n	40538c <task_lcd+0xe68>
								draw_screen(1);
  405360:	2001      	movs	r0, #1
  405362:	4b3b      	ldr	r3, [pc, #236]	; (405450 <task_lcd+0xf2c>)
  405364:	4798      	blx	r3
								flag_return = 1;
  405366:	2301      	movs	r3, #1
  405368:	703b      	strb	r3, [r7, #0]
								for (int i = 0; i < counter; i++) {
  40536a:	4b3a      	ldr	r3, [pc, #232]	; (405454 <task_lcd+0xf30>)
  40536c:	681b      	ldr	r3, [r3, #0]
  40536e:	2b00      	cmp	r3, #0
  405370:	dd07      	ble.n	405382 <task_lcd+0xe5e>
  405372:	4a35      	ldr	r2, [pc, #212]	; (405448 <task_lcd+0xf24>)
  405374:	eb02 0383 	add.w	r3, r2, r3, lsl #2
									pass_temp[i] = 0;
  405378:	2100      	movs	r1, #0
  40537a:	f842 1b04 	str.w	r1, [r2], #4
								for (int i = 0; i < counter; i++) {
  40537e:	4293      	cmp	r3, r2
  405380:	d1fb      	bne.n	40537a <task_lcd+0xe56>
								counter = 0;
  405382:	2200      	movs	r2, #0
  405384:	4b33      	ldr	r3, [pc, #204]	; (405454 <task_lcd+0xf30>)
  405386:	601a      	str	r2, [r3, #0]
  405388:	f7ff bb8e 	b.w	404aa8 <task_lcd+0x584>
								if (pass_temp[3] == pass[3]){
  40538c:	4b2e      	ldr	r3, [pc, #184]	; (405448 <task_lcd+0xf24>)
  40538e:	68da      	ldr	r2, [r3, #12]
  405390:	4b2e      	ldr	r3, [pc, #184]	; (40544c <task_lcd+0xf28>)
  405392:	68db      	ldr	r3, [r3, #12]
  405394:	429a      	cmp	r2, r3
  405396:	d015      	beq.n	4053c4 <task_lcd+0xea0>
									draw_screen(1);
  405398:	2001      	movs	r0, #1
  40539a:	4b2d      	ldr	r3, [pc, #180]	; (405450 <task_lcd+0xf2c>)
  40539c:	4798      	blx	r3
									flag_return = 1;
  40539e:	2301      	movs	r3, #1
  4053a0:	703b      	strb	r3, [r7, #0]
									for (int i = 0; i < counter; i++) {
  4053a2:	4b2c      	ldr	r3, [pc, #176]	; (405454 <task_lcd+0xf30>)
  4053a4:	681b      	ldr	r3, [r3, #0]
  4053a6:	2b00      	cmp	r3, #0
  4053a8:	dd07      	ble.n	4053ba <task_lcd+0xe96>
  4053aa:	4a27      	ldr	r2, [pc, #156]	; (405448 <task_lcd+0xf24>)
  4053ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
										pass_temp[i] = 0;
  4053b0:	2100      	movs	r1, #0
  4053b2:	f842 1b04 	str.w	r1, [r2], #4
									for (int i = 0; i < counter; i++) {
  4053b6:	429a      	cmp	r2, r3
  4053b8:	d1fb      	bne.n	4053b2 <task_lcd+0xe8e>
									counter = 0;
  4053ba:	2200      	movs	r2, #0
  4053bc:	4b25      	ldr	r3, [pc, #148]	; (405454 <task_lcd+0xf30>)
  4053be:	601a      	str	r2, [r3, #0]
  4053c0:	f7ff bb72 	b.w	404aa8 <task_lcd+0x584>
									draw_screen(2);
  4053c4:	2002      	movs	r0, #2
  4053c6:	4b22      	ldr	r3, [pc, #136]	; (405450 <task_lcd+0xf2c>)
  4053c8:	4798      	blx	r3
									flag_return = 1;
  4053ca:	2301      	movs	r3, #1
  4053cc:	703b      	strb	r3, [r7, #0]
									for (int i = 0; i < counter; i++) {
  4053ce:	4b21      	ldr	r3, [pc, #132]	; (405454 <task_lcd+0xf30>)
  4053d0:	681b      	ldr	r3, [r3, #0]
  4053d2:	2b00      	cmp	r3, #0
  4053d4:	dd07      	ble.n	4053e6 <task_lcd+0xec2>
  4053d6:	4a1c      	ldr	r2, [pc, #112]	; (405448 <task_lcd+0xf24>)
  4053d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
										pass_temp[i] = 0;
  4053dc:	2100      	movs	r1, #0
  4053de:	f842 1b04 	str.w	r1, [r2], #4
									for (int i = 0; i < counter; i++) {
  4053e2:	4293      	cmp	r3, r2
  4053e4:	d1fb      	bne.n	4053de <task_lcd+0xeba>
									counter = 0;
  4053e6:	2200      	movs	r2, #0
  4053e8:	4b1a      	ldr	r3, [pc, #104]	; (405454 <task_lcd+0xf30>)
  4053ea:	601a      	str	r2, [r3, #0]
  4053ec:	f7ff bb5c 	b.w	404aa8 <task_lcd+0x584>
							draw_screen(1);
  4053f0:	2001      	movs	r0, #1
  4053f2:	4b17      	ldr	r3, [pc, #92]	; (405450 <task_lcd+0xf2c>)
  4053f4:	4798      	blx	r3
							flag_return = 1;
  4053f6:	2301      	movs	r3, #1
  4053f8:	703b      	strb	r3, [r7, #0]
							for (int i = 0; i < counter; i++) {
  4053fa:	4b16      	ldr	r3, [pc, #88]	; (405454 <task_lcd+0xf30>)
  4053fc:	681b      	ldr	r3, [r3, #0]
  4053fe:	2b00      	cmp	r3, #0
  405400:	dd07      	ble.n	405412 <task_lcd+0xeee>
  405402:	4a11      	ldr	r2, [pc, #68]	; (405448 <task_lcd+0xf24>)
  405404:	eb02 0383 	add.w	r3, r2, r3, lsl #2
								pass_temp[i] = 0;
  405408:	2100      	movs	r1, #0
  40540a:	f842 1b04 	str.w	r1, [r2], #4
							for (int i = 0; i < counter; i++) {
  40540e:	4293      	cmp	r3, r2
  405410:	d1fb      	bne.n	40540a <task_lcd+0xee6>
							counter = 0;
  405412:	2200      	movs	r2, #0
  405414:	4b0f      	ldr	r3, [pc, #60]	; (405454 <task_lcd+0xf30>)
  405416:	601a      	str	r2, [r3, #0]
  405418:	f7ff bb46 	b.w	404aa8 <task_lcd+0x584>
					}
				} else {
					draw_screen(1);
  40541c:	2001      	movs	r0, #1
  40541e:	4b0c      	ldr	r3, [pc, #48]	; (405450 <task_lcd+0xf2c>)
  405420:	4798      	blx	r3
					flag_return = 1;
  405422:	2301      	movs	r3, #1
  405424:	703b      	strb	r3, [r7, #0]
					for (int i = 0; i < counter; i++) {
  405426:	4b0b      	ldr	r3, [pc, #44]	; (405454 <task_lcd+0xf30>)
  405428:	681a      	ldr	r2, [r3, #0]
  40542a:	2a00      	cmp	r2, #0
  40542c:	dd07      	ble.n	40543e <task_lcd+0xf1a>
  40542e:	4b06      	ldr	r3, [pc, #24]	; (405448 <task_lcd+0xf24>)
  405430:	eb03 0282 	add.w	r2, r3, r2, lsl #2
						pass_temp[i] = 0;
  405434:	2100      	movs	r1, #0
  405436:	f843 1b04 	str.w	r1, [r3], #4
					for (int i = 0; i < counter; i++) {
  40543a:	429a      	cmp	r2, r3
  40543c:	d1fb      	bne.n	405436 <task_lcd+0xf12>
					}
					counter = 0;
  40543e:	2200      	movs	r2, #0
  405440:	4b04      	ldr	r3, [pc, #16]	; (405454 <task_lcd+0xf30>)
  405442:	601a      	str	r2, [r3, #0]
  405444:	f7ff bb30 	b.w	404aa8 <task_lcd+0x584>
  405448:	2040c914 	.word	0x2040c914
  40544c:	20400194 	.word	0x20400194
  405450:	00404065 	.word	0x00404065
  405454:	2040c900 	.word	0x2040c900

00405458 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void)
{
  405458:	b580      	push	{r7, lr}
  40545a:	b08a      	sub	sp, #40	; 0x28
    .charlength   = USART_SERIAL_CHAR_LENGTH,
    .paritytype   = USART_SERIAL_PARITY,
    .stopbits     = USART_SERIAL_STOP_BIT
  };

  sysclk_init(); /* Initialize system clocks */
  40545c:	4b3d      	ldr	r3, [pc, #244]	; (405554 <main+0xfc>)
  40545e:	4798      	blx	r3
  board_init();  /* Initialize board */
  405460:	4b3d      	ldr	r3, [pc, #244]	; (405558 <main+0x100>)
  405462:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  405464:	4e3d      	ldr	r6, [pc, #244]	; (40555c <main+0x104>)
  405466:	4b3e      	ldr	r3, [pc, #248]	; (405560 <main+0x108>)
  405468:	601e      	str	r6, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40546a:	4a3e      	ldr	r2, [pc, #248]	; (405564 <main+0x10c>)
  40546c:	4b3e      	ldr	r3, [pc, #248]	; (405568 <main+0x110>)
  40546e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  405470:	4a3e      	ldr	r2, [pc, #248]	; (40556c <main+0x114>)
  405472:	4b3f      	ldr	r3, [pc, #252]	; (405570 <main+0x118>)
  405474:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  405476:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40547a:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  40547c:	23c0      	movs	r3, #192	; 0xc0
  40547e:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  405480:	f44f 6500 	mov.w	r5, #2048	; 0x800
  405484:	9506      	str	r5, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  405486:	2400      	movs	r4, #0
  405488:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40548a:	9408      	str	r4, [sp, #32]
  40548c:	200e      	movs	r0, #14
  40548e:	4f39      	ldr	r7, [pc, #228]	; (405574 <main+0x11c>)
  405490:	47b8      	blx	r7
		usart_init_rs232(p_usart, &usart_settings,
  405492:	4a39      	ldr	r2, [pc, #228]	; (405578 <main+0x120>)
  405494:	a904      	add	r1, sp, #16
  405496:	4630      	mov	r0, r6
  405498:	4b38      	ldr	r3, [pc, #224]	; (40557c <main+0x124>)
  40549a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40549c:	4630      	mov	r0, r6
  40549e:	4b38      	ldr	r3, [pc, #224]	; (405580 <main+0x128>)
  4054a0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4054a2:	4630      	mov	r0, r6
  4054a4:	4b37      	ldr	r3, [pc, #220]	; (405584 <main+0x12c>)
  4054a6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4054a8:	f8df 8120 	ldr.w	r8, [pc, #288]	; 4055cc <main+0x174>
  4054ac:	f8d8 3000 	ldr.w	r3, [r8]
  4054b0:	4621      	mov	r1, r4
  4054b2:	6898      	ldr	r0, [r3, #8]
  4054b4:	4e34      	ldr	r6, [pc, #208]	; (405588 <main+0x130>)
  4054b6:	47b0      	blx	r6
	setbuf(stdin, NULL);
  4054b8:	f8d8 3000 	ldr.w	r3, [r8]
  4054bc:	4621      	mov	r1, r4
  4054be:	6858      	ldr	r0, [r3, #4]
  4054c0:	47b0      	blx	r6
  
  /* Initialize stdio on USART */
  stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);
  
  pmc_enable_periph_clk(BUTB_PIO_ID);
  4054c2:	200a      	movs	r0, #10
  4054c4:	47b8      	blx	r7
  pio_set_input(BUTB_PIO, BUTB_PIO_IDX_MASK, PIO_PULLUP);
  4054c6:	4e31      	ldr	r6, [pc, #196]	; (40558c <main+0x134>)
  4054c8:	2201      	movs	r2, #1
  4054ca:	4629      	mov	r1, r5
  4054cc:	4630      	mov	r0, r6
  4054ce:	4b30      	ldr	r3, [pc, #192]	; (405590 <main+0x138>)
  4054d0:	4798      	blx	r3
  
  
  pio_configure(BUTB_PIO, PIO_INPUT, BUTB_PIO_IDX_MASK, PIO_PULLUP);
  4054d2:	2301      	movs	r3, #1
  4054d4:	462a      	mov	r2, r5
  4054d6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4054da:	4630      	mov	r0, r6
  4054dc:	4f2d      	ldr	r7, [pc, #180]	; (405594 <main+0x13c>)
  4054de:	47b8      	blx	r7
  pio_handler_set(BUTB_PIO,
  4054e0:	4b2d      	ldr	r3, [pc, #180]	; (405598 <main+0x140>)
  4054e2:	9300      	str	r3, [sp, #0]
  4054e4:	2350      	movs	r3, #80	; 0x50
  4054e6:	462a      	mov	r2, r5
  4054e8:	210a      	movs	r1, #10
  4054ea:	4630      	mov	r0, r6
  4054ec:	4f2b      	ldr	r7, [pc, #172]	; (40559c <main+0x144>)
  4054ee:	47b8      	blx	r7
  BUTB_PIO_ID,
  BUTB_PIO_IDX_MASK,
  PIO_IT_FALL_EDGE,
  but_board_callback);
  
  pio_enable_interrupt(BUTB_PIO, BUTB_PIO_IDX_MASK);
  4054f0:	4629      	mov	r1, r5
  4054f2:	4630      	mov	r0, r6
  4054f4:	4b2a      	ldr	r3, [pc, #168]	; (4055a0 <main+0x148>)
  4054f6:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4054f8:	4b2a      	ldr	r3, [pc, #168]	; (4055a4 <main+0x14c>)
  4054fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4054fe:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  405500:	22e0      	movs	r2, #224	; 0xe0
  405502:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  
  NVIC_EnableIRQ(BUTB_PIO_ID);
  NVIC_SetPriority(BUTB_PIO_ID, 7);
  
  flag_rtt = true;
  405506:	2201      	movs	r2, #1
  405508:	4b27      	ldr	r3, [pc, #156]	; (4055a8 <main+0x150>)
  40550a:	701a      	strb	r2, [r3, #0]
  
  /* Create task to handler touch */
  if (xTaskCreate(task_mxt, "mxt", TASK_MXT_STACK_SIZE, NULL, TASK_MXT_STACK_PRIORITY, NULL) != pdPASS) {
  40550c:	9403      	str	r4, [sp, #12]
  40550e:	9402      	str	r4, [sp, #8]
  405510:	9401      	str	r4, [sp, #4]
  405512:	9400      	str	r4, [sp, #0]
  405514:	4623      	mov	r3, r4
  405516:	f44f 7200 	mov.w	r2, #512	; 0x200
  40551a:	4924      	ldr	r1, [pc, #144]	; (4055ac <main+0x154>)
  40551c:	4824      	ldr	r0, [pc, #144]	; (4055b0 <main+0x158>)
  40551e:	4c25      	ldr	r4, [pc, #148]	; (4055b4 <main+0x15c>)
  405520:	47a0      	blx	r4
  405522:	2801      	cmp	r0, #1
  405524:	d002      	beq.n	40552c <main+0xd4>
    printf("Failed to create test led task\r\n");
  405526:	4824      	ldr	r0, [pc, #144]	; (4055b8 <main+0x160>)
  405528:	4b24      	ldr	r3, [pc, #144]	; (4055bc <main+0x164>)
  40552a:	4798      	blx	r3
  }
  
  /* Create task to handler LCD */
  if (xTaskCreate(task_lcd, "lcd", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  40552c:	2300      	movs	r3, #0
  40552e:	9303      	str	r3, [sp, #12]
  405530:	9302      	str	r3, [sp, #8]
  405532:	9301      	str	r3, [sp, #4]
  405534:	9300      	str	r3, [sp, #0]
  405536:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40553a:	4921      	ldr	r1, [pc, #132]	; (4055c0 <main+0x168>)
  40553c:	4821      	ldr	r0, [pc, #132]	; (4055c4 <main+0x16c>)
  40553e:	4c1d      	ldr	r4, [pc, #116]	; (4055b4 <main+0x15c>)
  405540:	47a0      	blx	r4
  405542:	2801      	cmp	r0, #1
  405544:	d002      	beq.n	40554c <main+0xf4>
    printf("Failed to create test led task\r\n");
  405546:	481c      	ldr	r0, [pc, #112]	; (4055b8 <main+0x160>)
  405548:	4b1c      	ldr	r3, [pc, #112]	; (4055bc <main+0x164>)
  40554a:	4798      	blx	r3
  }
  
  /* Start the scheduler. */
  vTaskStartScheduler();
  40554c:	4b1e      	ldr	r3, [pc, #120]	; (4055c8 <main+0x170>)
  40554e:	4798      	blx	r3
  405550:	e7fe      	b.n	405550 <main+0xf8>
  405552:	bf00      	nop
  405554:	00400865 	.word	0x00400865
  405558:	00400af5 	.word	0x00400af5
  40555c:	40028000 	.word	0x40028000
  405560:	2040c9f4 	.word	0x2040c9f4
  405564:	00403f61 	.word	0x00403f61
  405568:	2040c9f0 	.word	0x2040c9f0
  40556c:	00403e85 	.word	0x00403e85
  405570:	2040c9ec 	.word	0x2040c9ec
  405574:	004018c9 	.word	0x004018c9
  405578:	08f0d180 	.word	0x08f0d180
  40557c:	00401d3d 	.word	0x00401d3d
  405580:	00401d91 	.word	0x00401d91
  405584:	00401d97 	.word	0x00401d97
  405588:	00406559 	.word	0x00406559
  40558c:	400e0e00 	.word	0x400e0e00
  405590:	004013ef 	.word	0x004013ef
  405594:	0040144d 	.word	0x0040144d
  405598:	00403de9 	.word	0x00403de9
  40559c:	004016d5 	.word	0x004016d5
  4055a0:	0040150f 	.word	0x0040150f
  4055a4:	e000e100 	.word	0xe000e100
  4055a8:	2040c911 	.word	0x2040c911
  4055ac:	0041b900 	.word	0x0041b900
  4055b0:	004043b9 	.word	0x004043b9
  4055b4:	00402e41 	.word	0x00402e41
  4055b8:	0041b904 	.word	0x0041b904
  4055bc:	00405db5 	.word	0x00405db5
  4055c0:	0041b928 	.word	0x0041b928
  4055c4:	00404525 	.word	0x00404525
  4055c8:	00403075 	.word	0x00403075
  4055cc:	204001b0 	.word	0x204001b0

004055d0 <__aeabi_drsub>:
  4055d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4055d4:	e002      	b.n	4055dc <__adddf3>
  4055d6:	bf00      	nop

004055d8 <__aeabi_dsub>:
  4055d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004055dc <__adddf3>:
  4055dc:	b530      	push	{r4, r5, lr}
  4055de:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4055e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4055e6:	ea94 0f05 	teq	r4, r5
  4055ea:	bf08      	it	eq
  4055ec:	ea90 0f02 	teqeq	r0, r2
  4055f0:	bf1f      	itttt	ne
  4055f2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4055f6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4055fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4055fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405602:	f000 80e2 	beq.w	4057ca <__adddf3+0x1ee>
  405606:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40560a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40560e:	bfb8      	it	lt
  405610:	426d      	neglt	r5, r5
  405612:	dd0c      	ble.n	40562e <__adddf3+0x52>
  405614:	442c      	add	r4, r5
  405616:	ea80 0202 	eor.w	r2, r0, r2
  40561a:	ea81 0303 	eor.w	r3, r1, r3
  40561e:	ea82 0000 	eor.w	r0, r2, r0
  405622:	ea83 0101 	eor.w	r1, r3, r1
  405626:	ea80 0202 	eor.w	r2, r0, r2
  40562a:	ea81 0303 	eor.w	r3, r1, r3
  40562e:	2d36      	cmp	r5, #54	; 0x36
  405630:	bf88      	it	hi
  405632:	bd30      	pophi	{r4, r5, pc}
  405634:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405638:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40563c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405640:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405644:	d002      	beq.n	40564c <__adddf3+0x70>
  405646:	4240      	negs	r0, r0
  405648:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40564c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405650:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405654:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405658:	d002      	beq.n	405660 <__adddf3+0x84>
  40565a:	4252      	negs	r2, r2
  40565c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405660:	ea94 0f05 	teq	r4, r5
  405664:	f000 80a7 	beq.w	4057b6 <__adddf3+0x1da>
  405668:	f1a4 0401 	sub.w	r4, r4, #1
  40566c:	f1d5 0e20 	rsbs	lr, r5, #32
  405670:	db0d      	blt.n	40568e <__adddf3+0xb2>
  405672:	fa02 fc0e 	lsl.w	ip, r2, lr
  405676:	fa22 f205 	lsr.w	r2, r2, r5
  40567a:	1880      	adds	r0, r0, r2
  40567c:	f141 0100 	adc.w	r1, r1, #0
  405680:	fa03 f20e 	lsl.w	r2, r3, lr
  405684:	1880      	adds	r0, r0, r2
  405686:	fa43 f305 	asr.w	r3, r3, r5
  40568a:	4159      	adcs	r1, r3
  40568c:	e00e      	b.n	4056ac <__adddf3+0xd0>
  40568e:	f1a5 0520 	sub.w	r5, r5, #32
  405692:	f10e 0e20 	add.w	lr, lr, #32
  405696:	2a01      	cmp	r2, #1
  405698:	fa03 fc0e 	lsl.w	ip, r3, lr
  40569c:	bf28      	it	cs
  40569e:	f04c 0c02 	orrcs.w	ip, ip, #2
  4056a2:	fa43 f305 	asr.w	r3, r3, r5
  4056a6:	18c0      	adds	r0, r0, r3
  4056a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4056ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4056b0:	d507      	bpl.n	4056c2 <__adddf3+0xe6>
  4056b2:	f04f 0e00 	mov.w	lr, #0
  4056b6:	f1dc 0c00 	rsbs	ip, ip, #0
  4056ba:	eb7e 0000 	sbcs.w	r0, lr, r0
  4056be:	eb6e 0101 	sbc.w	r1, lr, r1
  4056c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4056c6:	d31b      	bcc.n	405700 <__adddf3+0x124>
  4056c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4056cc:	d30c      	bcc.n	4056e8 <__adddf3+0x10c>
  4056ce:	0849      	lsrs	r1, r1, #1
  4056d0:	ea5f 0030 	movs.w	r0, r0, rrx
  4056d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4056d8:	f104 0401 	add.w	r4, r4, #1
  4056dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4056e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4056e4:	f080 809a 	bcs.w	40581c <__adddf3+0x240>
  4056e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4056ec:	bf08      	it	eq
  4056ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4056f2:	f150 0000 	adcs.w	r0, r0, #0
  4056f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4056fa:	ea41 0105 	orr.w	r1, r1, r5
  4056fe:	bd30      	pop	{r4, r5, pc}
  405700:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405704:	4140      	adcs	r0, r0
  405706:	eb41 0101 	adc.w	r1, r1, r1
  40570a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40570e:	f1a4 0401 	sub.w	r4, r4, #1
  405712:	d1e9      	bne.n	4056e8 <__adddf3+0x10c>
  405714:	f091 0f00 	teq	r1, #0
  405718:	bf04      	itt	eq
  40571a:	4601      	moveq	r1, r0
  40571c:	2000      	moveq	r0, #0
  40571e:	fab1 f381 	clz	r3, r1
  405722:	bf08      	it	eq
  405724:	3320      	addeq	r3, #32
  405726:	f1a3 030b 	sub.w	r3, r3, #11
  40572a:	f1b3 0220 	subs.w	r2, r3, #32
  40572e:	da0c      	bge.n	40574a <__adddf3+0x16e>
  405730:	320c      	adds	r2, #12
  405732:	dd08      	ble.n	405746 <__adddf3+0x16a>
  405734:	f102 0c14 	add.w	ip, r2, #20
  405738:	f1c2 020c 	rsb	r2, r2, #12
  40573c:	fa01 f00c 	lsl.w	r0, r1, ip
  405740:	fa21 f102 	lsr.w	r1, r1, r2
  405744:	e00c      	b.n	405760 <__adddf3+0x184>
  405746:	f102 0214 	add.w	r2, r2, #20
  40574a:	bfd8      	it	le
  40574c:	f1c2 0c20 	rsble	ip, r2, #32
  405750:	fa01 f102 	lsl.w	r1, r1, r2
  405754:	fa20 fc0c 	lsr.w	ip, r0, ip
  405758:	bfdc      	itt	le
  40575a:	ea41 010c 	orrle.w	r1, r1, ip
  40575e:	4090      	lslle	r0, r2
  405760:	1ae4      	subs	r4, r4, r3
  405762:	bfa2      	ittt	ge
  405764:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405768:	4329      	orrge	r1, r5
  40576a:	bd30      	popge	{r4, r5, pc}
  40576c:	ea6f 0404 	mvn.w	r4, r4
  405770:	3c1f      	subs	r4, #31
  405772:	da1c      	bge.n	4057ae <__adddf3+0x1d2>
  405774:	340c      	adds	r4, #12
  405776:	dc0e      	bgt.n	405796 <__adddf3+0x1ba>
  405778:	f104 0414 	add.w	r4, r4, #20
  40577c:	f1c4 0220 	rsb	r2, r4, #32
  405780:	fa20 f004 	lsr.w	r0, r0, r4
  405784:	fa01 f302 	lsl.w	r3, r1, r2
  405788:	ea40 0003 	orr.w	r0, r0, r3
  40578c:	fa21 f304 	lsr.w	r3, r1, r4
  405790:	ea45 0103 	orr.w	r1, r5, r3
  405794:	bd30      	pop	{r4, r5, pc}
  405796:	f1c4 040c 	rsb	r4, r4, #12
  40579a:	f1c4 0220 	rsb	r2, r4, #32
  40579e:	fa20 f002 	lsr.w	r0, r0, r2
  4057a2:	fa01 f304 	lsl.w	r3, r1, r4
  4057a6:	ea40 0003 	orr.w	r0, r0, r3
  4057aa:	4629      	mov	r1, r5
  4057ac:	bd30      	pop	{r4, r5, pc}
  4057ae:	fa21 f004 	lsr.w	r0, r1, r4
  4057b2:	4629      	mov	r1, r5
  4057b4:	bd30      	pop	{r4, r5, pc}
  4057b6:	f094 0f00 	teq	r4, #0
  4057ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4057be:	bf06      	itte	eq
  4057c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4057c4:	3401      	addeq	r4, #1
  4057c6:	3d01      	subne	r5, #1
  4057c8:	e74e      	b.n	405668 <__adddf3+0x8c>
  4057ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4057ce:	bf18      	it	ne
  4057d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4057d4:	d029      	beq.n	40582a <__adddf3+0x24e>
  4057d6:	ea94 0f05 	teq	r4, r5
  4057da:	bf08      	it	eq
  4057dc:	ea90 0f02 	teqeq	r0, r2
  4057e0:	d005      	beq.n	4057ee <__adddf3+0x212>
  4057e2:	ea54 0c00 	orrs.w	ip, r4, r0
  4057e6:	bf04      	itt	eq
  4057e8:	4619      	moveq	r1, r3
  4057ea:	4610      	moveq	r0, r2
  4057ec:	bd30      	pop	{r4, r5, pc}
  4057ee:	ea91 0f03 	teq	r1, r3
  4057f2:	bf1e      	ittt	ne
  4057f4:	2100      	movne	r1, #0
  4057f6:	2000      	movne	r0, #0
  4057f8:	bd30      	popne	{r4, r5, pc}
  4057fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4057fe:	d105      	bne.n	40580c <__adddf3+0x230>
  405800:	0040      	lsls	r0, r0, #1
  405802:	4149      	adcs	r1, r1
  405804:	bf28      	it	cs
  405806:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40580a:	bd30      	pop	{r4, r5, pc}
  40580c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405810:	bf3c      	itt	cc
  405812:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405816:	bd30      	popcc	{r4, r5, pc}
  405818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40581c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405824:	f04f 0000 	mov.w	r0, #0
  405828:	bd30      	pop	{r4, r5, pc}
  40582a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40582e:	bf1a      	itte	ne
  405830:	4619      	movne	r1, r3
  405832:	4610      	movne	r0, r2
  405834:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405838:	bf1c      	itt	ne
  40583a:	460b      	movne	r3, r1
  40583c:	4602      	movne	r2, r0
  40583e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405842:	bf06      	itte	eq
  405844:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405848:	ea91 0f03 	teqeq	r1, r3
  40584c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405850:	bd30      	pop	{r4, r5, pc}
  405852:	bf00      	nop

00405854 <__aeabi_ui2d>:
  405854:	f090 0f00 	teq	r0, #0
  405858:	bf04      	itt	eq
  40585a:	2100      	moveq	r1, #0
  40585c:	4770      	bxeq	lr
  40585e:	b530      	push	{r4, r5, lr}
  405860:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405864:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405868:	f04f 0500 	mov.w	r5, #0
  40586c:	f04f 0100 	mov.w	r1, #0
  405870:	e750      	b.n	405714 <__adddf3+0x138>
  405872:	bf00      	nop

00405874 <__aeabi_i2d>:
  405874:	f090 0f00 	teq	r0, #0
  405878:	bf04      	itt	eq
  40587a:	2100      	moveq	r1, #0
  40587c:	4770      	bxeq	lr
  40587e:	b530      	push	{r4, r5, lr}
  405880:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405884:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405888:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40588c:	bf48      	it	mi
  40588e:	4240      	negmi	r0, r0
  405890:	f04f 0100 	mov.w	r1, #0
  405894:	e73e      	b.n	405714 <__adddf3+0x138>
  405896:	bf00      	nop

00405898 <__aeabi_f2d>:
  405898:	0042      	lsls	r2, r0, #1
  40589a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40589e:	ea4f 0131 	mov.w	r1, r1, rrx
  4058a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4058a6:	bf1f      	itttt	ne
  4058a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4058ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4058b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4058b4:	4770      	bxne	lr
  4058b6:	f092 0f00 	teq	r2, #0
  4058ba:	bf14      	ite	ne
  4058bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4058c0:	4770      	bxeq	lr
  4058c2:	b530      	push	{r4, r5, lr}
  4058c4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4058c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4058cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4058d0:	e720      	b.n	405714 <__adddf3+0x138>
  4058d2:	bf00      	nop

004058d4 <__aeabi_ul2d>:
  4058d4:	ea50 0201 	orrs.w	r2, r0, r1
  4058d8:	bf08      	it	eq
  4058da:	4770      	bxeq	lr
  4058dc:	b530      	push	{r4, r5, lr}
  4058de:	f04f 0500 	mov.w	r5, #0
  4058e2:	e00a      	b.n	4058fa <__aeabi_l2d+0x16>

004058e4 <__aeabi_l2d>:
  4058e4:	ea50 0201 	orrs.w	r2, r0, r1
  4058e8:	bf08      	it	eq
  4058ea:	4770      	bxeq	lr
  4058ec:	b530      	push	{r4, r5, lr}
  4058ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4058f2:	d502      	bpl.n	4058fa <__aeabi_l2d+0x16>
  4058f4:	4240      	negs	r0, r0
  4058f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4058fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4058fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405902:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405906:	f43f aedc 	beq.w	4056c2 <__adddf3+0xe6>
  40590a:	f04f 0203 	mov.w	r2, #3
  40590e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405912:	bf18      	it	ne
  405914:	3203      	addne	r2, #3
  405916:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40591a:	bf18      	it	ne
  40591c:	3203      	addne	r2, #3
  40591e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405922:	f1c2 0320 	rsb	r3, r2, #32
  405926:	fa00 fc03 	lsl.w	ip, r0, r3
  40592a:	fa20 f002 	lsr.w	r0, r0, r2
  40592e:	fa01 fe03 	lsl.w	lr, r1, r3
  405932:	ea40 000e 	orr.w	r0, r0, lr
  405936:	fa21 f102 	lsr.w	r1, r1, r2
  40593a:	4414      	add	r4, r2
  40593c:	e6c1      	b.n	4056c2 <__adddf3+0xe6>
  40593e:	bf00      	nop

00405940 <__aeabi_dmul>:
  405940:	b570      	push	{r4, r5, r6, lr}
  405942:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405946:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40594a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40594e:	bf1d      	ittte	ne
  405950:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405954:	ea94 0f0c 	teqne	r4, ip
  405958:	ea95 0f0c 	teqne	r5, ip
  40595c:	f000 f8de 	bleq	405b1c <__aeabi_dmul+0x1dc>
  405960:	442c      	add	r4, r5
  405962:	ea81 0603 	eor.w	r6, r1, r3
  405966:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40596a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40596e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405972:	bf18      	it	ne
  405974:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40597c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405980:	d038      	beq.n	4059f4 <__aeabi_dmul+0xb4>
  405982:	fba0 ce02 	umull	ip, lr, r0, r2
  405986:	f04f 0500 	mov.w	r5, #0
  40598a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40598e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405992:	fbe0 e503 	umlal	lr, r5, r0, r3
  405996:	f04f 0600 	mov.w	r6, #0
  40599a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40599e:	f09c 0f00 	teq	ip, #0
  4059a2:	bf18      	it	ne
  4059a4:	f04e 0e01 	orrne.w	lr, lr, #1
  4059a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4059ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4059b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4059b4:	d204      	bcs.n	4059c0 <__aeabi_dmul+0x80>
  4059b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4059ba:	416d      	adcs	r5, r5
  4059bc:	eb46 0606 	adc.w	r6, r6, r6
  4059c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4059c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4059c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4059cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4059d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4059d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4059d8:	bf88      	it	hi
  4059da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4059de:	d81e      	bhi.n	405a1e <__aeabi_dmul+0xde>
  4059e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4059e4:	bf08      	it	eq
  4059e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4059ea:	f150 0000 	adcs.w	r0, r0, #0
  4059ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4059f2:	bd70      	pop	{r4, r5, r6, pc}
  4059f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4059f8:	ea46 0101 	orr.w	r1, r6, r1
  4059fc:	ea40 0002 	orr.w	r0, r0, r2
  405a00:	ea81 0103 	eor.w	r1, r1, r3
  405a04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405a08:	bfc2      	ittt	gt
  405a0a:	ebd4 050c 	rsbsgt	r5, r4, ip
  405a0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405a12:	bd70      	popgt	{r4, r5, r6, pc}
  405a14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405a18:	f04f 0e00 	mov.w	lr, #0
  405a1c:	3c01      	subs	r4, #1
  405a1e:	f300 80ab 	bgt.w	405b78 <__aeabi_dmul+0x238>
  405a22:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405a26:	bfde      	ittt	le
  405a28:	2000      	movle	r0, #0
  405a2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405a2e:	bd70      	pople	{r4, r5, r6, pc}
  405a30:	f1c4 0400 	rsb	r4, r4, #0
  405a34:	3c20      	subs	r4, #32
  405a36:	da35      	bge.n	405aa4 <__aeabi_dmul+0x164>
  405a38:	340c      	adds	r4, #12
  405a3a:	dc1b      	bgt.n	405a74 <__aeabi_dmul+0x134>
  405a3c:	f104 0414 	add.w	r4, r4, #20
  405a40:	f1c4 0520 	rsb	r5, r4, #32
  405a44:	fa00 f305 	lsl.w	r3, r0, r5
  405a48:	fa20 f004 	lsr.w	r0, r0, r4
  405a4c:	fa01 f205 	lsl.w	r2, r1, r5
  405a50:	ea40 0002 	orr.w	r0, r0, r2
  405a54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405a58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405a5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405a60:	fa21 f604 	lsr.w	r6, r1, r4
  405a64:	eb42 0106 	adc.w	r1, r2, r6
  405a68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405a6c:	bf08      	it	eq
  405a6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405a72:	bd70      	pop	{r4, r5, r6, pc}
  405a74:	f1c4 040c 	rsb	r4, r4, #12
  405a78:	f1c4 0520 	rsb	r5, r4, #32
  405a7c:	fa00 f304 	lsl.w	r3, r0, r4
  405a80:	fa20 f005 	lsr.w	r0, r0, r5
  405a84:	fa01 f204 	lsl.w	r2, r1, r4
  405a88:	ea40 0002 	orr.w	r0, r0, r2
  405a8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405a90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405a94:	f141 0100 	adc.w	r1, r1, #0
  405a98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405a9c:	bf08      	it	eq
  405a9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405aa2:	bd70      	pop	{r4, r5, r6, pc}
  405aa4:	f1c4 0520 	rsb	r5, r4, #32
  405aa8:	fa00 f205 	lsl.w	r2, r0, r5
  405aac:	ea4e 0e02 	orr.w	lr, lr, r2
  405ab0:	fa20 f304 	lsr.w	r3, r0, r4
  405ab4:	fa01 f205 	lsl.w	r2, r1, r5
  405ab8:	ea43 0302 	orr.w	r3, r3, r2
  405abc:	fa21 f004 	lsr.w	r0, r1, r4
  405ac0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405ac4:	fa21 f204 	lsr.w	r2, r1, r4
  405ac8:	ea20 0002 	bic.w	r0, r0, r2
  405acc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405ad0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405ad4:	bf08      	it	eq
  405ad6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405ada:	bd70      	pop	{r4, r5, r6, pc}
  405adc:	f094 0f00 	teq	r4, #0
  405ae0:	d10f      	bne.n	405b02 <__aeabi_dmul+0x1c2>
  405ae2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405ae6:	0040      	lsls	r0, r0, #1
  405ae8:	eb41 0101 	adc.w	r1, r1, r1
  405aec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405af0:	bf08      	it	eq
  405af2:	3c01      	subeq	r4, #1
  405af4:	d0f7      	beq.n	405ae6 <__aeabi_dmul+0x1a6>
  405af6:	ea41 0106 	orr.w	r1, r1, r6
  405afa:	f095 0f00 	teq	r5, #0
  405afe:	bf18      	it	ne
  405b00:	4770      	bxne	lr
  405b02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405b06:	0052      	lsls	r2, r2, #1
  405b08:	eb43 0303 	adc.w	r3, r3, r3
  405b0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405b10:	bf08      	it	eq
  405b12:	3d01      	subeq	r5, #1
  405b14:	d0f7      	beq.n	405b06 <__aeabi_dmul+0x1c6>
  405b16:	ea43 0306 	orr.w	r3, r3, r6
  405b1a:	4770      	bx	lr
  405b1c:	ea94 0f0c 	teq	r4, ip
  405b20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405b24:	bf18      	it	ne
  405b26:	ea95 0f0c 	teqne	r5, ip
  405b2a:	d00c      	beq.n	405b46 <__aeabi_dmul+0x206>
  405b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405b30:	bf18      	it	ne
  405b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405b36:	d1d1      	bne.n	405adc <__aeabi_dmul+0x19c>
  405b38:	ea81 0103 	eor.w	r1, r1, r3
  405b3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405b40:	f04f 0000 	mov.w	r0, #0
  405b44:	bd70      	pop	{r4, r5, r6, pc}
  405b46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405b4a:	bf06      	itte	eq
  405b4c:	4610      	moveq	r0, r2
  405b4e:	4619      	moveq	r1, r3
  405b50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405b54:	d019      	beq.n	405b8a <__aeabi_dmul+0x24a>
  405b56:	ea94 0f0c 	teq	r4, ip
  405b5a:	d102      	bne.n	405b62 <__aeabi_dmul+0x222>
  405b5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405b60:	d113      	bne.n	405b8a <__aeabi_dmul+0x24a>
  405b62:	ea95 0f0c 	teq	r5, ip
  405b66:	d105      	bne.n	405b74 <__aeabi_dmul+0x234>
  405b68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405b6c:	bf1c      	itt	ne
  405b6e:	4610      	movne	r0, r2
  405b70:	4619      	movne	r1, r3
  405b72:	d10a      	bne.n	405b8a <__aeabi_dmul+0x24a>
  405b74:	ea81 0103 	eor.w	r1, r1, r3
  405b78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405b7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405b80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405b84:	f04f 0000 	mov.w	r0, #0
  405b88:	bd70      	pop	{r4, r5, r6, pc}
  405b8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405b8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405b92:	bd70      	pop	{r4, r5, r6, pc}

00405b94 <__aeabi_ddiv>:
  405b94:	b570      	push	{r4, r5, r6, lr}
  405b96:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405b9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405b9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405ba2:	bf1d      	ittte	ne
  405ba4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405ba8:	ea94 0f0c 	teqne	r4, ip
  405bac:	ea95 0f0c 	teqne	r5, ip
  405bb0:	f000 f8a7 	bleq	405d02 <__aeabi_ddiv+0x16e>
  405bb4:	eba4 0405 	sub.w	r4, r4, r5
  405bb8:	ea81 0e03 	eor.w	lr, r1, r3
  405bbc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405bc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405bc4:	f000 8088 	beq.w	405cd8 <__aeabi_ddiv+0x144>
  405bc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405bcc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405bd0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405bd4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405bd8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405bdc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405be0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405be4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405be8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405bec:	429d      	cmp	r5, r3
  405bee:	bf08      	it	eq
  405bf0:	4296      	cmpeq	r6, r2
  405bf2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405bf6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405bfa:	d202      	bcs.n	405c02 <__aeabi_ddiv+0x6e>
  405bfc:	085b      	lsrs	r3, r3, #1
  405bfe:	ea4f 0232 	mov.w	r2, r2, rrx
  405c02:	1ab6      	subs	r6, r6, r2
  405c04:	eb65 0503 	sbc.w	r5, r5, r3
  405c08:	085b      	lsrs	r3, r3, #1
  405c0a:	ea4f 0232 	mov.w	r2, r2, rrx
  405c0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  405c12:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405c16:	ebb6 0e02 	subs.w	lr, r6, r2
  405c1a:	eb75 0e03 	sbcs.w	lr, r5, r3
  405c1e:	bf22      	ittt	cs
  405c20:	1ab6      	subcs	r6, r6, r2
  405c22:	4675      	movcs	r5, lr
  405c24:	ea40 000c 	orrcs.w	r0, r0, ip
  405c28:	085b      	lsrs	r3, r3, #1
  405c2a:	ea4f 0232 	mov.w	r2, r2, rrx
  405c2e:	ebb6 0e02 	subs.w	lr, r6, r2
  405c32:	eb75 0e03 	sbcs.w	lr, r5, r3
  405c36:	bf22      	ittt	cs
  405c38:	1ab6      	subcs	r6, r6, r2
  405c3a:	4675      	movcs	r5, lr
  405c3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405c40:	085b      	lsrs	r3, r3, #1
  405c42:	ea4f 0232 	mov.w	r2, r2, rrx
  405c46:	ebb6 0e02 	subs.w	lr, r6, r2
  405c4a:	eb75 0e03 	sbcs.w	lr, r5, r3
  405c4e:	bf22      	ittt	cs
  405c50:	1ab6      	subcs	r6, r6, r2
  405c52:	4675      	movcs	r5, lr
  405c54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405c58:	085b      	lsrs	r3, r3, #1
  405c5a:	ea4f 0232 	mov.w	r2, r2, rrx
  405c5e:	ebb6 0e02 	subs.w	lr, r6, r2
  405c62:	eb75 0e03 	sbcs.w	lr, r5, r3
  405c66:	bf22      	ittt	cs
  405c68:	1ab6      	subcs	r6, r6, r2
  405c6a:	4675      	movcs	r5, lr
  405c6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405c70:	ea55 0e06 	orrs.w	lr, r5, r6
  405c74:	d018      	beq.n	405ca8 <__aeabi_ddiv+0x114>
  405c76:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405c7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405c7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405c82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405c86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405c8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405c8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405c92:	d1c0      	bne.n	405c16 <__aeabi_ddiv+0x82>
  405c94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405c98:	d10b      	bne.n	405cb2 <__aeabi_ddiv+0x11e>
  405c9a:	ea41 0100 	orr.w	r1, r1, r0
  405c9e:	f04f 0000 	mov.w	r0, #0
  405ca2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405ca6:	e7b6      	b.n	405c16 <__aeabi_ddiv+0x82>
  405ca8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405cac:	bf04      	itt	eq
  405cae:	4301      	orreq	r1, r0
  405cb0:	2000      	moveq	r0, #0
  405cb2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405cb6:	bf88      	it	hi
  405cb8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405cbc:	f63f aeaf 	bhi.w	405a1e <__aeabi_dmul+0xde>
  405cc0:	ebb5 0c03 	subs.w	ip, r5, r3
  405cc4:	bf04      	itt	eq
  405cc6:	ebb6 0c02 	subseq.w	ip, r6, r2
  405cca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405cce:	f150 0000 	adcs.w	r0, r0, #0
  405cd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405cd6:	bd70      	pop	{r4, r5, r6, pc}
  405cd8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405cdc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405ce0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405ce4:	bfc2      	ittt	gt
  405ce6:	ebd4 050c 	rsbsgt	r5, r4, ip
  405cea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405cee:	bd70      	popgt	{r4, r5, r6, pc}
  405cf0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405cf4:	f04f 0e00 	mov.w	lr, #0
  405cf8:	3c01      	subs	r4, #1
  405cfa:	e690      	b.n	405a1e <__aeabi_dmul+0xde>
  405cfc:	ea45 0e06 	orr.w	lr, r5, r6
  405d00:	e68d      	b.n	405a1e <__aeabi_dmul+0xde>
  405d02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405d06:	ea94 0f0c 	teq	r4, ip
  405d0a:	bf08      	it	eq
  405d0c:	ea95 0f0c 	teqeq	r5, ip
  405d10:	f43f af3b 	beq.w	405b8a <__aeabi_dmul+0x24a>
  405d14:	ea94 0f0c 	teq	r4, ip
  405d18:	d10a      	bne.n	405d30 <__aeabi_ddiv+0x19c>
  405d1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405d1e:	f47f af34 	bne.w	405b8a <__aeabi_dmul+0x24a>
  405d22:	ea95 0f0c 	teq	r5, ip
  405d26:	f47f af25 	bne.w	405b74 <__aeabi_dmul+0x234>
  405d2a:	4610      	mov	r0, r2
  405d2c:	4619      	mov	r1, r3
  405d2e:	e72c      	b.n	405b8a <__aeabi_dmul+0x24a>
  405d30:	ea95 0f0c 	teq	r5, ip
  405d34:	d106      	bne.n	405d44 <__aeabi_ddiv+0x1b0>
  405d36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405d3a:	f43f aefd 	beq.w	405b38 <__aeabi_dmul+0x1f8>
  405d3e:	4610      	mov	r0, r2
  405d40:	4619      	mov	r1, r3
  405d42:	e722      	b.n	405b8a <__aeabi_dmul+0x24a>
  405d44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405d48:	bf18      	it	ne
  405d4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405d4e:	f47f aec5 	bne.w	405adc <__aeabi_dmul+0x19c>
  405d52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405d56:	f47f af0d 	bne.w	405b74 <__aeabi_dmul+0x234>
  405d5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  405d5e:	f47f aeeb 	bne.w	405b38 <__aeabi_dmul+0x1f8>
  405d62:	e712      	b.n	405b8a <__aeabi_dmul+0x24a>

00405d64 <__libc_init_array>:
  405d64:	b570      	push	{r4, r5, r6, lr}
  405d66:	4e0f      	ldr	r6, [pc, #60]	; (405da4 <__libc_init_array+0x40>)
  405d68:	4d0f      	ldr	r5, [pc, #60]	; (405da8 <__libc_init_array+0x44>)
  405d6a:	1b76      	subs	r6, r6, r5
  405d6c:	10b6      	asrs	r6, r6, #2
  405d6e:	bf18      	it	ne
  405d70:	2400      	movne	r4, #0
  405d72:	d005      	beq.n	405d80 <__libc_init_array+0x1c>
  405d74:	3401      	adds	r4, #1
  405d76:	f855 3b04 	ldr.w	r3, [r5], #4
  405d7a:	4798      	blx	r3
  405d7c:	42a6      	cmp	r6, r4
  405d7e:	d1f9      	bne.n	405d74 <__libc_init_array+0x10>
  405d80:	4e0a      	ldr	r6, [pc, #40]	; (405dac <__libc_init_array+0x48>)
  405d82:	4d0b      	ldr	r5, [pc, #44]	; (405db0 <__libc_init_array+0x4c>)
  405d84:	1b76      	subs	r6, r6, r5
  405d86:	f015 fe99 	bl	41babc <_init>
  405d8a:	10b6      	asrs	r6, r6, #2
  405d8c:	bf18      	it	ne
  405d8e:	2400      	movne	r4, #0
  405d90:	d006      	beq.n	405da0 <__libc_init_array+0x3c>
  405d92:	3401      	adds	r4, #1
  405d94:	f855 3b04 	ldr.w	r3, [r5], #4
  405d98:	4798      	blx	r3
  405d9a:	42a6      	cmp	r6, r4
  405d9c:	d1f9      	bne.n	405d92 <__libc_init_array+0x2e>
  405d9e:	bd70      	pop	{r4, r5, r6, pc}
  405da0:	bd70      	pop	{r4, r5, r6, pc}
  405da2:	bf00      	nop
  405da4:	0041bac8 	.word	0x0041bac8
  405da8:	0041bac8 	.word	0x0041bac8
  405dac:	0041bad0 	.word	0x0041bad0
  405db0:	0041bac8 	.word	0x0041bac8

00405db4 <iprintf>:
  405db4:	b40f      	push	{r0, r1, r2, r3}
  405db6:	b500      	push	{lr}
  405db8:	4907      	ldr	r1, [pc, #28]	; (405dd8 <iprintf+0x24>)
  405dba:	b083      	sub	sp, #12
  405dbc:	ab04      	add	r3, sp, #16
  405dbe:	6808      	ldr	r0, [r1, #0]
  405dc0:	f853 2b04 	ldr.w	r2, [r3], #4
  405dc4:	6881      	ldr	r1, [r0, #8]
  405dc6:	9301      	str	r3, [sp, #4]
  405dc8:	f000 fd48 	bl	40685c <_vfiprintf_r>
  405dcc:	b003      	add	sp, #12
  405dce:	f85d eb04 	ldr.w	lr, [sp], #4
  405dd2:	b004      	add	sp, #16
  405dd4:	4770      	bx	lr
  405dd6:	bf00      	nop
  405dd8:	204001b0 	.word	0x204001b0

00405ddc <malloc>:
  405ddc:	4b02      	ldr	r3, [pc, #8]	; (405de8 <malloc+0xc>)
  405dde:	4601      	mov	r1, r0
  405de0:	6818      	ldr	r0, [r3, #0]
  405de2:	f000 b803 	b.w	405dec <_malloc_r>
  405de6:	bf00      	nop
  405de8:	204001b0 	.word	0x204001b0

00405dec <_malloc_r>:
  405dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405df0:	f101 060b 	add.w	r6, r1, #11
  405df4:	2e16      	cmp	r6, #22
  405df6:	b083      	sub	sp, #12
  405df8:	4605      	mov	r5, r0
  405dfa:	f240 809e 	bls.w	405f3a <_malloc_r+0x14e>
  405dfe:	f036 0607 	bics.w	r6, r6, #7
  405e02:	f100 80bd 	bmi.w	405f80 <_malloc_r+0x194>
  405e06:	42b1      	cmp	r1, r6
  405e08:	f200 80ba 	bhi.w	405f80 <_malloc_r+0x194>
  405e0c:	f000 fb86 	bl	40651c <__malloc_lock>
  405e10:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405e14:	f0c0 8293 	bcc.w	40633e <_malloc_r+0x552>
  405e18:	0a73      	lsrs	r3, r6, #9
  405e1a:	f000 80b8 	beq.w	405f8e <_malloc_r+0x1a2>
  405e1e:	2b04      	cmp	r3, #4
  405e20:	f200 8179 	bhi.w	406116 <_malloc_r+0x32a>
  405e24:	09b3      	lsrs	r3, r6, #6
  405e26:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405e2a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405e2e:	00c3      	lsls	r3, r0, #3
  405e30:	4fbf      	ldr	r7, [pc, #764]	; (406130 <_malloc_r+0x344>)
  405e32:	443b      	add	r3, r7
  405e34:	f1a3 0108 	sub.w	r1, r3, #8
  405e38:	685c      	ldr	r4, [r3, #4]
  405e3a:	42a1      	cmp	r1, r4
  405e3c:	d106      	bne.n	405e4c <_malloc_r+0x60>
  405e3e:	e00c      	b.n	405e5a <_malloc_r+0x6e>
  405e40:	2a00      	cmp	r2, #0
  405e42:	f280 80aa 	bge.w	405f9a <_malloc_r+0x1ae>
  405e46:	68e4      	ldr	r4, [r4, #12]
  405e48:	42a1      	cmp	r1, r4
  405e4a:	d006      	beq.n	405e5a <_malloc_r+0x6e>
  405e4c:	6863      	ldr	r3, [r4, #4]
  405e4e:	f023 0303 	bic.w	r3, r3, #3
  405e52:	1b9a      	subs	r2, r3, r6
  405e54:	2a0f      	cmp	r2, #15
  405e56:	ddf3      	ble.n	405e40 <_malloc_r+0x54>
  405e58:	4670      	mov	r0, lr
  405e5a:	693c      	ldr	r4, [r7, #16]
  405e5c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406144 <_malloc_r+0x358>
  405e60:	4574      	cmp	r4, lr
  405e62:	f000 81ab 	beq.w	4061bc <_malloc_r+0x3d0>
  405e66:	6863      	ldr	r3, [r4, #4]
  405e68:	f023 0303 	bic.w	r3, r3, #3
  405e6c:	1b9a      	subs	r2, r3, r6
  405e6e:	2a0f      	cmp	r2, #15
  405e70:	f300 8190 	bgt.w	406194 <_malloc_r+0x3a8>
  405e74:	2a00      	cmp	r2, #0
  405e76:	f8c7 e014 	str.w	lr, [r7, #20]
  405e7a:	f8c7 e010 	str.w	lr, [r7, #16]
  405e7e:	f280 809d 	bge.w	405fbc <_malloc_r+0x1d0>
  405e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405e86:	f080 8161 	bcs.w	40614c <_malloc_r+0x360>
  405e8a:	08db      	lsrs	r3, r3, #3
  405e8c:	f103 0c01 	add.w	ip, r3, #1
  405e90:	1099      	asrs	r1, r3, #2
  405e92:	687a      	ldr	r2, [r7, #4]
  405e94:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405e98:	f8c4 8008 	str.w	r8, [r4, #8]
  405e9c:	2301      	movs	r3, #1
  405e9e:	408b      	lsls	r3, r1
  405ea0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405ea4:	4313      	orrs	r3, r2
  405ea6:	3908      	subs	r1, #8
  405ea8:	60e1      	str	r1, [r4, #12]
  405eaa:	607b      	str	r3, [r7, #4]
  405eac:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405eb0:	f8c8 400c 	str.w	r4, [r8, #12]
  405eb4:	1082      	asrs	r2, r0, #2
  405eb6:	2401      	movs	r4, #1
  405eb8:	4094      	lsls	r4, r2
  405eba:	429c      	cmp	r4, r3
  405ebc:	f200 808b 	bhi.w	405fd6 <_malloc_r+0x1ea>
  405ec0:	421c      	tst	r4, r3
  405ec2:	d106      	bne.n	405ed2 <_malloc_r+0xe6>
  405ec4:	f020 0003 	bic.w	r0, r0, #3
  405ec8:	0064      	lsls	r4, r4, #1
  405eca:	421c      	tst	r4, r3
  405ecc:	f100 0004 	add.w	r0, r0, #4
  405ed0:	d0fa      	beq.n	405ec8 <_malloc_r+0xdc>
  405ed2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405ed6:	46cc      	mov	ip, r9
  405ed8:	4680      	mov	r8, r0
  405eda:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405ede:	459c      	cmp	ip, r3
  405ee0:	d107      	bne.n	405ef2 <_malloc_r+0x106>
  405ee2:	e16d      	b.n	4061c0 <_malloc_r+0x3d4>
  405ee4:	2a00      	cmp	r2, #0
  405ee6:	f280 817b 	bge.w	4061e0 <_malloc_r+0x3f4>
  405eea:	68db      	ldr	r3, [r3, #12]
  405eec:	459c      	cmp	ip, r3
  405eee:	f000 8167 	beq.w	4061c0 <_malloc_r+0x3d4>
  405ef2:	6859      	ldr	r1, [r3, #4]
  405ef4:	f021 0103 	bic.w	r1, r1, #3
  405ef8:	1b8a      	subs	r2, r1, r6
  405efa:	2a0f      	cmp	r2, #15
  405efc:	ddf2      	ble.n	405ee4 <_malloc_r+0xf8>
  405efe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405f02:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405f06:	9300      	str	r3, [sp, #0]
  405f08:	199c      	adds	r4, r3, r6
  405f0a:	4628      	mov	r0, r5
  405f0c:	f046 0601 	orr.w	r6, r6, #1
  405f10:	f042 0501 	orr.w	r5, r2, #1
  405f14:	605e      	str	r6, [r3, #4]
  405f16:	f8c8 c00c 	str.w	ip, [r8, #12]
  405f1a:	f8cc 8008 	str.w	r8, [ip, #8]
  405f1e:	617c      	str	r4, [r7, #20]
  405f20:	613c      	str	r4, [r7, #16]
  405f22:	f8c4 e00c 	str.w	lr, [r4, #12]
  405f26:	f8c4 e008 	str.w	lr, [r4, #8]
  405f2a:	6065      	str	r5, [r4, #4]
  405f2c:	505a      	str	r2, [r3, r1]
  405f2e:	f000 fafb 	bl	406528 <__malloc_unlock>
  405f32:	9b00      	ldr	r3, [sp, #0]
  405f34:	f103 0408 	add.w	r4, r3, #8
  405f38:	e01e      	b.n	405f78 <_malloc_r+0x18c>
  405f3a:	2910      	cmp	r1, #16
  405f3c:	d820      	bhi.n	405f80 <_malloc_r+0x194>
  405f3e:	f000 faed 	bl	40651c <__malloc_lock>
  405f42:	2610      	movs	r6, #16
  405f44:	2318      	movs	r3, #24
  405f46:	2002      	movs	r0, #2
  405f48:	4f79      	ldr	r7, [pc, #484]	; (406130 <_malloc_r+0x344>)
  405f4a:	443b      	add	r3, r7
  405f4c:	f1a3 0208 	sub.w	r2, r3, #8
  405f50:	685c      	ldr	r4, [r3, #4]
  405f52:	4294      	cmp	r4, r2
  405f54:	f000 813d 	beq.w	4061d2 <_malloc_r+0x3e6>
  405f58:	6863      	ldr	r3, [r4, #4]
  405f5a:	68e1      	ldr	r1, [r4, #12]
  405f5c:	68a6      	ldr	r6, [r4, #8]
  405f5e:	f023 0303 	bic.w	r3, r3, #3
  405f62:	4423      	add	r3, r4
  405f64:	4628      	mov	r0, r5
  405f66:	685a      	ldr	r2, [r3, #4]
  405f68:	60f1      	str	r1, [r6, #12]
  405f6a:	f042 0201 	orr.w	r2, r2, #1
  405f6e:	608e      	str	r6, [r1, #8]
  405f70:	605a      	str	r2, [r3, #4]
  405f72:	f000 fad9 	bl	406528 <__malloc_unlock>
  405f76:	3408      	adds	r4, #8
  405f78:	4620      	mov	r0, r4
  405f7a:	b003      	add	sp, #12
  405f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f80:	2400      	movs	r4, #0
  405f82:	230c      	movs	r3, #12
  405f84:	4620      	mov	r0, r4
  405f86:	602b      	str	r3, [r5, #0]
  405f88:	b003      	add	sp, #12
  405f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f8e:	2040      	movs	r0, #64	; 0x40
  405f90:	f44f 7300 	mov.w	r3, #512	; 0x200
  405f94:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405f98:	e74a      	b.n	405e30 <_malloc_r+0x44>
  405f9a:	4423      	add	r3, r4
  405f9c:	68e1      	ldr	r1, [r4, #12]
  405f9e:	685a      	ldr	r2, [r3, #4]
  405fa0:	68a6      	ldr	r6, [r4, #8]
  405fa2:	f042 0201 	orr.w	r2, r2, #1
  405fa6:	60f1      	str	r1, [r6, #12]
  405fa8:	4628      	mov	r0, r5
  405faa:	608e      	str	r6, [r1, #8]
  405fac:	605a      	str	r2, [r3, #4]
  405fae:	f000 fabb 	bl	406528 <__malloc_unlock>
  405fb2:	3408      	adds	r4, #8
  405fb4:	4620      	mov	r0, r4
  405fb6:	b003      	add	sp, #12
  405fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405fbc:	4423      	add	r3, r4
  405fbe:	4628      	mov	r0, r5
  405fc0:	685a      	ldr	r2, [r3, #4]
  405fc2:	f042 0201 	orr.w	r2, r2, #1
  405fc6:	605a      	str	r2, [r3, #4]
  405fc8:	f000 faae 	bl	406528 <__malloc_unlock>
  405fcc:	3408      	adds	r4, #8
  405fce:	4620      	mov	r0, r4
  405fd0:	b003      	add	sp, #12
  405fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405fd6:	68bc      	ldr	r4, [r7, #8]
  405fd8:	6863      	ldr	r3, [r4, #4]
  405fda:	f023 0803 	bic.w	r8, r3, #3
  405fde:	45b0      	cmp	r8, r6
  405fe0:	d304      	bcc.n	405fec <_malloc_r+0x200>
  405fe2:	eba8 0306 	sub.w	r3, r8, r6
  405fe6:	2b0f      	cmp	r3, #15
  405fe8:	f300 8085 	bgt.w	4060f6 <_malloc_r+0x30a>
  405fec:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406148 <_malloc_r+0x35c>
  405ff0:	4b50      	ldr	r3, [pc, #320]	; (406134 <_malloc_r+0x348>)
  405ff2:	f8d9 2000 	ldr.w	r2, [r9]
  405ff6:	681b      	ldr	r3, [r3, #0]
  405ff8:	3201      	adds	r2, #1
  405ffa:	4433      	add	r3, r6
  405ffc:	eb04 0a08 	add.w	sl, r4, r8
  406000:	f000 8155 	beq.w	4062ae <_malloc_r+0x4c2>
  406004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406008:	330f      	adds	r3, #15
  40600a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40600e:	f02b 0b0f 	bic.w	fp, fp, #15
  406012:	4659      	mov	r1, fp
  406014:	4628      	mov	r0, r5
  406016:	f000 fa8d 	bl	406534 <_sbrk_r>
  40601a:	1c41      	adds	r1, r0, #1
  40601c:	4602      	mov	r2, r0
  40601e:	f000 80fc 	beq.w	40621a <_malloc_r+0x42e>
  406022:	4582      	cmp	sl, r0
  406024:	f200 80f7 	bhi.w	406216 <_malloc_r+0x42a>
  406028:	4b43      	ldr	r3, [pc, #268]	; (406138 <_malloc_r+0x34c>)
  40602a:	6819      	ldr	r1, [r3, #0]
  40602c:	4459      	add	r1, fp
  40602e:	6019      	str	r1, [r3, #0]
  406030:	f000 814d 	beq.w	4062ce <_malloc_r+0x4e2>
  406034:	f8d9 0000 	ldr.w	r0, [r9]
  406038:	3001      	adds	r0, #1
  40603a:	bf1b      	ittet	ne
  40603c:	eba2 0a0a 	subne.w	sl, r2, sl
  406040:	4451      	addne	r1, sl
  406042:	f8c9 2000 	streq.w	r2, [r9]
  406046:	6019      	strne	r1, [r3, #0]
  406048:	f012 0107 	ands.w	r1, r2, #7
  40604c:	f000 8115 	beq.w	40627a <_malloc_r+0x48e>
  406050:	f1c1 0008 	rsb	r0, r1, #8
  406054:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406058:	4402      	add	r2, r0
  40605a:	3108      	adds	r1, #8
  40605c:	eb02 090b 	add.w	r9, r2, fp
  406060:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406064:	eba1 0909 	sub.w	r9, r1, r9
  406068:	4649      	mov	r1, r9
  40606a:	4628      	mov	r0, r5
  40606c:	9301      	str	r3, [sp, #4]
  40606e:	9200      	str	r2, [sp, #0]
  406070:	f000 fa60 	bl	406534 <_sbrk_r>
  406074:	1c43      	adds	r3, r0, #1
  406076:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40607a:	f000 8143 	beq.w	406304 <_malloc_r+0x518>
  40607e:	1a80      	subs	r0, r0, r2
  406080:	4448      	add	r0, r9
  406082:	f040 0001 	orr.w	r0, r0, #1
  406086:	6819      	ldr	r1, [r3, #0]
  406088:	60ba      	str	r2, [r7, #8]
  40608a:	4449      	add	r1, r9
  40608c:	42bc      	cmp	r4, r7
  40608e:	6050      	str	r0, [r2, #4]
  406090:	6019      	str	r1, [r3, #0]
  406092:	d017      	beq.n	4060c4 <_malloc_r+0x2d8>
  406094:	f1b8 0f0f 	cmp.w	r8, #15
  406098:	f240 80fb 	bls.w	406292 <_malloc_r+0x4a6>
  40609c:	6860      	ldr	r0, [r4, #4]
  40609e:	f1a8 020c 	sub.w	r2, r8, #12
  4060a2:	f022 0207 	bic.w	r2, r2, #7
  4060a6:	eb04 0e02 	add.w	lr, r4, r2
  4060aa:	f000 0001 	and.w	r0, r0, #1
  4060ae:	f04f 0c05 	mov.w	ip, #5
  4060b2:	4310      	orrs	r0, r2
  4060b4:	2a0f      	cmp	r2, #15
  4060b6:	6060      	str	r0, [r4, #4]
  4060b8:	f8ce c004 	str.w	ip, [lr, #4]
  4060bc:	f8ce c008 	str.w	ip, [lr, #8]
  4060c0:	f200 8117 	bhi.w	4062f2 <_malloc_r+0x506>
  4060c4:	4b1d      	ldr	r3, [pc, #116]	; (40613c <_malloc_r+0x350>)
  4060c6:	68bc      	ldr	r4, [r7, #8]
  4060c8:	681a      	ldr	r2, [r3, #0]
  4060ca:	4291      	cmp	r1, r2
  4060cc:	bf88      	it	hi
  4060ce:	6019      	strhi	r1, [r3, #0]
  4060d0:	4b1b      	ldr	r3, [pc, #108]	; (406140 <_malloc_r+0x354>)
  4060d2:	681a      	ldr	r2, [r3, #0]
  4060d4:	4291      	cmp	r1, r2
  4060d6:	6862      	ldr	r2, [r4, #4]
  4060d8:	bf88      	it	hi
  4060da:	6019      	strhi	r1, [r3, #0]
  4060dc:	f022 0203 	bic.w	r2, r2, #3
  4060e0:	4296      	cmp	r6, r2
  4060e2:	eba2 0306 	sub.w	r3, r2, r6
  4060e6:	d801      	bhi.n	4060ec <_malloc_r+0x300>
  4060e8:	2b0f      	cmp	r3, #15
  4060ea:	dc04      	bgt.n	4060f6 <_malloc_r+0x30a>
  4060ec:	4628      	mov	r0, r5
  4060ee:	f000 fa1b 	bl	406528 <__malloc_unlock>
  4060f2:	2400      	movs	r4, #0
  4060f4:	e740      	b.n	405f78 <_malloc_r+0x18c>
  4060f6:	19a2      	adds	r2, r4, r6
  4060f8:	f043 0301 	orr.w	r3, r3, #1
  4060fc:	f046 0601 	orr.w	r6, r6, #1
  406100:	6066      	str	r6, [r4, #4]
  406102:	4628      	mov	r0, r5
  406104:	60ba      	str	r2, [r7, #8]
  406106:	6053      	str	r3, [r2, #4]
  406108:	f000 fa0e 	bl	406528 <__malloc_unlock>
  40610c:	3408      	adds	r4, #8
  40610e:	4620      	mov	r0, r4
  406110:	b003      	add	sp, #12
  406112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406116:	2b14      	cmp	r3, #20
  406118:	d971      	bls.n	4061fe <_malloc_r+0x412>
  40611a:	2b54      	cmp	r3, #84	; 0x54
  40611c:	f200 80a3 	bhi.w	406266 <_malloc_r+0x47a>
  406120:	0b33      	lsrs	r3, r6, #12
  406122:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406126:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40612a:	00c3      	lsls	r3, r0, #3
  40612c:	e680      	b.n	405e30 <_malloc_r+0x44>
  40612e:	bf00      	nop
  406130:	204005e0 	.word	0x204005e0
  406134:	2040c968 	.word	0x2040c968
  406138:	2040c938 	.word	0x2040c938
  40613c:	2040c960 	.word	0x2040c960
  406140:	2040c964 	.word	0x2040c964
  406144:	204005e8 	.word	0x204005e8
  406148:	204009e8 	.word	0x204009e8
  40614c:	0a5a      	lsrs	r2, r3, #9
  40614e:	2a04      	cmp	r2, #4
  406150:	d95b      	bls.n	40620a <_malloc_r+0x41e>
  406152:	2a14      	cmp	r2, #20
  406154:	f200 80ae 	bhi.w	4062b4 <_malloc_r+0x4c8>
  406158:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40615c:	00c9      	lsls	r1, r1, #3
  40615e:	325b      	adds	r2, #91	; 0x5b
  406160:	eb07 0c01 	add.w	ip, r7, r1
  406164:	5879      	ldr	r1, [r7, r1]
  406166:	f1ac 0c08 	sub.w	ip, ip, #8
  40616a:	458c      	cmp	ip, r1
  40616c:	f000 8088 	beq.w	406280 <_malloc_r+0x494>
  406170:	684a      	ldr	r2, [r1, #4]
  406172:	f022 0203 	bic.w	r2, r2, #3
  406176:	4293      	cmp	r3, r2
  406178:	d273      	bcs.n	406262 <_malloc_r+0x476>
  40617a:	6889      	ldr	r1, [r1, #8]
  40617c:	458c      	cmp	ip, r1
  40617e:	d1f7      	bne.n	406170 <_malloc_r+0x384>
  406180:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406184:	687b      	ldr	r3, [r7, #4]
  406186:	60e2      	str	r2, [r4, #12]
  406188:	f8c4 c008 	str.w	ip, [r4, #8]
  40618c:	6094      	str	r4, [r2, #8]
  40618e:	f8cc 400c 	str.w	r4, [ip, #12]
  406192:	e68f      	b.n	405eb4 <_malloc_r+0xc8>
  406194:	19a1      	adds	r1, r4, r6
  406196:	f046 0c01 	orr.w	ip, r6, #1
  40619a:	f042 0601 	orr.w	r6, r2, #1
  40619e:	f8c4 c004 	str.w	ip, [r4, #4]
  4061a2:	4628      	mov	r0, r5
  4061a4:	6179      	str	r1, [r7, #20]
  4061a6:	6139      	str	r1, [r7, #16]
  4061a8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4061ac:	f8c1 e008 	str.w	lr, [r1, #8]
  4061b0:	604e      	str	r6, [r1, #4]
  4061b2:	50e2      	str	r2, [r4, r3]
  4061b4:	f000 f9b8 	bl	406528 <__malloc_unlock>
  4061b8:	3408      	adds	r4, #8
  4061ba:	e6dd      	b.n	405f78 <_malloc_r+0x18c>
  4061bc:	687b      	ldr	r3, [r7, #4]
  4061be:	e679      	b.n	405eb4 <_malloc_r+0xc8>
  4061c0:	f108 0801 	add.w	r8, r8, #1
  4061c4:	f018 0f03 	tst.w	r8, #3
  4061c8:	f10c 0c08 	add.w	ip, ip, #8
  4061cc:	f47f ae85 	bne.w	405eda <_malloc_r+0xee>
  4061d0:	e02d      	b.n	40622e <_malloc_r+0x442>
  4061d2:	68dc      	ldr	r4, [r3, #12]
  4061d4:	42a3      	cmp	r3, r4
  4061d6:	bf08      	it	eq
  4061d8:	3002      	addeq	r0, #2
  4061da:	f43f ae3e 	beq.w	405e5a <_malloc_r+0x6e>
  4061de:	e6bb      	b.n	405f58 <_malloc_r+0x16c>
  4061e0:	4419      	add	r1, r3
  4061e2:	461c      	mov	r4, r3
  4061e4:	684a      	ldr	r2, [r1, #4]
  4061e6:	68db      	ldr	r3, [r3, #12]
  4061e8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4061ec:	f042 0201 	orr.w	r2, r2, #1
  4061f0:	604a      	str	r2, [r1, #4]
  4061f2:	4628      	mov	r0, r5
  4061f4:	60f3      	str	r3, [r6, #12]
  4061f6:	609e      	str	r6, [r3, #8]
  4061f8:	f000 f996 	bl	406528 <__malloc_unlock>
  4061fc:	e6bc      	b.n	405f78 <_malloc_r+0x18c>
  4061fe:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406202:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406206:	00c3      	lsls	r3, r0, #3
  406208:	e612      	b.n	405e30 <_malloc_r+0x44>
  40620a:	099a      	lsrs	r2, r3, #6
  40620c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406210:	00c9      	lsls	r1, r1, #3
  406212:	3238      	adds	r2, #56	; 0x38
  406214:	e7a4      	b.n	406160 <_malloc_r+0x374>
  406216:	42bc      	cmp	r4, r7
  406218:	d054      	beq.n	4062c4 <_malloc_r+0x4d8>
  40621a:	68bc      	ldr	r4, [r7, #8]
  40621c:	6862      	ldr	r2, [r4, #4]
  40621e:	f022 0203 	bic.w	r2, r2, #3
  406222:	e75d      	b.n	4060e0 <_malloc_r+0x2f4>
  406224:	f859 3908 	ldr.w	r3, [r9], #-8
  406228:	4599      	cmp	r9, r3
  40622a:	f040 8086 	bne.w	40633a <_malloc_r+0x54e>
  40622e:	f010 0f03 	tst.w	r0, #3
  406232:	f100 30ff 	add.w	r0, r0, #4294967295
  406236:	d1f5      	bne.n	406224 <_malloc_r+0x438>
  406238:	687b      	ldr	r3, [r7, #4]
  40623a:	ea23 0304 	bic.w	r3, r3, r4
  40623e:	607b      	str	r3, [r7, #4]
  406240:	0064      	lsls	r4, r4, #1
  406242:	429c      	cmp	r4, r3
  406244:	f63f aec7 	bhi.w	405fd6 <_malloc_r+0x1ea>
  406248:	2c00      	cmp	r4, #0
  40624a:	f43f aec4 	beq.w	405fd6 <_malloc_r+0x1ea>
  40624e:	421c      	tst	r4, r3
  406250:	4640      	mov	r0, r8
  406252:	f47f ae3e 	bne.w	405ed2 <_malloc_r+0xe6>
  406256:	0064      	lsls	r4, r4, #1
  406258:	421c      	tst	r4, r3
  40625a:	f100 0004 	add.w	r0, r0, #4
  40625e:	d0fa      	beq.n	406256 <_malloc_r+0x46a>
  406260:	e637      	b.n	405ed2 <_malloc_r+0xe6>
  406262:	468c      	mov	ip, r1
  406264:	e78c      	b.n	406180 <_malloc_r+0x394>
  406266:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40626a:	d815      	bhi.n	406298 <_malloc_r+0x4ac>
  40626c:	0bf3      	lsrs	r3, r6, #15
  40626e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406272:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406276:	00c3      	lsls	r3, r0, #3
  406278:	e5da      	b.n	405e30 <_malloc_r+0x44>
  40627a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40627e:	e6ed      	b.n	40605c <_malloc_r+0x270>
  406280:	687b      	ldr	r3, [r7, #4]
  406282:	1092      	asrs	r2, r2, #2
  406284:	2101      	movs	r1, #1
  406286:	fa01 f202 	lsl.w	r2, r1, r2
  40628a:	4313      	orrs	r3, r2
  40628c:	607b      	str	r3, [r7, #4]
  40628e:	4662      	mov	r2, ip
  406290:	e779      	b.n	406186 <_malloc_r+0x39a>
  406292:	2301      	movs	r3, #1
  406294:	6053      	str	r3, [r2, #4]
  406296:	e729      	b.n	4060ec <_malloc_r+0x300>
  406298:	f240 5254 	movw	r2, #1364	; 0x554
  40629c:	4293      	cmp	r3, r2
  40629e:	d822      	bhi.n	4062e6 <_malloc_r+0x4fa>
  4062a0:	0cb3      	lsrs	r3, r6, #18
  4062a2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4062a6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4062aa:	00c3      	lsls	r3, r0, #3
  4062ac:	e5c0      	b.n	405e30 <_malloc_r+0x44>
  4062ae:	f103 0b10 	add.w	fp, r3, #16
  4062b2:	e6ae      	b.n	406012 <_malloc_r+0x226>
  4062b4:	2a54      	cmp	r2, #84	; 0x54
  4062b6:	d829      	bhi.n	40630c <_malloc_r+0x520>
  4062b8:	0b1a      	lsrs	r2, r3, #12
  4062ba:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4062be:	00c9      	lsls	r1, r1, #3
  4062c0:	326e      	adds	r2, #110	; 0x6e
  4062c2:	e74d      	b.n	406160 <_malloc_r+0x374>
  4062c4:	4b20      	ldr	r3, [pc, #128]	; (406348 <_malloc_r+0x55c>)
  4062c6:	6819      	ldr	r1, [r3, #0]
  4062c8:	4459      	add	r1, fp
  4062ca:	6019      	str	r1, [r3, #0]
  4062cc:	e6b2      	b.n	406034 <_malloc_r+0x248>
  4062ce:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4062d2:	2800      	cmp	r0, #0
  4062d4:	f47f aeae 	bne.w	406034 <_malloc_r+0x248>
  4062d8:	eb08 030b 	add.w	r3, r8, fp
  4062dc:	68ba      	ldr	r2, [r7, #8]
  4062de:	f043 0301 	orr.w	r3, r3, #1
  4062e2:	6053      	str	r3, [r2, #4]
  4062e4:	e6ee      	b.n	4060c4 <_malloc_r+0x2d8>
  4062e6:	207f      	movs	r0, #127	; 0x7f
  4062e8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4062ec:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4062f0:	e59e      	b.n	405e30 <_malloc_r+0x44>
  4062f2:	f104 0108 	add.w	r1, r4, #8
  4062f6:	4628      	mov	r0, r5
  4062f8:	9300      	str	r3, [sp, #0]
  4062fa:	f001 fbcb 	bl	407a94 <_free_r>
  4062fe:	9b00      	ldr	r3, [sp, #0]
  406300:	6819      	ldr	r1, [r3, #0]
  406302:	e6df      	b.n	4060c4 <_malloc_r+0x2d8>
  406304:	2001      	movs	r0, #1
  406306:	f04f 0900 	mov.w	r9, #0
  40630a:	e6bc      	b.n	406086 <_malloc_r+0x29a>
  40630c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406310:	d805      	bhi.n	40631e <_malloc_r+0x532>
  406312:	0bda      	lsrs	r2, r3, #15
  406314:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406318:	00c9      	lsls	r1, r1, #3
  40631a:	3277      	adds	r2, #119	; 0x77
  40631c:	e720      	b.n	406160 <_malloc_r+0x374>
  40631e:	f240 5154 	movw	r1, #1364	; 0x554
  406322:	428a      	cmp	r2, r1
  406324:	d805      	bhi.n	406332 <_malloc_r+0x546>
  406326:	0c9a      	lsrs	r2, r3, #18
  406328:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40632c:	00c9      	lsls	r1, r1, #3
  40632e:	327c      	adds	r2, #124	; 0x7c
  406330:	e716      	b.n	406160 <_malloc_r+0x374>
  406332:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406336:	227e      	movs	r2, #126	; 0x7e
  406338:	e712      	b.n	406160 <_malloc_r+0x374>
  40633a:	687b      	ldr	r3, [r7, #4]
  40633c:	e780      	b.n	406240 <_malloc_r+0x454>
  40633e:	08f0      	lsrs	r0, r6, #3
  406340:	f106 0308 	add.w	r3, r6, #8
  406344:	e600      	b.n	405f48 <_malloc_r+0x15c>
  406346:	bf00      	nop
  406348:	2040c938 	.word	0x2040c938

0040634c <memcpy>:
  40634c:	4684      	mov	ip, r0
  40634e:	ea41 0300 	orr.w	r3, r1, r0
  406352:	f013 0303 	ands.w	r3, r3, #3
  406356:	d16d      	bne.n	406434 <memcpy+0xe8>
  406358:	3a40      	subs	r2, #64	; 0x40
  40635a:	d341      	bcc.n	4063e0 <memcpy+0x94>
  40635c:	f851 3b04 	ldr.w	r3, [r1], #4
  406360:	f840 3b04 	str.w	r3, [r0], #4
  406364:	f851 3b04 	ldr.w	r3, [r1], #4
  406368:	f840 3b04 	str.w	r3, [r0], #4
  40636c:	f851 3b04 	ldr.w	r3, [r1], #4
  406370:	f840 3b04 	str.w	r3, [r0], #4
  406374:	f851 3b04 	ldr.w	r3, [r1], #4
  406378:	f840 3b04 	str.w	r3, [r0], #4
  40637c:	f851 3b04 	ldr.w	r3, [r1], #4
  406380:	f840 3b04 	str.w	r3, [r0], #4
  406384:	f851 3b04 	ldr.w	r3, [r1], #4
  406388:	f840 3b04 	str.w	r3, [r0], #4
  40638c:	f851 3b04 	ldr.w	r3, [r1], #4
  406390:	f840 3b04 	str.w	r3, [r0], #4
  406394:	f851 3b04 	ldr.w	r3, [r1], #4
  406398:	f840 3b04 	str.w	r3, [r0], #4
  40639c:	f851 3b04 	ldr.w	r3, [r1], #4
  4063a0:	f840 3b04 	str.w	r3, [r0], #4
  4063a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4063a8:	f840 3b04 	str.w	r3, [r0], #4
  4063ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4063b0:	f840 3b04 	str.w	r3, [r0], #4
  4063b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4063b8:	f840 3b04 	str.w	r3, [r0], #4
  4063bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4063c0:	f840 3b04 	str.w	r3, [r0], #4
  4063c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4063c8:	f840 3b04 	str.w	r3, [r0], #4
  4063cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4063d0:	f840 3b04 	str.w	r3, [r0], #4
  4063d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4063d8:	f840 3b04 	str.w	r3, [r0], #4
  4063dc:	3a40      	subs	r2, #64	; 0x40
  4063de:	d2bd      	bcs.n	40635c <memcpy+0x10>
  4063e0:	3230      	adds	r2, #48	; 0x30
  4063e2:	d311      	bcc.n	406408 <memcpy+0xbc>
  4063e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4063e8:	f840 3b04 	str.w	r3, [r0], #4
  4063ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4063f0:	f840 3b04 	str.w	r3, [r0], #4
  4063f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4063f8:	f840 3b04 	str.w	r3, [r0], #4
  4063fc:	f851 3b04 	ldr.w	r3, [r1], #4
  406400:	f840 3b04 	str.w	r3, [r0], #4
  406404:	3a10      	subs	r2, #16
  406406:	d2ed      	bcs.n	4063e4 <memcpy+0x98>
  406408:	320c      	adds	r2, #12
  40640a:	d305      	bcc.n	406418 <memcpy+0xcc>
  40640c:	f851 3b04 	ldr.w	r3, [r1], #4
  406410:	f840 3b04 	str.w	r3, [r0], #4
  406414:	3a04      	subs	r2, #4
  406416:	d2f9      	bcs.n	40640c <memcpy+0xc0>
  406418:	3204      	adds	r2, #4
  40641a:	d008      	beq.n	40642e <memcpy+0xe2>
  40641c:	07d2      	lsls	r2, r2, #31
  40641e:	bf1c      	itt	ne
  406420:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406424:	f800 3b01 	strbne.w	r3, [r0], #1
  406428:	d301      	bcc.n	40642e <memcpy+0xe2>
  40642a:	880b      	ldrh	r3, [r1, #0]
  40642c:	8003      	strh	r3, [r0, #0]
  40642e:	4660      	mov	r0, ip
  406430:	4770      	bx	lr
  406432:	bf00      	nop
  406434:	2a08      	cmp	r2, #8
  406436:	d313      	bcc.n	406460 <memcpy+0x114>
  406438:	078b      	lsls	r3, r1, #30
  40643a:	d08d      	beq.n	406358 <memcpy+0xc>
  40643c:	f010 0303 	ands.w	r3, r0, #3
  406440:	d08a      	beq.n	406358 <memcpy+0xc>
  406442:	f1c3 0304 	rsb	r3, r3, #4
  406446:	1ad2      	subs	r2, r2, r3
  406448:	07db      	lsls	r3, r3, #31
  40644a:	bf1c      	itt	ne
  40644c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406450:	f800 3b01 	strbne.w	r3, [r0], #1
  406454:	d380      	bcc.n	406358 <memcpy+0xc>
  406456:	f831 3b02 	ldrh.w	r3, [r1], #2
  40645a:	f820 3b02 	strh.w	r3, [r0], #2
  40645e:	e77b      	b.n	406358 <memcpy+0xc>
  406460:	3a04      	subs	r2, #4
  406462:	d3d9      	bcc.n	406418 <memcpy+0xcc>
  406464:	3a01      	subs	r2, #1
  406466:	f811 3b01 	ldrb.w	r3, [r1], #1
  40646a:	f800 3b01 	strb.w	r3, [r0], #1
  40646e:	d2f9      	bcs.n	406464 <memcpy+0x118>
  406470:	780b      	ldrb	r3, [r1, #0]
  406472:	7003      	strb	r3, [r0, #0]
  406474:	784b      	ldrb	r3, [r1, #1]
  406476:	7043      	strb	r3, [r0, #1]
  406478:	788b      	ldrb	r3, [r1, #2]
  40647a:	7083      	strb	r3, [r0, #2]
  40647c:	4660      	mov	r0, ip
  40647e:	4770      	bx	lr

00406480 <memset>:
  406480:	b470      	push	{r4, r5, r6}
  406482:	0786      	lsls	r6, r0, #30
  406484:	d046      	beq.n	406514 <memset+0x94>
  406486:	1e54      	subs	r4, r2, #1
  406488:	2a00      	cmp	r2, #0
  40648a:	d041      	beq.n	406510 <memset+0x90>
  40648c:	b2ca      	uxtb	r2, r1
  40648e:	4603      	mov	r3, r0
  406490:	e002      	b.n	406498 <memset+0x18>
  406492:	f114 34ff 	adds.w	r4, r4, #4294967295
  406496:	d33b      	bcc.n	406510 <memset+0x90>
  406498:	f803 2b01 	strb.w	r2, [r3], #1
  40649c:	079d      	lsls	r5, r3, #30
  40649e:	d1f8      	bne.n	406492 <memset+0x12>
  4064a0:	2c03      	cmp	r4, #3
  4064a2:	d92e      	bls.n	406502 <memset+0x82>
  4064a4:	b2cd      	uxtb	r5, r1
  4064a6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4064aa:	2c0f      	cmp	r4, #15
  4064ac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4064b0:	d919      	bls.n	4064e6 <memset+0x66>
  4064b2:	f103 0210 	add.w	r2, r3, #16
  4064b6:	4626      	mov	r6, r4
  4064b8:	3e10      	subs	r6, #16
  4064ba:	2e0f      	cmp	r6, #15
  4064bc:	f842 5c10 	str.w	r5, [r2, #-16]
  4064c0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4064c4:	f842 5c08 	str.w	r5, [r2, #-8]
  4064c8:	f842 5c04 	str.w	r5, [r2, #-4]
  4064cc:	f102 0210 	add.w	r2, r2, #16
  4064d0:	d8f2      	bhi.n	4064b8 <memset+0x38>
  4064d2:	f1a4 0210 	sub.w	r2, r4, #16
  4064d6:	f022 020f 	bic.w	r2, r2, #15
  4064da:	f004 040f 	and.w	r4, r4, #15
  4064de:	3210      	adds	r2, #16
  4064e0:	2c03      	cmp	r4, #3
  4064e2:	4413      	add	r3, r2
  4064e4:	d90d      	bls.n	406502 <memset+0x82>
  4064e6:	461e      	mov	r6, r3
  4064e8:	4622      	mov	r2, r4
  4064ea:	3a04      	subs	r2, #4
  4064ec:	2a03      	cmp	r2, #3
  4064ee:	f846 5b04 	str.w	r5, [r6], #4
  4064f2:	d8fa      	bhi.n	4064ea <memset+0x6a>
  4064f4:	1f22      	subs	r2, r4, #4
  4064f6:	f022 0203 	bic.w	r2, r2, #3
  4064fa:	3204      	adds	r2, #4
  4064fc:	4413      	add	r3, r2
  4064fe:	f004 0403 	and.w	r4, r4, #3
  406502:	b12c      	cbz	r4, 406510 <memset+0x90>
  406504:	b2c9      	uxtb	r1, r1
  406506:	441c      	add	r4, r3
  406508:	f803 1b01 	strb.w	r1, [r3], #1
  40650c:	429c      	cmp	r4, r3
  40650e:	d1fb      	bne.n	406508 <memset+0x88>
  406510:	bc70      	pop	{r4, r5, r6}
  406512:	4770      	bx	lr
  406514:	4614      	mov	r4, r2
  406516:	4603      	mov	r3, r0
  406518:	e7c2      	b.n	4064a0 <memset+0x20>
  40651a:	bf00      	nop

0040651c <__malloc_lock>:
  40651c:	4801      	ldr	r0, [pc, #4]	; (406524 <__malloc_lock+0x8>)
  40651e:	f001 bd53 	b.w	407fc8 <__retarget_lock_acquire_recursive>
  406522:	bf00      	nop
  406524:	2040ca60 	.word	0x2040ca60

00406528 <__malloc_unlock>:
  406528:	4801      	ldr	r0, [pc, #4]	; (406530 <__malloc_unlock+0x8>)
  40652a:	f001 bd4f 	b.w	407fcc <__retarget_lock_release_recursive>
  40652e:	bf00      	nop
  406530:	2040ca60 	.word	0x2040ca60

00406534 <_sbrk_r>:
  406534:	b538      	push	{r3, r4, r5, lr}
  406536:	4c07      	ldr	r4, [pc, #28]	; (406554 <_sbrk_r+0x20>)
  406538:	2300      	movs	r3, #0
  40653a:	4605      	mov	r5, r0
  40653c:	4608      	mov	r0, r1
  40653e:	6023      	str	r3, [r4, #0]
  406540:	f7fb fd74 	bl	40202c <_sbrk>
  406544:	1c43      	adds	r3, r0, #1
  406546:	d000      	beq.n	40654a <_sbrk_r+0x16>
  406548:	bd38      	pop	{r3, r4, r5, pc}
  40654a:	6823      	ldr	r3, [r4, #0]
  40654c:	2b00      	cmp	r3, #0
  40654e:	d0fb      	beq.n	406548 <_sbrk_r+0x14>
  406550:	602b      	str	r3, [r5, #0]
  406552:	bd38      	pop	{r3, r4, r5, pc}
  406554:	2040ca74 	.word	0x2040ca74

00406558 <setbuf>:
  406558:	2900      	cmp	r1, #0
  40655a:	bf0c      	ite	eq
  40655c:	2202      	moveq	r2, #2
  40655e:	2200      	movne	r2, #0
  406560:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406564:	f000 b800 	b.w	406568 <setvbuf>

00406568 <setvbuf>:
  406568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40656c:	4c61      	ldr	r4, [pc, #388]	; (4066f4 <setvbuf+0x18c>)
  40656e:	6825      	ldr	r5, [r4, #0]
  406570:	b083      	sub	sp, #12
  406572:	4604      	mov	r4, r0
  406574:	460f      	mov	r7, r1
  406576:	4690      	mov	r8, r2
  406578:	461e      	mov	r6, r3
  40657a:	b115      	cbz	r5, 406582 <setvbuf+0x1a>
  40657c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40657e:	2b00      	cmp	r3, #0
  406580:	d064      	beq.n	40664c <setvbuf+0xe4>
  406582:	f1b8 0f02 	cmp.w	r8, #2
  406586:	d006      	beq.n	406596 <setvbuf+0x2e>
  406588:	f1b8 0f01 	cmp.w	r8, #1
  40658c:	f200 809f 	bhi.w	4066ce <setvbuf+0x166>
  406590:	2e00      	cmp	r6, #0
  406592:	f2c0 809c 	blt.w	4066ce <setvbuf+0x166>
  406596:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406598:	07d8      	lsls	r0, r3, #31
  40659a:	d534      	bpl.n	406606 <setvbuf+0x9e>
  40659c:	4621      	mov	r1, r4
  40659e:	4628      	mov	r0, r5
  4065a0:	f001 f8fa 	bl	407798 <_fflush_r>
  4065a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4065a6:	b141      	cbz	r1, 4065ba <setvbuf+0x52>
  4065a8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4065ac:	4299      	cmp	r1, r3
  4065ae:	d002      	beq.n	4065b6 <setvbuf+0x4e>
  4065b0:	4628      	mov	r0, r5
  4065b2:	f001 fa6f 	bl	407a94 <_free_r>
  4065b6:	2300      	movs	r3, #0
  4065b8:	6323      	str	r3, [r4, #48]	; 0x30
  4065ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4065be:	2200      	movs	r2, #0
  4065c0:	61a2      	str	r2, [r4, #24]
  4065c2:	6062      	str	r2, [r4, #4]
  4065c4:	061a      	lsls	r2, r3, #24
  4065c6:	d43a      	bmi.n	40663e <setvbuf+0xd6>
  4065c8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4065cc:	f023 0303 	bic.w	r3, r3, #3
  4065d0:	f1b8 0f02 	cmp.w	r8, #2
  4065d4:	81a3      	strh	r3, [r4, #12]
  4065d6:	d01d      	beq.n	406614 <setvbuf+0xac>
  4065d8:	ab01      	add	r3, sp, #4
  4065da:	466a      	mov	r2, sp
  4065dc:	4621      	mov	r1, r4
  4065de:	4628      	mov	r0, r5
  4065e0:	f001 fcf6 	bl	407fd0 <__swhatbuf_r>
  4065e4:	89a3      	ldrh	r3, [r4, #12]
  4065e6:	4318      	orrs	r0, r3
  4065e8:	81a0      	strh	r0, [r4, #12]
  4065ea:	2e00      	cmp	r6, #0
  4065ec:	d132      	bne.n	406654 <setvbuf+0xec>
  4065ee:	9e00      	ldr	r6, [sp, #0]
  4065f0:	4630      	mov	r0, r6
  4065f2:	f7ff fbf3 	bl	405ddc <malloc>
  4065f6:	4607      	mov	r7, r0
  4065f8:	2800      	cmp	r0, #0
  4065fa:	d06b      	beq.n	4066d4 <setvbuf+0x16c>
  4065fc:	89a3      	ldrh	r3, [r4, #12]
  4065fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406602:	81a3      	strh	r3, [r4, #12]
  406604:	e028      	b.n	406658 <setvbuf+0xf0>
  406606:	89a3      	ldrh	r3, [r4, #12]
  406608:	0599      	lsls	r1, r3, #22
  40660a:	d4c7      	bmi.n	40659c <setvbuf+0x34>
  40660c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40660e:	f001 fcdb 	bl	407fc8 <__retarget_lock_acquire_recursive>
  406612:	e7c3      	b.n	40659c <setvbuf+0x34>
  406614:	2500      	movs	r5, #0
  406616:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406618:	2600      	movs	r6, #0
  40661a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40661e:	f043 0302 	orr.w	r3, r3, #2
  406622:	2001      	movs	r0, #1
  406624:	60a6      	str	r6, [r4, #8]
  406626:	07ce      	lsls	r6, r1, #31
  406628:	81a3      	strh	r3, [r4, #12]
  40662a:	6022      	str	r2, [r4, #0]
  40662c:	6122      	str	r2, [r4, #16]
  40662e:	6160      	str	r0, [r4, #20]
  406630:	d401      	bmi.n	406636 <setvbuf+0xce>
  406632:	0598      	lsls	r0, r3, #22
  406634:	d53e      	bpl.n	4066b4 <setvbuf+0x14c>
  406636:	4628      	mov	r0, r5
  406638:	b003      	add	sp, #12
  40663a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40663e:	6921      	ldr	r1, [r4, #16]
  406640:	4628      	mov	r0, r5
  406642:	f001 fa27 	bl	407a94 <_free_r>
  406646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40664a:	e7bd      	b.n	4065c8 <setvbuf+0x60>
  40664c:	4628      	mov	r0, r5
  40664e:	f001 f8fb 	bl	407848 <__sinit>
  406652:	e796      	b.n	406582 <setvbuf+0x1a>
  406654:	2f00      	cmp	r7, #0
  406656:	d0cb      	beq.n	4065f0 <setvbuf+0x88>
  406658:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40665a:	2b00      	cmp	r3, #0
  40665c:	d033      	beq.n	4066c6 <setvbuf+0x15e>
  40665e:	9b00      	ldr	r3, [sp, #0]
  406660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406664:	6027      	str	r7, [r4, #0]
  406666:	429e      	cmp	r6, r3
  406668:	bf1c      	itt	ne
  40666a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40666e:	81a2      	strhne	r2, [r4, #12]
  406670:	f1b8 0f01 	cmp.w	r8, #1
  406674:	bf04      	itt	eq
  406676:	f042 0201 	orreq.w	r2, r2, #1
  40667a:	81a2      	strheq	r2, [r4, #12]
  40667c:	b292      	uxth	r2, r2
  40667e:	f012 0308 	ands.w	r3, r2, #8
  406682:	6127      	str	r7, [r4, #16]
  406684:	6166      	str	r6, [r4, #20]
  406686:	d00e      	beq.n	4066a6 <setvbuf+0x13e>
  406688:	07d1      	lsls	r1, r2, #31
  40668a:	d51a      	bpl.n	4066c2 <setvbuf+0x15a>
  40668c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40668e:	4276      	negs	r6, r6
  406690:	2300      	movs	r3, #0
  406692:	f015 0501 	ands.w	r5, r5, #1
  406696:	61a6      	str	r6, [r4, #24]
  406698:	60a3      	str	r3, [r4, #8]
  40669a:	d009      	beq.n	4066b0 <setvbuf+0x148>
  40669c:	2500      	movs	r5, #0
  40669e:	4628      	mov	r0, r5
  4066a0:	b003      	add	sp, #12
  4066a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4066a6:	60a3      	str	r3, [r4, #8]
  4066a8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4066aa:	f015 0501 	ands.w	r5, r5, #1
  4066ae:	d1f5      	bne.n	40669c <setvbuf+0x134>
  4066b0:	0593      	lsls	r3, r2, #22
  4066b2:	d4c0      	bmi.n	406636 <setvbuf+0xce>
  4066b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4066b6:	f001 fc89 	bl	407fcc <__retarget_lock_release_recursive>
  4066ba:	4628      	mov	r0, r5
  4066bc:	b003      	add	sp, #12
  4066be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4066c2:	60a6      	str	r6, [r4, #8]
  4066c4:	e7f0      	b.n	4066a8 <setvbuf+0x140>
  4066c6:	4628      	mov	r0, r5
  4066c8:	f001 f8be 	bl	407848 <__sinit>
  4066cc:	e7c7      	b.n	40665e <setvbuf+0xf6>
  4066ce:	f04f 35ff 	mov.w	r5, #4294967295
  4066d2:	e7b0      	b.n	406636 <setvbuf+0xce>
  4066d4:	f8dd 9000 	ldr.w	r9, [sp]
  4066d8:	45b1      	cmp	r9, r6
  4066da:	d004      	beq.n	4066e6 <setvbuf+0x17e>
  4066dc:	4648      	mov	r0, r9
  4066de:	f7ff fb7d 	bl	405ddc <malloc>
  4066e2:	4607      	mov	r7, r0
  4066e4:	b920      	cbnz	r0, 4066f0 <setvbuf+0x188>
  4066e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4066ea:	f04f 35ff 	mov.w	r5, #4294967295
  4066ee:	e792      	b.n	406616 <setvbuf+0xae>
  4066f0:	464e      	mov	r6, r9
  4066f2:	e783      	b.n	4065fc <setvbuf+0x94>
  4066f4:	204001b0 	.word	0x204001b0
	...

00406700 <strlen>:
  406700:	f890 f000 	pld	[r0]
  406704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406708:	f020 0107 	bic.w	r1, r0, #7
  40670c:	f06f 0c00 	mvn.w	ip, #0
  406710:	f010 0407 	ands.w	r4, r0, #7
  406714:	f891 f020 	pld	[r1, #32]
  406718:	f040 8049 	bne.w	4067ae <strlen+0xae>
  40671c:	f04f 0400 	mov.w	r4, #0
  406720:	f06f 0007 	mvn.w	r0, #7
  406724:	e9d1 2300 	ldrd	r2, r3, [r1]
  406728:	f891 f040 	pld	[r1, #64]	; 0x40
  40672c:	f100 0008 	add.w	r0, r0, #8
  406730:	fa82 f24c 	uadd8	r2, r2, ip
  406734:	faa4 f28c 	sel	r2, r4, ip
  406738:	fa83 f34c 	uadd8	r3, r3, ip
  40673c:	faa2 f38c 	sel	r3, r2, ip
  406740:	bb4b      	cbnz	r3, 406796 <strlen+0x96>
  406742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406746:	fa82 f24c 	uadd8	r2, r2, ip
  40674a:	f100 0008 	add.w	r0, r0, #8
  40674e:	faa4 f28c 	sel	r2, r4, ip
  406752:	fa83 f34c 	uadd8	r3, r3, ip
  406756:	faa2 f38c 	sel	r3, r2, ip
  40675a:	b9e3      	cbnz	r3, 406796 <strlen+0x96>
  40675c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406760:	fa82 f24c 	uadd8	r2, r2, ip
  406764:	f100 0008 	add.w	r0, r0, #8
  406768:	faa4 f28c 	sel	r2, r4, ip
  40676c:	fa83 f34c 	uadd8	r3, r3, ip
  406770:	faa2 f38c 	sel	r3, r2, ip
  406774:	b97b      	cbnz	r3, 406796 <strlen+0x96>
  406776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40677a:	f101 0120 	add.w	r1, r1, #32
  40677e:	fa82 f24c 	uadd8	r2, r2, ip
  406782:	f100 0008 	add.w	r0, r0, #8
  406786:	faa4 f28c 	sel	r2, r4, ip
  40678a:	fa83 f34c 	uadd8	r3, r3, ip
  40678e:	faa2 f38c 	sel	r3, r2, ip
  406792:	2b00      	cmp	r3, #0
  406794:	d0c6      	beq.n	406724 <strlen+0x24>
  406796:	2a00      	cmp	r2, #0
  406798:	bf04      	itt	eq
  40679a:	3004      	addeq	r0, #4
  40679c:	461a      	moveq	r2, r3
  40679e:	ba12      	rev	r2, r2
  4067a0:	fab2 f282 	clz	r2, r2
  4067a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4067a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4067ac:	4770      	bx	lr
  4067ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4067b2:	f004 0503 	and.w	r5, r4, #3
  4067b6:	f1c4 0000 	rsb	r0, r4, #0
  4067ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4067be:	f014 0f04 	tst.w	r4, #4
  4067c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4067c6:	fa0c f505 	lsl.w	r5, ip, r5
  4067ca:	ea62 0205 	orn	r2, r2, r5
  4067ce:	bf1c      	itt	ne
  4067d0:	ea63 0305 	ornne	r3, r3, r5
  4067d4:	4662      	movne	r2, ip
  4067d6:	f04f 0400 	mov.w	r4, #0
  4067da:	e7a9      	b.n	406730 <strlen+0x30>

004067dc <__sprint_r.part.0>:
  4067dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4067e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4067e2:	049c      	lsls	r4, r3, #18
  4067e4:	4693      	mov	fp, r2
  4067e6:	d52f      	bpl.n	406848 <__sprint_r.part.0+0x6c>
  4067e8:	6893      	ldr	r3, [r2, #8]
  4067ea:	6812      	ldr	r2, [r2, #0]
  4067ec:	b353      	cbz	r3, 406844 <__sprint_r.part.0+0x68>
  4067ee:	460e      	mov	r6, r1
  4067f0:	4607      	mov	r7, r0
  4067f2:	f102 0908 	add.w	r9, r2, #8
  4067f6:	e919 0420 	ldmdb	r9, {r5, sl}
  4067fa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4067fe:	d017      	beq.n	406830 <__sprint_r.part.0+0x54>
  406800:	3d04      	subs	r5, #4
  406802:	2400      	movs	r4, #0
  406804:	e001      	b.n	40680a <__sprint_r.part.0+0x2e>
  406806:	45a0      	cmp	r8, r4
  406808:	d010      	beq.n	40682c <__sprint_r.part.0+0x50>
  40680a:	4632      	mov	r2, r6
  40680c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  406810:	4638      	mov	r0, r7
  406812:	f001 f8bb 	bl	40798c <_fputwc_r>
  406816:	1c43      	adds	r3, r0, #1
  406818:	f104 0401 	add.w	r4, r4, #1
  40681c:	d1f3      	bne.n	406806 <__sprint_r.part.0+0x2a>
  40681e:	2300      	movs	r3, #0
  406820:	f8cb 3008 	str.w	r3, [fp, #8]
  406824:	f8cb 3004 	str.w	r3, [fp, #4]
  406828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40682c:	f8db 3008 	ldr.w	r3, [fp, #8]
  406830:	f02a 0a03 	bic.w	sl, sl, #3
  406834:	eba3 030a 	sub.w	r3, r3, sl
  406838:	f8cb 3008 	str.w	r3, [fp, #8]
  40683c:	f109 0908 	add.w	r9, r9, #8
  406840:	2b00      	cmp	r3, #0
  406842:	d1d8      	bne.n	4067f6 <__sprint_r.part.0+0x1a>
  406844:	2000      	movs	r0, #0
  406846:	e7ea      	b.n	40681e <__sprint_r.part.0+0x42>
  406848:	f001 fa0a 	bl	407c60 <__sfvwrite_r>
  40684c:	2300      	movs	r3, #0
  40684e:	f8cb 3008 	str.w	r3, [fp, #8]
  406852:	f8cb 3004 	str.w	r3, [fp, #4]
  406856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40685a:	bf00      	nop

0040685c <_vfiprintf_r>:
  40685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406860:	b0ad      	sub	sp, #180	; 0xb4
  406862:	461d      	mov	r5, r3
  406864:	468b      	mov	fp, r1
  406866:	4690      	mov	r8, r2
  406868:	9307      	str	r3, [sp, #28]
  40686a:	9006      	str	r0, [sp, #24]
  40686c:	b118      	cbz	r0, 406876 <_vfiprintf_r+0x1a>
  40686e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406870:	2b00      	cmp	r3, #0
  406872:	f000 80f3 	beq.w	406a5c <_vfiprintf_r+0x200>
  406876:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40687a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40687e:	07df      	lsls	r7, r3, #31
  406880:	b281      	uxth	r1, r0
  406882:	d402      	bmi.n	40688a <_vfiprintf_r+0x2e>
  406884:	058e      	lsls	r6, r1, #22
  406886:	f140 80fc 	bpl.w	406a82 <_vfiprintf_r+0x226>
  40688a:	048c      	lsls	r4, r1, #18
  40688c:	d40a      	bmi.n	4068a4 <_vfiprintf_r+0x48>
  40688e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406892:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  406896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40689a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40689e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4068a2:	b289      	uxth	r1, r1
  4068a4:	0708      	lsls	r0, r1, #28
  4068a6:	f140 80b3 	bpl.w	406a10 <_vfiprintf_r+0x1b4>
  4068aa:	f8db 3010 	ldr.w	r3, [fp, #16]
  4068ae:	2b00      	cmp	r3, #0
  4068b0:	f000 80ae 	beq.w	406a10 <_vfiprintf_r+0x1b4>
  4068b4:	f001 031a 	and.w	r3, r1, #26
  4068b8:	2b0a      	cmp	r3, #10
  4068ba:	f000 80b5 	beq.w	406a28 <_vfiprintf_r+0x1cc>
  4068be:	2300      	movs	r3, #0
  4068c0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4068c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4068c6:	9311      	str	r3, [sp, #68]	; 0x44
  4068c8:	9310      	str	r3, [sp, #64]	; 0x40
  4068ca:	9303      	str	r3, [sp, #12]
  4068cc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4068d0:	46ca      	mov	sl, r9
  4068d2:	f8cd b010 	str.w	fp, [sp, #16]
  4068d6:	f898 3000 	ldrb.w	r3, [r8]
  4068da:	4644      	mov	r4, r8
  4068dc:	b1fb      	cbz	r3, 40691e <_vfiprintf_r+0xc2>
  4068de:	2b25      	cmp	r3, #37	; 0x25
  4068e0:	d102      	bne.n	4068e8 <_vfiprintf_r+0x8c>
  4068e2:	e01c      	b.n	40691e <_vfiprintf_r+0xc2>
  4068e4:	2b25      	cmp	r3, #37	; 0x25
  4068e6:	d003      	beq.n	4068f0 <_vfiprintf_r+0x94>
  4068e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4068ec:	2b00      	cmp	r3, #0
  4068ee:	d1f9      	bne.n	4068e4 <_vfiprintf_r+0x88>
  4068f0:	eba4 0508 	sub.w	r5, r4, r8
  4068f4:	b19d      	cbz	r5, 40691e <_vfiprintf_r+0xc2>
  4068f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4068f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4068fa:	f8ca 8000 	str.w	r8, [sl]
  4068fe:	3301      	adds	r3, #1
  406900:	442a      	add	r2, r5
  406902:	2b07      	cmp	r3, #7
  406904:	f8ca 5004 	str.w	r5, [sl, #4]
  406908:	9211      	str	r2, [sp, #68]	; 0x44
  40690a:	9310      	str	r3, [sp, #64]	; 0x40
  40690c:	dd7a      	ble.n	406a04 <_vfiprintf_r+0x1a8>
  40690e:	2a00      	cmp	r2, #0
  406910:	f040 84b0 	bne.w	407274 <_vfiprintf_r+0xa18>
  406914:	9b03      	ldr	r3, [sp, #12]
  406916:	9210      	str	r2, [sp, #64]	; 0x40
  406918:	442b      	add	r3, r5
  40691a:	46ca      	mov	sl, r9
  40691c:	9303      	str	r3, [sp, #12]
  40691e:	7823      	ldrb	r3, [r4, #0]
  406920:	2b00      	cmp	r3, #0
  406922:	f000 83e0 	beq.w	4070e6 <_vfiprintf_r+0x88a>
  406926:	2000      	movs	r0, #0
  406928:	f04f 0300 	mov.w	r3, #0
  40692c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  406930:	f104 0801 	add.w	r8, r4, #1
  406934:	7862      	ldrb	r2, [r4, #1]
  406936:	4605      	mov	r5, r0
  406938:	4606      	mov	r6, r0
  40693a:	4603      	mov	r3, r0
  40693c:	f04f 34ff 	mov.w	r4, #4294967295
  406940:	f108 0801 	add.w	r8, r8, #1
  406944:	f1a2 0120 	sub.w	r1, r2, #32
  406948:	2958      	cmp	r1, #88	; 0x58
  40694a:	f200 82de 	bhi.w	406f0a <_vfiprintf_r+0x6ae>
  40694e:	e8df f011 	tbh	[pc, r1, lsl #1]
  406952:	0221      	.short	0x0221
  406954:	02dc02dc 	.word	0x02dc02dc
  406958:	02dc0229 	.word	0x02dc0229
  40695c:	02dc02dc 	.word	0x02dc02dc
  406960:	02dc02dc 	.word	0x02dc02dc
  406964:	028902dc 	.word	0x028902dc
  406968:	02dc0295 	.word	0x02dc0295
  40696c:	02bd00a2 	.word	0x02bd00a2
  406970:	019f02dc 	.word	0x019f02dc
  406974:	01a401a4 	.word	0x01a401a4
  406978:	01a401a4 	.word	0x01a401a4
  40697c:	01a401a4 	.word	0x01a401a4
  406980:	01a401a4 	.word	0x01a401a4
  406984:	02dc01a4 	.word	0x02dc01a4
  406988:	02dc02dc 	.word	0x02dc02dc
  40698c:	02dc02dc 	.word	0x02dc02dc
  406990:	02dc02dc 	.word	0x02dc02dc
  406994:	02dc02dc 	.word	0x02dc02dc
  406998:	01b202dc 	.word	0x01b202dc
  40699c:	02dc02dc 	.word	0x02dc02dc
  4069a0:	02dc02dc 	.word	0x02dc02dc
  4069a4:	02dc02dc 	.word	0x02dc02dc
  4069a8:	02dc02dc 	.word	0x02dc02dc
  4069ac:	02dc02dc 	.word	0x02dc02dc
  4069b0:	02dc0197 	.word	0x02dc0197
  4069b4:	02dc02dc 	.word	0x02dc02dc
  4069b8:	02dc02dc 	.word	0x02dc02dc
  4069bc:	02dc019b 	.word	0x02dc019b
  4069c0:	025302dc 	.word	0x025302dc
  4069c4:	02dc02dc 	.word	0x02dc02dc
  4069c8:	02dc02dc 	.word	0x02dc02dc
  4069cc:	02dc02dc 	.word	0x02dc02dc
  4069d0:	02dc02dc 	.word	0x02dc02dc
  4069d4:	02dc02dc 	.word	0x02dc02dc
  4069d8:	021b025a 	.word	0x021b025a
  4069dc:	02dc02dc 	.word	0x02dc02dc
  4069e0:	026e02dc 	.word	0x026e02dc
  4069e4:	02dc021b 	.word	0x02dc021b
  4069e8:	027302dc 	.word	0x027302dc
  4069ec:	01f502dc 	.word	0x01f502dc
  4069f0:	02090182 	.word	0x02090182
  4069f4:	02dc02d7 	.word	0x02dc02d7
  4069f8:	02dc029a 	.word	0x02dc029a
  4069fc:	02dc00a7 	.word	0x02dc00a7
  406a00:	022e02dc 	.word	0x022e02dc
  406a04:	f10a 0a08 	add.w	sl, sl, #8
  406a08:	9b03      	ldr	r3, [sp, #12]
  406a0a:	442b      	add	r3, r5
  406a0c:	9303      	str	r3, [sp, #12]
  406a0e:	e786      	b.n	40691e <_vfiprintf_r+0xc2>
  406a10:	4659      	mov	r1, fp
  406a12:	9806      	ldr	r0, [sp, #24]
  406a14:	f000 fdac 	bl	407570 <__swsetup_r>
  406a18:	bb18      	cbnz	r0, 406a62 <_vfiprintf_r+0x206>
  406a1a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  406a1e:	f001 031a 	and.w	r3, r1, #26
  406a22:	2b0a      	cmp	r3, #10
  406a24:	f47f af4b 	bne.w	4068be <_vfiprintf_r+0x62>
  406a28:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  406a2c:	2b00      	cmp	r3, #0
  406a2e:	f6ff af46 	blt.w	4068be <_vfiprintf_r+0x62>
  406a32:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406a36:	07db      	lsls	r3, r3, #31
  406a38:	d405      	bmi.n	406a46 <_vfiprintf_r+0x1ea>
  406a3a:	058f      	lsls	r7, r1, #22
  406a3c:	d403      	bmi.n	406a46 <_vfiprintf_r+0x1ea>
  406a3e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406a42:	f001 fac3 	bl	407fcc <__retarget_lock_release_recursive>
  406a46:	462b      	mov	r3, r5
  406a48:	4642      	mov	r2, r8
  406a4a:	4659      	mov	r1, fp
  406a4c:	9806      	ldr	r0, [sp, #24]
  406a4e:	f000 fd4d 	bl	4074ec <__sbprintf>
  406a52:	9003      	str	r0, [sp, #12]
  406a54:	9803      	ldr	r0, [sp, #12]
  406a56:	b02d      	add	sp, #180	; 0xb4
  406a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a5c:	f000 fef4 	bl	407848 <__sinit>
  406a60:	e709      	b.n	406876 <_vfiprintf_r+0x1a>
  406a62:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406a66:	07d9      	lsls	r1, r3, #31
  406a68:	d404      	bmi.n	406a74 <_vfiprintf_r+0x218>
  406a6a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406a6e:	059a      	lsls	r2, r3, #22
  406a70:	f140 84aa 	bpl.w	4073c8 <_vfiprintf_r+0xb6c>
  406a74:	f04f 33ff 	mov.w	r3, #4294967295
  406a78:	9303      	str	r3, [sp, #12]
  406a7a:	9803      	ldr	r0, [sp, #12]
  406a7c:	b02d      	add	sp, #180	; 0xb4
  406a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a82:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406a86:	f001 fa9f 	bl	407fc8 <__retarget_lock_acquire_recursive>
  406a8a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  406a8e:	b281      	uxth	r1, r0
  406a90:	e6fb      	b.n	40688a <_vfiprintf_r+0x2e>
  406a92:	4276      	negs	r6, r6
  406a94:	9207      	str	r2, [sp, #28]
  406a96:	f043 0304 	orr.w	r3, r3, #4
  406a9a:	f898 2000 	ldrb.w	r2, [r8]
  406a9e:	e74f      	b.n	406940 <_vfiprintf_r+0xe4>
  406aa0:	9608      	str	r6, [sp, #32]
  406aa2:	069e      	lsls	r6, r3, #26
  406aa4:	f100 8450 	bmi.w	407348 <_vfiprintf_r+0xaec>
  406aa8:	9907      	ldr	r1, [sp, #28]
  406aaa:	06dd      	lsls	r5, r3, #27
  406aac:	460a      	mov	r2, r1
  406aae:	f100 83ef 	bmi.w	407290 <_vfiprintf_r+0xa34>
  406ab2:	0658      	lsls	r0, r3, #25
  406ab4:	f140 83ec 	bpl.w	407290 <_vfiprintf_r+0xa34>
  406ab8:	880e      	ldrh	r6, [r1, #0]
  406aba:	3104      	adds	r1, #4
  406abc:	2700      	movs	r7, #0
  406abe:	2201      	movs	r2, #1
  406ac0:	9107      	str	r1, [sp, #28]
  406ac2:	f04f 0100 	mov.w	r1, #0
  406ac6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  406aca:	2500      	movs	r5, #0
  406acc:	1c61      	adds	r1, r4, #1
  406ace:	f000 8116 	beq.w	406cfe <_vfiprintf_r+0x4a2>
  406ad2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  406ad6:	9102      	str	r1, [sp, #8]
  406ad8:	ea56 0107 	orrs.w	r1, r6, r7
  406adc:	f040 8114 	bne.w	406d08 <_vfiprintf_r+0x4ac>
  406ae0:	2c00      	cmp	r4, #0
  406ae2:	f040 835c 	bne.w	40719e <_vfiprintf_r+0x942>
  406ae6:	2a00      	cmp	r2, #0
  406ae8:	f040 83b7 	bne.w	40725a <_vfiprintf_r+0x9fe>
  406aec:	f013 0301 	ands.w	r3, r3, #1
  406af0:	9305      	str	r3, [sp, #20]
  406af2:	f000 8457 	beq.w	4073a4 <_vfiprintf_r+0xb48>
  406af6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406afa:	2330      	movs	r3, #48	; 0x30
  406afc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  406b00:	9b05      	ldr	r3, [sp, #20]
  406b02:	42a3      	cmp	r3, r4
  406b04:	bfb8      	it	lt
  406b06:	4623      	movlt	r3, r4
  406b08:	9301      	str	r3, [sp, #4]
  406b0a:	b10d      	cbz	r5, 406b10 <_vfiprintf_r+0x2b4>
  406b0c:	3301      	adds	r3, #1
  406b0e:	9301      	str	r3, [sp, #4]
  406b10:	9b02      	ldr	r3, [sp, #8]
  406b12:	f013 0302 	ands.w	r3, r3, #2
  406b16:	9309      	str	r3, [sp, #36]	; 0x24
  406b18:	d002      	beq.n	406b20 <_vfiprintf_r+0x2c4>
  406b1a:	9b01      	ldr	r3, [sp, #4]
  406b1c:	3302      	adds	r3, #2
  406b1e:	9301      	str	r3, [sp, #4]
  406b20:	9b02      	ldr	r3, [sp, #8]
  406b22:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  406b26:	930a      	str	r3, [sp, #40]	; 0x28
  406b28:	f040 8217 	bne.w	406f5a <_vfiprintf_r+0x6fe>
  406b2c:	9b08      	ldr	r3, [sp, #32]
  406b2e:	9a01      	ldr	r2, [sp, #4]
  406b30:	1a9d      	subs	r5, r3, r2
  406b32:	2d00      	cmp	r5, #0
  406b34:	f340 8211 	ble.w	406f5a <_vfiprintf_r+0x6fe>
  406b38:	2d10      	cmp	r5, #16
  406b3a:	f340 8490 	ble.w	40745e <_vfiprintf_r+0xc02>
  406b3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406b40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406b42:	4ec4      	ldr	r6, [pc, #784]	; (406e54 <_vfiprintf_r+0x5f8>)
  406b44:	46d6      	mov	lr, sl
  406b46:	2710      	movs	r7, #16
  406b48:	46a2      	mov	sl, r4
  406b4a:	4619      	mov	r1, r3
  406b4c:	9c06      	ldr	r4, [sp, #24]
  406b4e:	e007      	b.n	406b60 <_vfiprintf_r+0x304>
  406b50:	f101 0c02 	add.w	ip, r1, #2
  406b54:	f10e 0e08 	add.w	lr, lr, #8
  406b58:	4601      	mov	r1, r0
  406b5a:	3d10      	subs	r5, #16
  406b5c:	2d10      	cmp	r5, #16
  406b5e:	dd11      	ble.n	406b84 <_vfiprintf_r+0x328>
  406b60:	1c48      	adds	r0, r1, #1
  406b62:	3210      	adds	r2, #16
  406b64:	2807      	cmp	r0, #7
  406b66:	9211      	str	r2, [sp, #68]	; 0x44
  406b68:	e88e 00c0 	stmia.w	lr, {r6, r7}
  406b6c:	9010      	str	r0, [sp, #64]	; 0x40
  406b6e:	ddef      	ble.n	406b50 <_vfiprintf_r+0x2f4>
  406b70:	2a00      	cmp	r2, #0
  406b72:	f040 81e4 	bne.w	406f3e <_vfiprintf_r+0x6e2>
  406b76:	3d10      	subs	r5, #16
  406b78:	2d10      	cmp	r5, #16
  406b7a:	4611      	mov	r1, r2
  406b7c:	f04f 0c01 	mov.w	ip, #1
  406b80:	46ce      	mov	lr, r9
  406b82:	dced      	bgt.n	406b60 <_vfiprintf_r+0x304>
  406b84:	4654      	mov	r4, sl
  406b86:	4661      	mov	r1, ip
  406b88:	46f2      	mov	sl, lr
  406b8a:	442a      	add	r2, r5
  406b8c:	2907      	cmp	r1, #7
  406b8e:	9211      	str	r2, [sp, #68]	; 0x44
  406b90:	f8ca 6000 	str.w	r6, [sl]
  406b94:	f8ca 5004 	str.w	r5, [sl, #4]
  406b98:	9110      	str	r1, [sp, #64]	; 0x40
  406b9a:	f300 82ec 	bgt.w	407176 <_vfiprintf_r+0x91a>
  406b9e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406ba2:	f10a 0a08 	add.w	sl, sl, #8
  406ba6:	1c48      	adds	r0, r1, #1
  406ba8:	2d00      	cmp	r5, #0
  406baa:	f040 81de 	bne.w	406f6a <_vfiprintf_r+0x70e>
  406bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406bb0:	2b00      	cmp	r3, #0
  406bb2:	f000 81f8 	beq.w	406fa6 <_vfiprintf_r+0x74a>
  406bb6:	3202      	adds	r2, #2
  406bb8:	a90e      	add	r1, sp, #56	; 0x38
  406bba:	2302      	movs	r3, #2
  406bbc:	2807      	cmp	r0, #7
  406bbe:	9211      	str	r2, [sp, #68]	; 0x44
  406bc0:	9010      	str	r0, [sp, #64]	; 0x40
  406bc2:	e88a 000a 	stmia.w	sl, {r1, r3}
  406bc6:	f340 81ea 	ble.w	406f9e <_vfiprintf_r+0x742>
  406bca:	2a00      	cmp	r2, #0
  406bcc:	f040 838c 	bne.w	4072e8 <_vfiprintf_r+0xa8c>
  406bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406bd2:	2b80      	cmp	r3, #128	; 0x80
  406bd4:	f04f 0001 	mov.w	r0, #1
  406bd8:	4611      	mov	r1, r2
  406bda:	46ca      	mov	sl, r9
  406bdc:	f040 81e7 	bne.w	406fae <_vfiprintf_r+0x752>
  406be0:	9b08      	ldr	r3, [sp, #32]
  406be2:	9d01      	ldr	r5, [sp, #4]
  406be4:	1b5e      	subs	r6, r3, r5
  406be6:	2e00      	cmp	r6, #0
  406be8:	f340 81e1 	ble.w	406fae <_vfiprintf_r+0x752>
  406bec:	2e10      	cmp	r6, #16
  406bee:	4d9a      	ldr	r5, [pc, #616]	; (406e58 <_vfiprintf_r+0x5fc>)
  406bf0:	f340 8450 	ble.w	407494 <_vfiprintf_r+0xc38>
  406bf4:	46d4      	mov	ip, sl
  406bf6:	2710      	movs	r7, #16
  406bf8:	46a2      	mov	sl, r4
  406bfa:	9c06      	ldr	r4, [sp, #24]
  406bfc:	e007      	b.n	406c0e <_vfiprintf_r+0x3b2>
  406bfe:	f101 0e02 	add.w	lr, r1, #2
  406c02:	f10c 0c08 	add.w	ip, ip, #8
  406c06:	4601      	mov	r1, r0
  406c08:	3e10      	subs	r6, #16
  406c0a:	2e10      	cmp	r6, #16
  406c0c:	dd11      	ble.n	406c32 <_vfiprintf_r+0x3d6>
  406c0e:	1c48      	adds	r0, r1, #1
  406c10:	3210      	adds	r2, #16
  406c12:	2807      	cmp	r0, #7
  406c14:	9211      	str	r2, [sp, #68]	; 0x44
  406c16:	e88c 00a0 	stmia.w	ip, {r5, r7}
  406c1a:	9010      	str	r0, [sp, #64]	; 0x40
  406c1c:	ddef      	ble.n	406bfe <_vfiprintf_r+0x3a2>
  406c1e:	2a00      	cmp	r2, #0
  406c20:	f040 829d 	bne.w	40715e <_vfiprintf_r+0x902>
  406c24:	3e10      	subs	r6, #16
  406c26:	2e10      	cmp	r6, #16
  406c28:	f04f 0e01 	mov.w	lr, #1
  406c2c:	4611      	mov	r1, r2
  406c2e:	46cc      	mov	ip, r9
  406c30:	dced      	bgt.n	406c0e <_vfiprintf_r+0x3b2>
  406c32:	4654      	mov	r4, sl
  406c34:	46e2      	mov	sl, ip
  406c36:	4432      	add	r2, r6
  406c38:	f1be 0f07 	cmp.w	lr, #7
  406c3c:	9211      	str	r2, [sp, #68]	; 0x44
  406c3e:	e88a 0060 	stmia.w	sl, {r5, r6}
  406c42:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  406c46:	f300 8369 	bgt.w	40731c <_vfiprintf_r+0xac0>
  406c4a:	f10a 0a08 	add.w	sl, sl, #8
  406c4e:	f10e 0001 	add.w	r0, lr, #1
  406c52:	4671      	mov	r1, lr
  406c54:	e1ab      	b.n	406fae <_vfiprintf_r+0x752>
  406c56:	9608      	str	r6, [sp, #32]
  406c58:	f013 0220 	ands.w	r2, r3, #32
  406c5c:	f040 838c 	bne.w	407378 <_vfiprintf_r+0xb1c>
  406c60:	f013 0110 	ands.w	r1, r3, #16
  406c64:	f040 831a 	bne.w	40729c <_vfiprintf_r+0xa40>
  406c68:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  406c6c:	f000 8316 	beq.w	40729c <_vfiprintf_r+0xa40>
  406c70:	9807      	ldr	r0, [sp, #28]
  406c72:	460a      	mov	r2, r1
  406c74:	4601      	mov	r1, r0
  406c76:	3104      	adds	r1, #4
  406c78:	8806      	ldrh	r6, [r0, #0]
  406c7a:	9107      	str	r1, [sp, #28]
  406c7c:	2700      	movs	r7, #0
  406c7e:	e720      	b.n	406ac2 <_vfiprintf_r+0x266>
  406c80:	9608      	str	r6, [sp, #32]
  406c82:	f043 0310 	orr.w	r3, r3, #16
  406c86:	e7e7      	b.n	406c58 <_vfiprintf_r+0x3fc>
  406c88:	9608      	str	r6, [sp, #32]
  406c8a:	f043 0310 	orr.w	r3, r3, #16
  406c8e:	e708      	b.n	406aa2 <_vfiprintf_r+0x246>
  406c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406c94:	f898 2000 	ldrb.w	r2, [r8]
  406c98:	e652      	b.n	406940 <_vfiprintf_r+0xe4>
  406c9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406c9e:	2600      	movs	r6, #0
  406ca0:	f818 2b01 	ldrb.w	r2, [r8], #1
  406ca4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  406ca8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  406cac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406cb0:	2909      	cmp	r1, #9
  406cb2:	d9f5      	bls.n	406ca0 <_vfiprintf_r+0x444>
  406cb4:	e646      	b.n	406944 <_vfiprintf_r+0xe8>
  406cb6:	9608      	str	r6, [sp, #32]
  406cb8:	2800      	cmp	r0, #0
  406cba:	f040 8408 	bne.w	4074ce <_vfiprintf_r+0xc72>
  406cbe:	f043 0310 	orr.w	r3, r3, #16
  406cc2:	069e      	lsls	r6, r3, #26
  406cc4:	f100 834c 	bmi.w	407360 <_vfiprintf_r+0xb04>
  406cc8:	06dd      	lsls	r5, r3, #27
  406cca:	f100 82f3 	bmi.w	4072b4 <_vfiprintf_r+0xa58>
  406cce:	0658      	lsls	r0, r3, #25
  406cd0:	f140 82f0 	bpl.w	4072b4 <_vfiprintf_r+0xa58>
  406cd4:	9d07      	ldr	r5, [sp, #28]
  406cd6:	f9b5 6000 	ldrsh.w	r6, [r5]
  406cda:	462a      	mov	r2, r5
  406cdc:	17f7      	asrs	r7, r6, #31
  406cde:	3204      	adds	r2, #4
  406ce0:	4630      	mov	r0, r6
  406ce2:	4639      	mov	r1, r7
  406ce4:	9207      	str	r2, [sp, #28]
  406ce6:	2800      	cmp	r0, #0
  406ce8:	f171 0200 	sbcs.w	r2, r1, #0
  406cec:	f2c0 835d 	blt.w	4073aa <_vfiprintf_r+0xb4e>
  406cf0:	1c61      	adds	r1, r4, #1
  406cf2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406cf6:	f04f 0201 	mov.w	r2, #1
  406cfa:	f47f aeea 	bne.w	406ad2 <_vfiprintf_r+0x276>
  406cfe:	ea56 0107 	orrs.w	r1, r6, r7
  406d02:	f000 824d 	beq.w	4071a0 <_vfiprintf_r+0x944>
  406d06:	9302      	str	r3, [sp, #8]
  406d08:	2a01      	cmp	r2, #1
  406d0a:	f000 828c 	beq.w	407226 <_vfiprintf_r+0x9ca>
  406d0e:	2a02      	cmp	r2, #2
  406d10:	f040 825c 	bne.w	4071cc <_vfiprintf_r+0x970>
  406d14:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406d16:	46cb      	mov	fp, r9
  406d18:	0933      	lsrs	r3, r6, #4
  406d1a:	f006 010f 	and.w	r1, r6, #15
  406d1e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  406d22:	093a      	lsrs	r2, r7, #4
  406d24:	461e      	mov	r6, r3
  406d26:	4617      	mov	r7, r2
  406d28:	5c43      	ldrb	r3, [r0, r1]
  406d2a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  406d2e:	ea56 0307 	orrs.w	r3, r6, r7
  406d32:	d1f1      	bne.n	406d18 <_vfiprintf_r+0x4bc>
  406d34:	eba9 030b 	sub.w	r3, r9, fp
  406d38:	9305      	str	r3, [sp, #20]
  406d3a:	e6e1      	b.n	406b00 <_vfiprintf_r+0x2a4>
  406d3c:	2800      	cmp	r0, #0
  406d3e:	f040 83c0 	bne.w	4074c2 <_vfiprintf_r+0xc66>
  406d42:	0699      	lsls	r1, r3, #26
  406d44:	f100 8367 	bmi.w	407416 <_vfiprintf_r+0xbba>
  406d48:	06da      	lsls	r2, r3, #27
  406d4a:	f100 80f1 	bmi.w	406f30 <_vfiprintf_r+0x6d4>
  406d4e:	065b      	lsls	r3, r3, #25
  406d50:	f140 80ee 	bpl.w	406f30 <_vfiprintf_r+0x6d4>
  406d54:	9a07      	ldr	r2, [sp, #28]
  406d56:	6813      	ldr	r3, [r2, #0]
  406d58:	3204      	adds	r2, #4
  406d5a:	9207      	str	r2, [sp, #28]
  406d5c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  406d60:	801a      	strh	r2, [r3, #0]
  406d62:	e5b8      	b.n	4068d6 <_vfiprintf_r+0x7a>
  406d64:	9807      	ldr	r0, [sp, #28]
  406d66:	4a3d      	ldr	r2, [pc, #244]	; (406e5c <_vfiprintf_r+0x600>)
  406d68:	9608      	str	r6, [sp, #32]
  406d6a:	920b      	str	r2, [sp, #44]	; 0x2c
  406d6c:	6806      	ldr	r6, [r0, #0]
  406d6e:	2278      	movs	r2, #120	; 0x78
  406d70:	2130      	movs	r1, #48	; 0x30
  406d72:	3004      	adds	r0, #4
  406d74:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406d78:	f043 0302 	orr.w	r3, r3, #2
  406d7c:	9007      	str	r0, [sp, #28]
  406d7e:	2700      	movs	r7, #0
  406d80:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406d84:	2202      	movs	r2, #2
  406d86:	e69c      	b.n	406ac2 <_vfiprintf_r+0x266>
  406d88:	9608      	str	r6, [sp, #32]
  406d8a:	2800      	cmp	r0, #0
  406d8c:	d099      	beq.n	406cc2 <_vfiprintf_r+0x466>
  406d8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406d92:	e796      	b.n	406cc2 <_vfiprintf_r+0x466>
  406d94:	f898 2000 	ldrb.w	r2, [r8]
  406d98:	2d00      	cmp	r5, #0
  406d9a:	f47f add1 	bne.w	406940 <_vfiprintf_r+0xe4>
  406d9e:	2001      	movs	r0, #1
  406da0:	2520      	movs	r5, #32
  406da2:	e5cd      	b.n	406940 <_vfiprintf_r+0xe4>
  406da4:	f043 0301 	orr.w	r3, r3, #1
  406da8:	f898 2000 	ldrb.w	r2, [r8]
  406dac:	e5c8      	b.n	406940 <_vfiprintf_r+0xe4>
  406dae:	9608      	str	r6, [sp, #32]
  406db0:	2800      	cmp	r0, #0
  406db2:	f040 8393 	bne.w	4074dc <_vfiprintf_r+0xc80>
  406db6:	4929      	ldr	r1, [pc, #164]	; (406e5c <_vfiprintf_r+0x600>)
  406db8:	910b      	str	r1, [sp, #44]	; 0x2c
  406dba:	069f      	lsls	r7, r3, #26
  406dbc:	f100 82e8 	bmi.w	407390 <_vfiprintf_r+0xb34>
  406dc0:	9807      	ldr	r0, [sp, #28]
  406dc2:	06de      	lsls	r6, r3, #27
  406dc4:	4601      	mov	r1, r0
  406dc6:	f100 8270 	bmi.w	4072aa <_vfiprintf_r+0xa4e>
  406dca:	065d      	lsls	r5, r3, #25
  406dcc:	f140 826d 	bpl.w	4072aa <_vfiprintf_r+0xa4e>
  406dd0:	3104      	adds	r1, #4
  406dd2:	8806      	ldrh	r6, [r0, #0]
  406dd4:	9107      	str	r1, [sp, #28]
  406dd6:	2700      	movs	r7, #0
  406dd8:	07d8      	lsls	r0, r3, #31
  406dda:	f140 8222 	bpl.w	407222 <_vfiprintf_r+0x9c6>
  406dde:	ea56 0107 	orrs.w	r1, r6, r7
  406de2:	f000 821e 	beq.w	407222 <_vfiprintf_r+0x9c6>
  406de6:	2130      	movs	r1, #48	; 0x30
  406de8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406dec:	f043 0302 	orr.w	r3, r3, #2
  406df0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406df4:	2202      	movs	r2, #2
  406df6:	e664      	b.n	406ac2 <_vfiprintf_r+0x266>
  406df8:	9608      	str	r6, [sp, #32]
  406dfa:	2800      	cmp	r0, #0
  406dfc:	f040 836b 	bne.w	4074d6 <_vfiprintf_r+0xc7a>
  406e00:	4917      	ldr	r1, [pc, #92]	; (406e60 <_vfiprintf_r+0x604>)
  406e02:	910b      	str	r1, [sp, #44]	; 0x2c
  406e04:	e7d9      	b.n	406dba <_vfiprintf_r+0x55e>
  406e06:	9907      	ldr	r1, [sp, #28]
  406e08:	9608      	str	r6, [sp, #32]
  406e0a:	680a      	ldr	r2, [r1, #0]
  406e0c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406e10:	f04f 0000 	mov.w	r0, #0
  406e14:	460a      	mov	r2, r1
  406e16:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  406e1a:	3204      	adds	r2, #4
  406e1c:	2001      	movs	r0, #1
  406e1e:	9001      	str	r0, [sp, #4]
  406e20:	9207      	str	r2, [sp, #28]
  406e22:	9005      	str	r0, [sp, #20]
  406e24:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406e28:	9302      	str	r3, [sp, #8]
  406e2a:	2400      	movs	r4, #0
  406e2c:	e670      	b.n	406b10 <_vfiprintf_r+0x2b4>
  406e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406e32:	f898 2000 	ldrb.w	r2, [r8]
  406e36:	e583      	b.n	406940 <_vfiprintf_r+0xe4>
  406e38:	f898 2000 	ldrb.w	r2, [r8]
  406e3c:	2a6c      	cmp	r2, #108	; 0x6c
  406e3e:	bf03      	ittte	eq
  406e40:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406e44:	f043 0320 	orreq.w	r3, r3, #32
  406e48:	f108 0801 	addeq.w	r8, r8, #1
  406e4c:	f043 0310 	orrne.w	r3, r3, #16
  406e50:	e576      	b.n	406940 <_vfiprintf_r+0xe4>
  406e52:	bf00      	nop
  406e54:	0041b988 	.word	0x0041b988
  406e58:	0041b998 	.word	0x0041b998
  406e5c:	0041b96c 	.word	0x0041b96c
  406e60:	0041b958 	.word	0x0041b958
  406e64:	9907      	ldr	r1, [sp, #28]
  406e66:	680e      	ldr	r6, [r1, #0]
  406e68:	460a      	mov	r2, r1
  406e6a:	2e00      	cmp	r6, #0
  406e6c:	f102 0204 	add.w	r2, r2, #4
  406e70:	f6ff ae0f 	blt.w	406a92 <_vfiprintf_r+0x236>
  406e74:	9207      	str	r2, [sp, #28]
  406e76:	f898 2000 	ldrb.w	r2, [r8]
  406e7a:	e561      	b.n	406940 <_vfiprintf_r+0xe4>
  406e7c:	f898 2000 	ldrb.w	r2, [r8]
  406e80:	2001      	movs	r0, #1
  406e82:	252b      	movs	r5, #43	; 0x2b
  406e84:	e55c      	b.n	406940 <_vfiprintf_r+0xe4>
  406e86:	9907      	ldr	r1, [sp, #28]
  406e88:	9608      	str	r6, [sp, #32]
  406e8a:	f8d1 b000 	ldr.w	fp, [r1]
  406e8e:	f04f 0200 	mov.w	r2, #0
  406e92:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406e96:	1d0e      	adds	r6, r1, #4
  406e98:	f1bb 0f00 	cmp.w	fp, #0
  406e9c:	f000 82e5 	beq.w	40746a <_vfiprintf_r+0xc0e>
  406ea0:	1c67      	adds	r7, r4, #1
  406ea2:	f000 82c4 	beq.w	40742e <_vfiprintf_r+0xbd2>
  406ea6:	4622      	mov	r2, r4
  406ea8:	2100      	movs	r1, #0
  406eaa:	4658      	mov	r0, fp
  406eac:	9301      	str	r3, [sp, #4]
  406eae:	f001 f91f 	bl	4080f0 <memchr>
  406eb2:	9b01      	ldr	r3, [sp, #4]
  406eb4:	2800      	cmp	r0, #0
  406eb6:	f000 82e5 	beq.w	407484 <_vfiprintf_r+0xc28>
  406eba:	eba0 020b 	sub.w	r2, r0, fp
  406ebe:	9205      	str	r2, [sp, #20]
  406ec0:	9607      	str	r6, [sp, #28]
  406ec2:	9302      	str	r3, [sp, #8]
  406ec4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406ec8:	2400      	movs	r4, #0
  406eca:	e619      	b.n	406b00 <_vfiprintf_r+0x2a4>
  406ecc:	f898 2000 	ldrb.w	r2, [r8]
  406ed0:	2a2a      	cmp	r2, #42	; 0x2a
  406ed2:	f108 0701 	add.w	r7, r8, #1
  406ed6:	f000 82e9 	beq.w	4074ac <_vfiprintf_r+0xc50>
  406eda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406ede:	2909      	cmp	r1, #9
  406ee0:	46b8      	mov	r8, r7
  406ee2:	f04f 0400 	mov.w	r4, #0
  406ee6:	f63f ad2d 	bhi.w	406944 <_vfiprintf_r+0xe8>
  406eea:	f818 2b01 	ldrb.w	r2, [r8], #1
  406eee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406ef2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406ef6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406efa:	2909      	cmp	r1, #9
  406efc:	d9f5      	bls.n	406eea <_vfiprintf_r+0x68e>
  406efe:	e521      	b.n	406944 <_vfiprintf_r+0xe8>
  406f00:	f043 0320 	orr.w	r3, r3, #32
  406f04:	f898 2000 	ldrb.w	r2, [r8]
  406f08:	e51a      	b.n	406940 <_vfiprintf_r+0xe4>
  406f0a:	9608      	str	r6, [sp, #32]
  406f0c:	2800      	cmp	r0, #0
  406f0e:	f040 82db 	bne.w	4074c8 <_vfiprintf_r+0xc6c>
  406f12:	2a00      	cmp	r2, #0
  406f14:	f000 80e7 	beq.w	4070e6 <_vfiprintf_r+0x88a>
  406f18:	2101      	movs	r1, #1
  406f1a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406f1e:	f04f 0200 	mov.w	r2, #0
  406f22:	9101      	str	r1, [sp, #4]
  406f24:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406f28:	9105      	str	r1, [sp, #20]
  406f2a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406f2e:	e77b      	b.n	406e28 <_vfiprintf_r+0x5cc>
  406f30:	9a07      	ldr	r2, [sp, #28]
  406f32:	6813      	ldr	r3, [r2, #0]
  406f34:	3204      	adds	r2, #4
  406f36:	9207      	str	r2, [sp, #28]
  406f38:	9a03      	ldr	r2, [sp, #12]
  406f3a:	601a      	str	r2, [r3, #0]
  406f3c:	e4cb      	b.n	4068d6 <_vfiprintf_r+0x7a>
  406f3e:	aa0f      	add	r2, sp, #60	; 0x3c
  406f40:	9904      	ldr	r1, [sp, #16]
  406f42:	4620      	mov	r0, r4
  406f44:	f7ff fc4a 	bl	4067dc <__sprint_r.part.0>
  406f48:	2800      	cmp	r0, #0
  406f4a:	f040 8139 	bne.w	4071c0 <_vfiprintf_r+0x964>
  406f4e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406f50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406f52:	f101 0c01 	add.w	ip, r1, #1
  406f56:	46ce      	mov	lr, r9
  406f58:	e5ff      	b.n	406b5a <_vfiprintf_r+0x2fe>
  406f5a:	9910      	ldr	r1, [sp, #64]	; 0x40
  406f5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406f5e:	1c48      	adds	r0, r1, #1
  406f60:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406f64:	2d00      	cmp	r5, #0
  406f66:	f43f ae22 	beq.w	406bae <_vfiprintf_r+0x352>
  406f6a:	3201      	adds	r2, #1
  406f6c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  406f70:	2101      	movs	r1, #1
  406f72:	2807      	cmp	r0, #7
  406f74:	9211      	str	r2, [sp, #68]	; 0x44
  406f76:	9010      	str	r0, [sp, #64]	; 0x40
  406f78:	f8ca 5000 	str.w	r5, [sl]
  406f7c:	f8ca 1004 	str.w	r1, [sl, #4]
  406f80:	f340 8108 	ble.w	407194 <_vfiprintf_r+0x938>
  406f84:	2a00      	cmp	r2, #0
  406f86:	f040 81bc 	bne.w	407302 <_vfiprintf_r+0xaa6>
  406f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406f8c:	2b00      	cmp	r3, #0
  406f8e:	f43f ae1f 	beq.w	406bd0 <_vfiprintf_r+0x374>
  406f92:	ab0e      	add	r3, sp, #56	; 0x38
  406f94:	2202      	movs	r2, #2
  406f96:	4608      	mov	r0, r1
  406f98:	931c      	str	r3, [sp, #112]	; 0x70
  406f9a:	921d      	str	r2, [sp, #116]	; 0x74
  406f9c:	46ca      	mov	sl, r9
  406f9e:	4601      	mov	r1, r0
  406fa0:	f10a 0a08 	add.w	sl, sl, #8
  406fa4:	3001      	adds	r0, #1
  406fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406fa8:	2b80      	cmp	r3, #128	; 0x80
  406faa:	f43f ae19 	beq.w	406be0 <_vfiprintf_r+0x384>
  406fae:	9b05      	ldr	r3, [sp, #20]
  406fb0:	1ae4      	subs	r4, r4, r3
  406fb2:	2c00      	cmp	r4, #0
  406fb4:	dd2e      	ble.n	407014 <_vfiprintf_r+0x7b8>
  406fb6:	2c10      	cmp	r4, #16
  406fb8:	4db3      	ldr	r5, [pc, #716]	; (407288 <_vfiprintf_r+0xa2c>)
  406fba:	dd1e      	ble.n	406ffa <_vfiprintf_r+0x79e>
  406fbc:	46d6      	mov	lr, sl
  406fbe:	2610      	movs	r6, #16
  406fc0:	9f06      	ldr	r7, [sp, #24]
  406fc2:	f8dd a010 	ldr.w	sl, [sp, #16]
  406fc6:	e006      	b.n	406fd6 <_vfiprintf_r+0x77a>
  406fc8:	1c88      	adds	r0, r1, #2
  406fca:	f10e 0e08 	add.w	lr, lr, #8
  406fce:	4619      	mov	r1, r3
  406fd0:	3c10      	subs	r4, #16
  406fd2:	2c10      	cmp	r4, #16
  406fd4:	dd10      	ble.n	406ff8 <_vfiprintf_r+0x79c>
  406fd6:	1c4b      	adds	r3, r1, #1
  406fd8:	3210      	adds	r2, #16
  406fda:	2b07      	cmp	r3, #7
  406fdc:	9211      	str	r2, [sp, #68]	; 0x44
  406fde:	e88e 0060 	stmia.w	lr, {r5, r6}
  406fe2:	9310      	str	r3, [sp, #64]	; 0x40
  406fe4:	ddf0      	ble.n	406fc8 <_vfiprintf_r+0x76c>
  406fe6:	2a00      	cmp	r2, #0
  406fe8:	d165      	bne.n	4070b6 <_vfiprintf_r+0x85a>
  406fea:	3c10      	subs	r4, #16
  406fec:	2c10      	cmp	r4, #16
  406fee:	f04f 0001 	mov.w	r0, #1
  406ff2:	4611      	mov	r1, r2
  406ff4:	46ce      	mov	lr, r9
  406ff6:	dcee      	bgt.n	406fd6 <_vfiprintf_r+0x77a>
  406ff8:	46f2      	mov	sl, lr
  406ffa:	4422      	add	r2, r4
  406ffc:	2807      	cmp	r0, #7
  406ffe:	9211      	str	r2, [sp, #68]	; 0x44
  407000:	f8ca 5000 	str.w	r5, [sl]
  407004:	f8ca 4004 	str.w	r4, [sl, #4]
  407008:	9010      	str	r0, [sp, #64]	; 0x40
  40700a:	f300 8085 	bgt.w	407118 <_vfiprintf_r+0x8bc>
  40700e:	f10a 0a08 	add.w	sl, sl, #8
  407012:	3001      	adds	r0, #1
  407014:	9905      	ldr	r1, [sp, #20]
  407016:	f8ca b000 	str.w	fp, [sl]
  40701a:	440a      	add	r2, r1
  40701c:	2807      	cmp	r0, #7
  40701e:	9211      	str	r2, [sp, #68]	; 0x44
  407020:	f8ca 1004 	str.w	r1, [sl, #4]
  407024:	9010      	str	r0, [sp, #64]	; 0x40
  407026:	f340 8082 	ble.w	40712e <_vfiprintf_r+0x8d2>
  40702a:	2a00      	cmp	r2, #0
  40702c:	f040 8118 	bne.w	407260 <_vfiprintf_r+0xa04>
  407030:	9b02      	ldr	r3, [sp, #8]
  407032:	9210      	str	r2, [sp, #64]	; 0x40
  407034:	0758      	lsls	r0, r3, #29
  407036:	d535      	bpl.n	4070a4 <_vfiprintf_r+0x848>
  407038:	9b08      	ldr	r3, [sp, #32]
  40703a:	9901      	ldr	r1, [sp, #4]
  40703c:	1a5c      	subs	r4, r3, r1
  40703e:	2c00      	cmp	r4, #0
  407040:	f340 80e7 	ble.w	407212 <_vfiprintf_r+0x9b6>
  407044:	46ca      	mov	sl, r9
  407046:	2c10      	cmp	r4, #16
  407048:	f340 8218 	ble.w	40747c <_vfiprintf_r+0xc20>
  40704c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40704e:	4e8f      	ldr	r6, [pc, #572]	; (40728c <_vfiprintf_r+0xa30>)
  407050:	9f06      	ldr	r7, [sp, #24]
  407052:	f8dd b010 	ldr.w	fp, [sp, #16]
  407056:	2510      	movs	r5, #16
  407058:	e006      	b.n	407068 <_vfiprintf_r+0x80c>
  40705a:	1c88      	adds	r0, r1, #2
  40705c:	f10a 0a08 	add.w	sl, sl, #8
  407060:	4619      	mov	r1, r3
  407062:	3c10      	subs	r4, #16
  407064:	2c10      	cmp	r4, #16
  407066:	dd11      	ble.n	40708c <_vfiprintf_r+0x830>
  407068:	1c4b      	adds	r3, r1, #1
  40706a:	3210      	adds	r2, #16
  40706c:	2b07      	cmp	r3, #7
  40706e:	9211      	str	r2, [sp, #68]	; 0x44
  407070:	f8ca 6000 	str.w	r6, [sl]
  407074:	f8ca 5004 	str.w	r5, [sl, #4]
  407078:	9310      	str	r3, [sp, #64]	; 0x40
  40707a:	ddee      	ble.n	40705a <_vfiprintf_r+0x7fe>
  40707c:	bb42      	cbnz	r2, 4070d0 <_vfiprintf_r+0x874>
  40707e:	3c10      	subs	r4, #16
  407080:	2c10      	cmp	r4, #16
  407082:	f04f 0001 	mov.w	r0, #1
  407086:	4611      	mov	r1, r2
  407088:	46ca      	mov	sl, r9
  40708a:	dced      	bgt.n	407068 <_vfiprintf_r+0x80c>
  40708c:	4422      	add	r2, r4
  40708e:	2807      	cmp	r0, #7
  407090:	9211      	str	r2, [sp, #68]	; 0x44
  407092:	f8ca 6000 	str.w	r6, [sl]
  407096:	f8ca 4004 	str.w	r4, [sl, #4]
  40709a:	9010      	str	r0, [sp, #64]	; 0x40
  40709c:	dd51      	ble.n	407142 <_vfiprintf_r+0x8e6>
  40709e:	2a00      	cmp	r2, #0
  4070a0:	f040 819b 	bne.w	4073da <_vfiprintf_r+0xb7e>
  4070a4:	9b03      	ldr	r3, [sp, #12]
  4070a6:	9a08      	ldr	r2, [sp, #32]
  4070a8:	9901      	ldr	r1, [sp, #4]
  4070aa:	428a      	cmp	r2, r1
  4070ac:	bfac      	ite	ge
  4070ae:	189b      	addge	r3, r3, r2
  4070b0:	185b      	addlt	r3, r3, r1
  4070b2:	9303      	str	r3, [sp, #12]
  4070b4:	e04e      	b.n	407154 <_vfiprintf_r+0x8f8>
  4070b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4070b8:	4651      	mov	r1, sl
  4070ba:	4638      	mov	r0, r7
  4070bc:	f7ff fb8e 	bl	4067dc <__sprint_r.part.0>
  4070c0:	2800      	cmp	r0, #0
  4070c2:	f040 813f 	bne.w	407344 <_vfiprintf_r+0xae8>
  4070c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4070c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4070ca:	1c48      	adds	r0, r1, #1
  4070cc:	46ce      	mov	lr, r9
  4070ce:	e77f      	b.n	406fd0 <_vfiprintf_r+0x774>
  4070d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4070d2:	4659      	mov	r1, fp
  4070d4:	4638      	mov	r0, r7
  4070d6:	f7ff fb81 	bl	4067dc <__sprint_r.part.0>
  4070da:	b960      	cbnz	r0, 4070f6 <_vfiprintf_r+0x89a>
  4070dc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4070de:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4070e0:	1c48      	adds	r0, r1, #1
  4070e2:	46ca      	mov	sl, r9
  4070e4:	e7bd      	b.n	407062 <_vfiprintf_r+0x806>
  4070e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4070e8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4070ec:	2b00      	cmp	r3, #0
  4070ee:	f040 81d4 	bne.w	40749a <_vfiprintf_r+0xc3e>
  4070f2:	2300      	movs	r3, #0
  4070f4:	9310      	str	r3, [sp, #64]	; 0x40
  4070f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4070fa:	f013 0f01 	tst.w	r3, #1
  4070fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407102:	d102      	bne.n	40710a <_vfiprintf_r+0x8ae>
  407104:	059a      	lsls	r2, r3, #22
  407106:	f140 80de 	bpl.w	4072c6 <_vfiprintf_r+0xa6a>
  40710a:	065b      	lsls	r3, r3, #25
  40710c:	f53f acb2 	bmi.w	406a74 <_vfiprintf_r+0x218>
  407110:	9803      	ldr	r0, [sp, #12]
  407112:	b02d      	add	sp, #180	; 0xb4
  407114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407118:	2a00      	cmp	r2, #0
  40711a:	f040 8106 	bne.w	40732a <_vfiprintf_r+0xace>
  40711e:	9a05      	ldr	r2, [sp, #20]
  407120:	921d      	str	r2, [sp, #116]	; 0x74
  407122:	2301      	movs	r3, #1
  407124:	9211      	str	r2, [sp, #68]	; 0x44
  407126:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40712a:	9310      	str	r3, [sp, #64]	; 0x40
  40712c:	46ca      	mov	sl, r9
  40712e:	f10a 0a08 	add.w	sl, sl, #8
  407132:	9b02      	ldr	r3, [sp, #8]
  407134:	0759      	lsls	r1, r3, #29
  407136:	d504      	bpl.n	407142 <_vfiprintf_r+0x8e6>
  407138:	9b08      	ldr	r3, [sp, #32]
  40713a:	9901      	ldr	r1, [sp, #4]
  40713c:	1a5c      	subs	r4, r3, r1
  40713e:	2c00      	cmp	r4, #0
  407140:	dc81      	bgt.n	407046 <_vfiprintf_r+0x7ea>
  407142:	9b03      	ldr	r3, [sp, #12]
  407144:	9908      	ldr	r1, [sp, #32]
  407146:	9801      	ldr	r0, [sp, #4]
  407148:	4281      	cmp	r1, r0
  40714a:	bfac      	ite	ge
  40714c:	185b      	addge	r3, r3, r1
  40714e:	181b      	addlt	r3, r3, r0
  407150:	9303      	str	r3, [sp, #12]
  407152:	bb72      	cbnz	r2, 4071b2 <_vfiprintf_r+0x956>
  407154:	2300      	movs	r3, #0
  407156:	9310      	str	r3, [sp, #64]	; 0x40
  407158:	46ca      	mov	sl, r9
  40715a:	f7ff bbbc 	b.w	4068d6 <_vfiprintf_r+0x7a>
  40715e:	aa0f      	add	r2, sp, #60	; 0x3c
  407160:	9904      	ldr	r1, [sp, #16]
  407162:	4620      	mov	r0, r4
  407164:	f7ff fb3a 	bl	4067dc <__sprint_r.part.0>
  407168:	bb50      	cbnz	r0, 4071c0 <_vfiprintf_r+0x964>
  40716a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40716c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40716e:	f101 0e01 	add.w	lr, r1, #1
  407172:	46cc      	mov	ip, r9
  407174:	e548      	b.n	406c08 <_vfiprintf_r+0x3ac>
  407176:	2a00      	cmp	r2, #0
  407178:	f040 8140 	bne.w	4073fc <_vfiprintf_r+0xba0>
  40717c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  407180:	2900      	cmp	r1, #0
  407182:	f000 811b 	beq.w	4073bc <_vfiprintf_r+0xb60>
  407186:	2201      	movs	r2, #1
  407188:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40718c:	4610      	mov	r0, r2
  40718e:	921d      	str	r2, [sp, #116]	; 0x74
  407190:	911c      	str	r1, [sp, #112]	; 0x70
  407192:	46ca      	mov	sl, r9
  407194:	4601      	mov	r1, r0
  407196:	f10a 0a08 	add.w	sl, sl, #8
  40719a:	3001      	adds	r0, #1
  40719c:	e507      	b.n	406bae <_vfiprintf_r+0x352>
  40719e:	9b02      	ldr	r3, [sp, #8]
  4071a0:	2a01      	cmp	r2, #1
  4071a2:	f000 8098 	beq.w	4072d6 <_vfiprintf_r+0xa7a>
  4071a6:	2a02      	cmp	r2, #2
  4071a8:	d10d      	bne.n	4071c6 <_vfiprintf_r+0x96a>
  4071aa:	9302      	str	r3, [sp, #8]
  4071ac:	2600      	movs	r6, #0
  4071ae:	2700      	movs	r7, #0
  4071b0:	e5b0      	b.n	406d14 <_vfiprintf_r+0x4b8>
  4071b2:	aa0f      	add	r2, sp, #60	; 0x3c
  4071b4:	9904      	ldr	r1, [sp, #16]
  4071b6:	9806      	ldr	r0, [sp, #24]
  4071b8:	f7ff fb10 	bl	4067dc <__sprint_r.part.0>
  4071bc:	2800      	cmp	r0, #0
  4071be:	d0c9      	beq.n	407154 <_vfiprintf_r+0x8f8>
  4071c0:	f8dd b010 	ldr.w	fp, [sp, #16]
  4071c4:	e797      	b.n	4070f6 <_vfiprintf_r+0x89a>
  4071c6:	9302      	str	r3, [sp, #8]
  4071c8:	2600      	movs	r6, #0
  4071ca:	2700      	movs	r7, #0
  4071cc:	4649      	mov	r1, r9
  4071ce:	e000      	b.n	4071d2 <_vfiprintf_r+0x976>
  4071d0:	4659      	mov	r1, fp
  4071d2:	08f2      	lsrs	r2, r6, #3
  4071d4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4071d8:	08f8      	lsrs	r0, r7, #3
  4071da:	f006 0307 	and.w	r3, r6, #7
  4071de:	4607      	mov	r7, r0
  4071e0:	4616      	mov	r6, r2
  4071e2:	3330      	adds	r3, #48	; 0x30
  4071e4:	ea56 0207 	orrs.w	r2, r6, r7
  4071e8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4071ec:	f101 3bff 	add.w	fp, r1, #4294967295
  4071f0:	d1ee      	bne.n	4071d0 <_vfiprintf_r+0x974>
  4071f2:	9a02      	ldr	r2, [sp, #8]
  4071f4:	07d6      	lsls	r6, r2, #31
  4071f6:	f57f ad9d 	bpl.w	406d34 <_vfiprintf_r+0x4d8>
  4071fa:	2b30      	cmp	r3, #48	; 0x30
  4071fc:	f43f ad9a 	beq.w	406d34 <_vfiprintf_r+0x4d8>
  407200:	3902      	subs	r1, #2
  407202:	2330      	movs	r3, #48	; 0x30
  407204:	f80b 3c01 	strb.w	r3, [fp, #-1]
  407208:	eba9 0301 	sub.w	r3, r9, r1
  40720c:	9305      	str	r3, [sp, #20]
  40720e:	468b      	mov	fp, r1
  407210:	e476      	b.n	406b00 <_vfiprintf_r+0x2a4>
  407212:	9b03      	ldr	r3, [sp, #12]
  407214:	9a08      	ldr	r2, [sp, #32]
  407216:	428a      	cmp	r2, r1
  407218:	bfac      	ite	ge
  40721a:	189b      	addge	r3, r3, r2
  40721c:	185b      	addlt	r3, r3, r1
  40721e:	9303      	str	r3, [sp, #12]
  407220:	e798      	b.n	407154 <_vfiprintf_r+0x8f8>
  407222:	2202      	movs	r2, #2
  407224:	e44d      	b.n	406ac2 <_vfiprintf_r+0x266>
  407226:	2f00      	cmp	r7, #0
  407228:	bf08      	it	eq
  40722a:	2e0a      	cmpeq	r6, #10
  40722c:	d352      	bcc.n	4072d4 <_vfiprintf_r+0xa78>
  40722e:	46cb      	mov	fp, r9
  407230:	4630      	mov	r0, r6
  407232:	4639      	mov	r1, r7
  407234:	220a      	movs	r2, #10
  407236:	2300      	movs	r3, #0
  407238:	f001 fbc6 	bl	4089c8 <__aeabi_uldivmod>
  40723c:	3230      	adds	r2, #48	; 0x30
  40723e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  407242:	4630      	mov	r0, r6
  407244:	4639      	mov	r1, r7
  407246:	2300      	movs	r3, #0
  407248:	220a      	movs	r2, #10
  40724a:	f001 fbbd 	bl	4089c8 <__aeabi_uldivmod>
  40724e:	4606      	mov	r6, r0
  407250:	460f      	mov	r7, r1
  407252:	ea56 0307 	orrs.w	r3, r6, r7
  407256:	d1eb      	bne.n	407230 <_vfiprintf_r+0x9d4>
  407258:	e56c      	b.n	406d34 <_vfiprintf_r+0x4d8>
  40725a:	9405      	str	r4, [sp, #20]
  40725c:	46cb      	mov	fp, r9
  40725e:	e44f      	b.n	406b00 <_vfiprintf_r+0x2a4>
  407260:	aa0f      	add	r2, sp, #60	; 0x3c
  407262:	9904      	ldr	r1, [sp, #16]
  407264:	9806      	ldr	r0, [sp, #24]
  407266:	f7ff fab9 	bl	4067dc <__sprint_r.part.0>
  40726a:	2800      	cmp	r0, #0
  40726c:	d1a8      	bne.n	4071c0 <_vfiprintf_r+0x964>
  40726e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407270:	46ca      	mov	sl, r9
  407272:	e75e      	b.n	407132 <_vfiprintf_r+0x8d6>
  407274:	aa0f      	add	r2, sp, #60	; 0x3c
  407276:	9904      	ldr	r1, [sp, #16]
  407278:	9806      	ldr	r0, [sp, #24]
  40727a:	f7ff faaf 	bl	4067dc <__sprint_r.part.0>
  40727e:	2800      	cmp	r0, #0
  407280:	d19e      	bne.n	4071c0 <_vfiprintf_r+0x964>
  407282:	46ca      	mov	sl, r9
  407284:	f7ff bbc0 	b.w	406a08 <_vfiprintf_r+0x1ac>
  407288:	0041b998 	.word	0x0041b998
  40728c:	0041b988 	.word	0x0041b988
  407290:	3104      	adds	r1, #4
  407292:	6816      	ldr	r6, [r2, #0]
  407294:	9107      	str	r1, [sp, #28]
  407296:	2201      	movs	r2, #1
  407298:	2700      	movs	r7, #0
  40729a:	e412      	b.n	406ac2 <_vfiprintf_r+0x266>
  40729c:	9807      	ldr	r0, [sp, #28]
  40729e:	4601      	mov	r1, r0
  4072a0:	3104      	adds	r1, #4
  4072a2:	6806      	ldr	r6, [r0, #0]
  4072a4:	9107      	str	r1, [sp, #28]
  4072a6:	2700      	movs	r7, #0
  4072a8:	e40b      	b.n	406ac2 <_vfiprintf_r+0x266>
  4072aa:	680e      	ldr	r6, [r1, #0]
  4072ac:	3104      	adds	r1, #4
  4072ae:	9107      	str	r1, [sp, #28]
  4072b0:	2700      	movs	r7, #0
  4072b2:	e591      	b.n	406dd8 <_vfiprintf_r+0x57c>
  4072b4:	9907      	ldr	r1, [sp, #28]
  4072b6:	680e      	ldr	r6, [r1, #0]
  4072b8:	460a      	mov	r2, r1
  4072ba:	17f7      	asrs	r7, r6, #31
  4072bc:	3204      	adds	r2, #4
  4072be:	9207      	str	r2, [sp, #28]
  4072c0:	4630      	mov	r0, r6
  4072c2:	4639      	mov	r1, r7
  4072c4:	e50f      	b.n	406ce6 <_vfiprintf_r+0x48a>
  4072c6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4072ca:	f000 fe7f 	bl	407fcc <__retarget_lock_release_recursive>
  4072ce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4072d2:	e71a      	b.n	40710a <_vfiprintf_r+0x8ae>
  4072d4:	9b02      	ldr	r3, [sp, #8]
  4072d6:	9302      	str	r3, [sp, #8]
  4072d8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4072dc:	3630      	adds	r6, #48	; 0x30
  4072de:	2301      	movs	r3, #1
  4072e0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4072e4:	9305      	str	r3, [sp, #20]
  4072e6:	e40b      	b.n	406b00 <_vfiprintf_r+0x2a4>
  4072e8:	aa0f      	add	r2, sp, #60	; 0x3c
  4072ea:	9904      	ldr	r1, [sp, #16]
  4072ec:	9806      	ldr	r0, [sp, #24]
  4072ee:	f7ff fa75 	bl	4067dc <__sprint_r.part.0>
  4072f2:	2800      	cmp	r0, #0
  4072f4:	f47f af64 	bne.w	4071c0 <_vfiprintf_r+0x964>
  4072f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4072fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4072fc:	1c48      	adds	r0, r1, #1
  4072fe:	46ca      	mov	sl, r9
  407300:	e651      	b.n	406fa6 <_vfiprintf_r+0x74a>
  407302:	aa0f      	add	r2, sp, #60	; 0x3c
  407304:	9904      	ldr	r1, [sp, #16]
  407306:	9806      	ldr	r0, [sp, #24]
  407308:	f7ff fa68 	bl	4067dc <__sprint_r.part.0>
  40730c:	2800      	cmp	r0, #0
  40730e:	f47f af57 	bne.w	4071c0 <_vfiprintf_r+0x964>
  407312:	9910      	ldr	r1, [sp, #64]	; 0x40
  407314:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407316:	1c48      	adds	r0, r1, #1
  407318:	46ca      	mov	sl, r9
  40731a:	e448      	b.n	406bae <_vfiprintf_r+0x352>
  40731c:	2a00      	cmp	r2, #0
  40731e:	f040 8091 	bne.w	407444 <_vfiprintf_r+0xbe8>
  407322:	2001      	movs	r0, #1
  407324:	4611      	mov	r1, r2
  407326:	46ca      	mov	sl, r9
  407328:	e641      	b.n	406fae <_vfiprintf_r+0x752>
  40732a:	aa0f      	add	r2, sp, #60	; 0x3c
  40732c:	9904      	ldr	r1, [sp, #16]
  40732e:	9806      	ldr	r0, [sp, #24]
  407330:	f7ff fa54 	bl	4067dc <__sprint_r.part.0>
  407334:	2800      	cmp	r0, #0
  407336:	f47f af43 	bne.w	4071c0 <_vfiprintf_r+0x964>
  40733a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40733c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40733e:	3001      	adds	r0, #1
  407340:	46ca      	mov	sl, r9
  407342:	e667      	b.n	407014 <_vfiprintf_r+0x7b8>
  407344:	46d3      	mov	fp, sl
  407346:	e6d6      	b.n	4070f6 <_vfiprintf_r+0x89a>
  407348:	9e07      	ldr	r6, [sp, #28]
  40734a:	3607      	adds	r6, #7
  40734c:	f026 0207 	bic.w	r2, r6, #7
  407350:	f102 0108 	add.w	r1, r2, #8
  407354:	e9d2 6700 	ldrd	r6, r7, [r2]
  407358:	9107      	str	r1, [sp, #28]
  40735a:	2201      	movs	r2, #1
  40735c:	f7ff bbb1 	b.w	406ac2 <_vfiprintf_r+0x266>
  407360:	9e07      	ldr	r6, [sp, #28]
  407362:	3607      	adds	r6, #7
  407364:	f026 0607 	bic.w	r6, r6, #7
  407368:	e9d6 0100 	ldrd	r0, r1, [r6]
  40736c:	f106 0208 	add.w	r2, r6, #8
  407370:	9207      	str	r2, [sp, #28]
  407372:	4606      	mov	r6, r0
  407374:	460f      	mov	r7, r1
  407376:	e4b6      	b.n	406ce6 <_vfiprintf_r+0x48a>
  407378:	9e07      	ldr	r6, [sp, #28]
  40737a:	3607      	adds	r6, #7
  40737c:	f026 0207 	bic.w	r2, r6, #7
  407380:	f102 0108 	add.w	r1, r2, #8
  407384:	e9d2 6700 	ldrd	r6, r7, [r2]
  407388:	9107      	str	r1, [sp, #28]
  40738a:	2200      	movs	r2, #0
  40738c:	f7ff bb99 	b.w	406ac2 <_vfiprintf_r+0x266>
  407390:	9e07      	ldr	r6, [sp, #28]
  407392:	3607      	adds	r6, #7
  407394:	f026 0107 	bic.w	r1, r6, #7
  407398:	f101 0008 	add.w	r0, r1, #8
  40739c:	9007      	str	r0, [sp, #28]
  40739e:	e9d1 6700 	ldrd	r6, r7, [r1]
  4073a2:	e519      	b.n	406dd8 <_vfiprintf_r+0x57c>
  4073a4:	46cb      	mov	fp, r9
  4073a6:	f7ff bbab 	b.w	406b00 <_vfiprintf_r+0x2a4>
  4073aa:	252d      	movs	r5, #45	; 0x2d
  4073ac:	4276      	negs	r6, r6
  4073ae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4073b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4073b6:	2201      	movs	r2, #1
  4073b8:	f7ff bb88 	b.w	406acc <_vfiprintf_r+0x270>
  4073bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4073be:	b9b3      	cbnz	r3, 4073ee <_vfiprintf_r+0xb92>
  4073c0:	4611      	mov	r1, r2
  4073c2:	2001      	movs	r0, #1
  4073c4:	46ca      	mov	sl, r9
  4073c6:	e5f2      	b.n	406fae <_vfiprintf_r+0x752>
  4073c8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4073cc:	f000 fdfe 	bl	407fcc <__retarget_lock_release_recursive>
  4073d0:	f04f 33ff 	mov.w	r3, #4294967295
  4073d4:	9303      	str	r3, [sp, #12]
  4073d6:	f7ff bb50 	b.w	406a7a <_vfiprintf_r+0x21e>
  4073da:	aa0f      	add	r2, sp, #60	; 0x3c
  4073dc:	9904      	ldr	r1, [sp, #16]
  4073de:	9806      	ldr	r0, [sp, #24]
  4073e0:	f7ff f9fc 	bl	4067dc <__sprint_r.part.0>
  4073e4:	2800      	cmp	r0, #0
  4073e6:	f47f aeeb 	bne.w	4071c0 <_vfiprintf_r+0x964>
  4073ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4073ec:	e6a9      	b.n	407142 <_vfiprintf_r+0x8e6>
  4073ee:	ab0e      	add	r3, sp, #56	; 0x38
  4073f0:	2202      	movs	r2, #2
  4073f2:	931c      	str	r3, [sp, #112]	; 0x70
  4073f4:	921d      	str	r2, [sp, #116]	; 0x74
  4073f6:	2001      	movs	r0, #1
  4073f8:	46ca      	mov	sl, r9
  4073fa:	e5d0      	b.n	406f9e <_vfiprintf_r+0x742>
  4073fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4073fe:	9904      	ldr	r1, [sp, #16]
  407400:	9806      	ldr	r0, [sp, #24]
  407402:	f7ff f9eb 	bl	4067dc <__sprint_r.part.0>
  407406:	2800      	cmp	r0, #0
  407408:	f47f aeda 	bne.w	4071c0 <_vfiprintf_r+0x964>
  40740c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40740e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407410:	1c48      	adds	r0, r1, #1
  407412:	46ca      	mov	sl, r9
  407414:	e5a4      	b.n	406f60 <_vfiprintf_r+0x704>
  407416:	9a07      	ldr	r2, [sp, #28]
  407418:	9903      	ldr	r1, [sp, #12]
  40741a:	6813      	ldr	r3, [r2, #0]
  40741c:	17cd      	asrs	r5, r1, #31
  40741e:	4608      	mov	r0, r1
  407420:	3204      	adds	r2, #4
  407422:	4629      	mov	r1, r5
  407424:	9207      	str	r2, [sp, #28]
  407426:	e9c3 0100 	strd	r0, r1, [r3]
  40742a:	f7ff ba54 	b.w	4068d6 <_vfiprintf_r+0x7a>
  40742e:	4658      	mov	r0, fp
  407430:	9607      	str	r6, [sp, #28]
  407432:	9302      	str	r3, [sp, #8]
  407434:	f7ff f964 	bl	406700 <strlen>
  407438:	2400      	movs	r4, #0
  40743a:	9005      	str	r0, [sp, #20]
  40743c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407440:	f7ff bb5e 	b.w	406b00 <_vfiprintf_r+0x2a4>
  407444:	aa0f      	add	r2, sp, #60	; 0x3c
  407446:	9904      	ldr	r1, [sp, #16]
  407448:	9806      	ldr	r0, [sp, #24]
  40744a:	f7ff f9c7 	bl	4067dc <__sprint_r.part.0>
  40744e:	2800      	cmp	r0, #0
  407450:	f47f aeb6 	bne.w	4071c0 <_vfiprintf_r+0x964>
  407454:	9910      	ldr	r1, [sp, #64]	; 0x40
  407456:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407458:	1c48      	adds	r0, r1, #1
  40745a:	46ca      	mov	sl, r9
  40745c:	e5a7      	b.n	406fae <_vfiprintf_r+0x752>
  40745e:	9910      	ldr	r1, [sp, #64]	; 0x40
  407460:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407462:	4e20      	ldr	r6, [pc, #128]	; (4074e4 <_vfiprintf_r+0xc88>)
  407464:	3101      	adds	r1, #1
  407466:	f7ff bb90 	b.w	406b8a <_vfiprintf_r+0x32e>
  40746a:	2c06      	cmp	r4, #6
  40746c:	bf28      	it	cs
  40746e:	2406      	movcs	r4, #6
  407470:	9405      	str	r4, [sp, #20]
  407472:	9607      	str	r6, [sp, #28]
  407474:	9401      	str	r4, [sp, #4]
  407476:	f8df b070 	ldr.w	fp, [pc, #112]	; 4074e8 <_vfiprintf_r+0xc8c>
  40747a:	e4d5      	b.n	406e28 <_vfiprintf_r+0x5cc>
  40747c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40747e:	4e19      	ldr	r6, [pc, #100]	; (4074e4 <_vfiprintf_r+0xc88>)
  407480:	3001      	adds	r0, #1
  407482:	e603      	b.n	40708c <_vfiprintf_r+0x830>
  407484:	9405      	str	r4, [sp, #20]
  407486:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40748a:	9607      	str	r6, [sp, #28]
  40748c:	9302      	str	r3, [sp, #8]
  40748e:	4604      	mov	r4, r0
  407490:	f7ff bb36 	b.w	406b00 <_vfiprintf_r+0x2a4>
  407494:	4686      	mov	lr, r0
  407496:	f7ff bbce 	b.w	406c36 <_vfiprintf_r+0x3da>
  40749a:	9806      	ldr	r0, [sp, #24]
  40749c:	aa0f      	add	r2, sp, #60	; 0x3c
  40749e:	4659      	mov	r1, fp
  4074a0:	f7ff f99c 	bl	4067dc <__sprint_r.part.0>
  4074a4:	2800      	cmp	r0, #0
  4074a6:	f43f ae24 	beq.w	4070f2 <_vfiprintf_r+0x896>
  4074aa:	e624      	b.n	4070f6 <_vfiprintf_r+0x89a>
  4074ac:	9907      	ldr	r1, [sp, #28]
  4074ae:	f898 2001 	ldrb.w	r2, [r8, #1]
  4074b2:	680c      	ldr	r4, [r1, #0]
  4074b4:	3104      	adds	r1, #4
  4074b6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4074ba:	46b8      	mov	r8, r7
  4074bc:	9107      	str	r1, [sp, #28]
  4074be:	f7ff ba3f 	b.w	406940 <_vfiprintf_r+0xe4>
  4074c2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4074c6:	e43c      	b.n	406d42 <_vfiprintf_r+0x4e6>
  4074c8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4074cc:	e521      	b.n	406f12 <_vfiprintf_r+0x6b6>
  4074ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4074d2:	f7ff bbf4 	b.w	406cbe <_vfiprintf_r+0x462>
  4074d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4074da:	e491      	b.n	406e00 <_vfiprintf_r+0x5a4>
  4074dc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4074e0:	e469      	b.n	406db6 <_vfiprintf_r+0x55a>
  4074e2:	bf00      	nop
  4074e4:	0041b988 	.word	0x0041b988
  4074e8:	0041b980 	.word	0x0041b980

004074ec <__sbprintf>:
  4074ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4074f0:	460c      	mov	r4, r1
  4074f2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4074f6:	8989      	ldrh	r1, [r1, #12]
  4074f8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4074fa:	89e5      	ldrh	r5, [r4, #14]
  4074fc:	9619      	str	r6, [sp, #100]	; 0x64
  4074fe:	f021 0102 	bic.w	r1, r1, #2
  407502:	4606      	mov	r6, r0
  407504:	69e0      	ldr	r0, [r4, #28]
  407506:	f8ad 100c 	strh.w	r1, [sp, #12]
  40750a:	4617      	mov	r7, r2
  40750c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  407510:	6a62      	ldr	r2, [r4, #36]	; 0x24
  407512:	f8ad 500e 	strh.w	r5, [sp, #14]
  407516:	4698      	mov	r8, r3
  407518:	ad1a      	add	r5, sp, #104	; 0x68
  40751a:	2300      	movs	r3, #0
  40751c:	9007      	str	r0, [sp, #28]
  40751e:	a816      	add	r0, sp, #88	; 0x58
  407520:	9209      	str	r2, [sp, #36]	; 0x24
  407522:	9306      	str	r3, [sp, #24]
  407524:	9500      	str	r5, [sp, #0]
  407526:	9504      	str	r5, [sp, #16]
  407528:	9102      	str	r1, [sp, #8]
  40752a:	9105      	str	r1, [sp, #20]
  40752c:	f000 fd48 	bl	407fc0 <__retarget_lock_init_recursive>
  407530:	4643      	mov	r3, r8
  407532:	463a      	mov	r2, r7
  407534:	4669      	mov	r1, sp
  407536:	4630      	mov	r0, r6
  407538:	f7ff f990 	bl	40685c <_vfiprintf_r>
  40753c:	1e05      	subs	r5, r0, #0
  40753e:	db07      	blt.n	407550 <__sbprintf+0x64>
  407540:	4630      	mov	r0, r6
  407542:	4669      	mov	r1, sp
  407544:	f000 f928 	bl	407798 <_fflush_r>
  407548:	2800      	cmp	r0, #0
  40754a:	bf18      	it	ne
  40754c:	f04f 35ff 	movne.w	r5, #4294967295
  407550:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407554:	065b      	lsls	r3, r3, #25
  407556:	d503      	bpl.n	407560 <__sbprintf+0x74>
  407558:	89a3      	ldrh	r3, [r4, #12]
  40755a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40755e:	81a3      	strh	r3, [r4, #12]
  407560:	9816      	ldr	r0, [sp, #88]	; 0x58
  407562:	f000 fd2f 	bl	407fc4 <__retarget_lock_close_recursive>
  407566:	4628      	mov	r0, r5
  407568:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40756c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407570 <__swsetup_r>:
  407570:	b538      	push	{r3, r4, r5, lr}
  407572:	4b30      	ldr	r3, [pc, #192]	; (407634 <__swsetup_r+0xc4>)
  407574:	681b      	ldr	r3, [r3, #0]
  407576:	4605      	mov	r5, r0
  407578:	460c      	mov	r4, r1
  40757a:	b113      	cbz	r3, 407582 <__swsetup_r+0x12>
  40757c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40757e:	2a00      	cmp	r2, #0
  407580:	d038      	beq.n	4075f4 <__swsetup_r+0x84>
  407582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407586:	b293      	uxth	r3, r2
  407588:	0718      	lsls	r0, r3, #28
  40758a:	d50c      	bpl.n	4075a6 <__swsetup_r+0x36>
  40758c:	6920      	ldr	r0, [r4, #16]
  40758e:	b1a8      	cbz	r0, 4075bc <__swsetup_r+0x4c>
  407590:	f013 0201 	ands.w	r2, r3, #1
  407594:	d01e      	beq.n	4075d4 <__swsetup_r+0x64>
  407596:	6963      	ldr	r3, [r4, #20]
  407598:	2200      	movs	r2, #0
  40759a:	425b      	negs	r3, r3
  40759c:	61a3      	str	r3, [r4, #24]
  40759e:	60a2      	str	r2, [r4, #8]
  4075a0:	b1f0      	cbz	r0, 4075e0 <__swsetup_r+0x70>
  4075a2:	2000      	movs	r0, #0
  4075a4:	bd38      	pop	{r3, r4, r5, pc}
  4075a6:	06d9      	lsls	r1, r3, #27
  4075a8:	d53c      	bpl.n	407624 <__swsetup_r+0xb4>
  4075aa:	0758      	lsls	r0, r3, #29
  4075ac:	d426      	bmi.n	4075fc <__swsetup_r+0x8c>
  4075ae:	6920      	ldr	r0, [r4, #16]
  4075b0:	f042 0308 	orr.w	r3, r2, #8
  4075b4:	81a3      	strh	r3, [r4, #12]
  4075b6:	b29b      	uxth	r3, r3
  4075b8:	2800      	cmp	r0, #0
  4075ba:	d1e9      	bne.n	407590 <__swsetup_r+0x20>
  4075bc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4075c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4075c4:	d0e4      	beq.n	407590 <__swsetup_r+0x20>
  4075c6:	4628      	mov	r0, r5
  4075c8:	4621      	mov	r1, r4
  4075ca:	f000 fd2f 	bl	40802c <__smakebuf_r>
  4075ce:	89a3      	ldrh	r3, [r4, #12]
  4075d0:	6920      	ldr	r0, [r4, #16]
  4075d2:	e7dd      	b.n	407590 <__swsetup_r+0x20>
  4075d4:	0799      	lsls	r1, r3, #30
  4075d6:	bf58      	it	pl
  4075d8:	6962      	ldrpl	r2, [r4, #20]
  4075da:	60a2      	str	r2, [r4, #8]
  4075dc:	2800      	cmp	r0, #0
  4075de:	d1e0      	bne.n	4075a2 <__swsetup_r+0x32>
  4075e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4075e4:	061a      	lsls	r2, r3, #24
  4075e6:	d5dd      	bpl.n	4075a4 <__swsetup_r+0x34>
  4075e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4075ec:	81a3      	strh	r3, [r4, #12]
  4075ee:	f04f 30ff 	mov.w	r0, #4294967295
  4075f2:	bd38      	pop	{r3, r4, r5, pc}
  4075f4:	4618      	mov	r0, r3
  4075f6:	f000 f927 	bl	407848 <__sinit>
  4075fa:	e7c2      	b.n	407582 <__swsetup_r+0x12>
  4075fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4075fe:	b151      	cbz	r1, 407616 <__swsetup_r+0xa6>
  407600:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407604:	4299      	cmp	r1, r3
  407606:	d004      	beq.n	407612 <__swsetup_r+0xa2>
  407608:	4628      	mov	r0, r5
  40760a:	f000 fa43 	bl	407a94 <_free_r>
  40760e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407612:	2300      	movs	r3, #0
  407614:	6323      	str	r3, [r4, #48]	; 0x30
  407616:	2300      	movs	r3, #0
  407618:	6920      	ldr	r0, [r4, #16]
  40761a:	6063      	str	r3, [r4, #4]
  40761c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407620:	6020      	str	r0, [r4, #0]
  407622:	e7c5      	b.n	4075b0 <__swsetup_r+0x40>
  407624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407628:	2309      	movs	r3, #9
  40762a:	602b      	str	r3, [r5, #0]
  40762c:	f04f 30ff 	mov.w	r0, #4294967295
  407630:	81a2      	strh	r2, [r4, #12]
  407632:	bd38      	pop	{r3, r4, r5, pc}
  407634:	204001b0 	.word	0x204001b0

00407638 <register_fini>:
  407638:	4b02      	ldr	r3, [pc, #8]	; (407644 <register_fini+0xc>)
  40763a:	b113      	cbz	r3, 407642 <register_fini+0xa>
  40763c:	4802      	ldr	r0, [pc, #8]	; (407648 <register_fini+0x10>)
  40763e:	f000 b805 	b.w	40764c <atexit>
  407642:	4770      	bx	lr
  407644:	00000000 	.word	0x00000000
  407648:	004078b9 	.word	0x004078b9

0040764c <atexit>:
  40764c:	2300      	movs	r3, #0
  40764e:	4601      	mov	r1, r0
  407650:	461a      	mov	r2, r3
  407652:	4618      	mov	r0, r3
  407654:	f001 b890 	b.w	408778 <__register_exitproc>

00407658 <__sflush_r>:
  407658:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40765c:	b29a      	uxth	r2, r3
  40765e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407662:	460d      	mov	r5, r1
  407664:	0711      	lsls	r1, r2, #28
  407666:	4680      	mov	r8, r0
  407668:	d43a      	bmi.n	4076e0 <__sflush_r+0x88>
  40766a:	686a      	ldr	r2, [r5, #4]
  40766c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407670:	2a00      	cmp	r2, #0
  407672:	81ab      	strh	r3, [r5, #12]
  407674:	dd6f      	ble.n	407756 <__sflush_r+0xfe>
  407676:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407678:	2c00      	cmp	r4, #0
  40767a:	d049      	beq.n	407710 <__sflush_r+0xb8>
  40767c:	2200      	movs	r2, #0
  40767e:	b29b      	uxth	r3, r3
  407680:	f8d8 6000 	ldr.w	r6, [r8]
  407684:	f8c8 2000 	str.w	r2, [r8]
  407688:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40768c:	d067      	beq.n	40775e <__sflush_r+0x106>
  40768e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407690:	075f      	lsls	r7, r3, #29
  407692:	d505      	bpl.n	4076a0 <__sflush_r+0x48>
  407694:	6869      	ldr	r1, [r5, #4]
  407696:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407698:	1a52      	subs	r2, r2, r1
  40769a:	b10b      	cbz	r3, 4076a0 <__sflush_r+0x48>
  40769c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40769e:	1ad2      	subs	r2, r2, r3
  4076a0:	2300      	movs	r3, #0
  4076a2:	69e9      	ldr	r1, [r5, #28]
  4076a4:	4640      	mov	r0, r8
  4076a6:	47a0      	blx	r4
  4076a8:	1c44      	adds	r4, r0, #1
  4076aa:	d03c      	beq.n	407726 <__sflush_r+0xce>
  4076ac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4076b0:	692a      	ldr	r2, [r5, #16]
  4076b2:	602a      	str	r2, [r5, #0]
  4076b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4076b8:	2200      	movs	r2, #0
  4076ba:	81ab      	strh	r3, [r5, #12]
  4076bc:	04db      	lsls	r3, r3, #19
  4076be:	606a      	str	r2, [r5, #4]
  4076c0:	d447      	bmi.n	407752 <__sflush_r+0xfa>
  4076c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4076c4:	f8c8 6000 	str.w	r6, [r8]
  4076c8:	b311      	cbz	r1, 407710 <__sflush_r+0xb8>
  4076ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4076ce:	4299      	cmp	r1, r3
  4076d0:	d002      	beq.n	4076d8 <__sflush_r+0x80>
  4076d2:	4640      	mov	r0, r8
  4076d4:	f000 f9de 	bl	407a94 <_free_r>
  4076d8:	2000      	movs	r0, #0
  4076da:	6328      	str	r0, [r5, #48]	; 0x30
  4076dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4076e0:	692e      	ldr	r6, [r5, #16]
  4076e2:	b1ae      	cbz	r6, 407710 <__sflush_r+0xb8>
  4076e4:	682c      	ldr	r4, [r5, #0]
  4076e6:	602e      	str	r6, [r5, #0]
  4076e8:	0791      	lsls	r1, r2, #30
  4076ea:	bf0c      	ite	eq
  4076ec:	696b      	ldreq	r3, [r5, #20]
  4076ee:	2300      	movne	r3, #0
  4076f0:	1ba4      	subs	r4, r4, r6
  4076f2:	60ab      	str	r3, [r5, #8]
  4076f4:	e00a      	b.n	40770c <__sflush_r+0xb4>
  4076f6:	4623      	mov	r3, r4
  4076f8:	4632      	mov	r2, r6
  4076fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4076fc:	69e9      	ldr	r1, [r5, #28]
  4076fe:	4640      	mov	r0, r8
  407700:	47b8      	blx	r7
  407702:	2800      	cmp	r0, #0
  407704:	eba4 0400 	sub.w	r4, r4, r0
  407708:	4406      	add	r6, r0
  40770a:	dd04      	ble.n	407716 <__sflush_r+0xbe>
  40770c:	2c00      	cmp	r4, #0
  40770e:	dcf2      	bgt.n	4076f6 <__sflush_r+0x9e>
  407710:	2000      	movs	r0, #0
  407712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407716:	89ab      	ldrh	r3, [r5, #12]
  407718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40771c:	81ab      	strh	r3, [r5, #12]
  40771e:	f04f 30ff 	mov.w	r0, #4294967295
  407722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407726:	f8d8 4000 	ldr.w	r4, [r8]
  40772a:	2c1d      	cmp	r4, #29
  40772c:	d8f3      	bhi.n	407716 <__sflush_r+0xbe>
  40772e:	4b19      	ldr	r3, [pc, #100]	; (407794 <__sflush_r+0x13c>)
  407730:	40e3      	lsrs	r3, r4
  407732:	43db      	mvns	r3, r3
  407734:	f013 0301 	ands.w	r3, r3, #1
  407738:	d1ed      	bne.n	407716 <__sflush_r+0xbe>
  40773a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40773e:	606b      	str	r3, [r5, #4]
  407740:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407744:	6929      	ldr	r1, [r5, #16]
  407746:	81ab      	strh	r3, [r5, #12]
  407748:	04da      	lsls	r2, r3, #19
  40774a:	6029      	str	r1, [r5, #0]
  40774c:	d5b9      	bpl.n	4076c2 <__sflush_r+0x6a>
  40774e:	2c00      	cmp	r4, #0
  407750:	d1b7      	bne.n	4076c2 <__sflush_r+0x6a>
  407752:	6528      	str	r0, [r5, #80]	; 0x50
  407754:	e7b5      	b.n	4076c2 <__sflush_r+0x6a>
  407756:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407758:	2a00      	cmp	r2, #0
  40775a:	dc8c      	bgt.n	407676 <__sflush_r+0x1e>
  40775c:	e7d8      	b.n	407710 <__sflush_r+0xb8>
  40775e:	2301      	movs	r3, #1
  407760:	69e9      	ldr	r1, [r5, #28]
  407762:	4640      	mov	r0, r8
  407764:	47a0      	blx	r4
  407766:	1c43      	adds	r3, r0, #1
  407768:	4602      	mov	r2, r0
  40776a:	d002      	beq.n	407772 <__sflush_r+0x11a>
  40776c:	89ab      	ldrh	r3, [r5, #12]
  40776e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407770:	e78e      	b.n	407690 <__sflush_r+0x38>
  407772:	f8d8 3000 	ldr.w	r3, [r8]
  407776:	2b00      	cmp	r3, #0
  407778:	d0f8      	beq.n	40776c <__sflush_r+0x114>
  40777a:	2b1d      	cmp	r3, #29
  40777c:	d001      	beq.n	407782 <__sflush_r+0x12a>
  40777e:	2b16      	cmp	r3, #22
  407780:	d102      	bne.n	407788 <__sflush_r+0x130>
  407782:	f8c8 6000 	str.w	r6, [r8]
  407786:	e7c3      	b.n	407710 <__sflush_r+0xb8>
  407788:	89ab      	ldrh	r3, [r5, #12]
  40778a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40778e:	81ab      	strh	r3, [r5, #12]
  407790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407794:	20400001 	.word	0x20400001

00407798 <_fflush_r>:
  407798:	b538      	push	{r3, r4, r5, lr}
  40779a:	460d      	mov	r5, r1
  40779c:	4604      	mov	r4, r0
  40779e:	b108      	cbz	r0, 4077a4 <_fflush_r+0xc>
  4077a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4077a2:	b1bb      	cbz	r3, 4077d4 <_fflush_r+0x3c>
  4077a4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4077a8:	b188      	cbz	r0, 4077ce <_fflush_r+0x36>
  4077aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4077ac:	07db      	lsls	r3, r3, #31
  4077ae:	d401      	bmi.n	4077b4 <_fflush_r+0x1c>
  4077b0:	0581      	lsls	r1, r0, #22
  4077b2:	d517      	bpl.n	4077e4 <_fflush_r+0x4c>
  4077b4:	4620      	mov	r0, r4
  4077b6:	4629      	mov	r1, r5
  4077b8:	f7ff ff4e 	bl	407658 <__sflush_r>
  4077bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4077be:	07da      	lsls	r2, r3, #31
  4077c0:	4604      	mov	r4, r0
  4077c2:	d402      	bmi.n	4077ca <_fflush_r+0x32>
  4077c4:	89ab      	ldrh	r3, [r5, #12]
  4077c6:	059b      	lsls	r3, r3, #22
  4077c8:	d507      	bpl.n	4077da <_fflush_r+0x42>
  4077ca:	4620      	mov	r0, r4
  4077cc:	bd38      	pop	{r3, r4, r5, pc}
  4077ce:	4604      	mov	r4, r0
  4077d0:	4620      	mov	r0, r4
  4077d2:	bd38      	pop	{r3, r4, r5, pc}
  4077d4:	f000 f838 	bl	407848 <__sinit>
  4077d8:	e7e4      	b.n	4077a4 <_fflush_r+0xc>
  4077da:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4077dc:	f000 fbf6 	bl	407fcc <__retarget_lock_release_recursive>
  4077e0:	4620      	mov	r0, r4
  4077e2:	bd38      	pop	{r3, r4, r5, pc}
  4077e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4077e6:	f000 fbef 	bl	407fc8 <__retarget_lock_acquire_recursive>
  4077ea:	e7e3      	b.n	4077b4 <_fflush_r+0x1c>

004077ec <_cleanup_r>:
  4077ec:	4901      	ldr	r1, [pc, #4]	; (4077f4 <_cleanup_r+0x8>)
  4077ee:	f000 bbaf 	b.w	407f50 <_fwalk_reent>
  4077f2:	bf00      	nop
  4077f4:	00408861 	.word	0x00408861

004077f8 <std.isra.0>:
  4077f8:	b510      	push	{r4, lr}
  4077fa:	2300      	movs	r3, #0
  4077fc:	4604      	mov	r4, r0
  4077fe:	8181      	strh	r1, [r0, #12]
  407800:	81c2      	strh	r2, [r0, #14]
  407802:	6003      	str	r3, [r0, #0]
  407804:	6043      	str	r3, [r0, #4]
  407806:	6083      	str	r3, [r0, #8]
  407808:	6643      	str	r3, [r0, #100]	; 0x64
  40780a:	6103      	str	r3, [r0, #16]
  40780c:	6143      	str	r3, [r0, #20]
  40780e:	6183      	str	r3, [r0, #24]
  407810:	4619      	mov	r1, r3
  407812:	2208      	movs	r2, #8
  407814:	305c      	adds	r0, #92	; 0x5c
  407816:	f7fe fe33 	bl	406480 <memset>
  40781a:	4807      	ldr	r0, [pc, #28]	; (407838 <std.isra.0+0x40>)
  40781c:	4907      	ldr	r1, [pc, #28]	; (40783c <std.isra.0+0x44>)
  40781e:	4a08      	ldr	r2, [pc, #32]	; (407840 <std.isra.0+0x48>)
  407820:	4b08      	ldr	r3, [pc, #32]	; (407844 <std.isra.0+0x4c>)
  407822:	6220      	str	r0, [r4, #32]
  407824:	61e4      	str	r4, [r4, #28]
  407826:	6261      	str	r1, [r4, #36]	; 0x24
  407828:	62a2      	str	r2, [r4, #40]	; 0x28
  40782a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40782c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  407830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407834:	f000 bbc4 	b.w	407fc0 <__retarget_lock_init_recursive>
  407838:	004085a5 	.word	0x004085a5
  40783c:	004085c9 	.word	0x004085c9
  407840:	00408605 	.word	0x00408605
  407844:	00408625 	.word	0x00408625

00407848 <__sinit>:
  407848:	b510      	push	{r4, lr}
  40784a:	4604      	mov	r4, r0
  40784c:	4812      	ldr	r0, [pc, #72]	; (407898 <__sinit+0x50>)
  40784e:	f000 fbbb 	bl	407fc8 <__retarget_lock_acquire_recursive>
  407852:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407854:	b9d2      	cbnz	r2, 40788c <__sinit+0x44>
  407856:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40785a:	4810      	ldr	r0, [pc, #64]	; (40789c <__sinit+0x54>)
  40785c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407860:	2103      	movs	r1, #3
  407862:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  407866:	63e0      	str	r0, [r4, #60]	; 0x3c
  407868:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40786c:	6860      	ldr	r0, [r4, #4]
  40786e:	2104      	movs	r1, #4
  407870:	f7ff ffc2 	bl	4077f8 <std.isra.0>
  407874:	2201      	movs	r2, #1
  407876:	2109      	movs	r1, #9
  407878:	68a0      	ldr	r0, [r4, #8]
  40787a:	f7ff ffbd 	bl	4077f8 <std.isra.0>
  40787e:	2202      	movs	r2, #2
  407880:	2112      	movs	r1, #18
  407882:	68e0      	ldr	r0, [r4, #12]
  407884:	f7ff ffb8 	bl	4077f8 <std.isra.0>
  407888:	2301      	movs	r3, #1
  40788a:	63a3      	str	r3, [r4, #56]	; 0x38
  40788c:	4802      	ldr	r0, [pc, #8]	; (407898 <__sinit+0x50>)
  40788e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407892:	f000 bb9b 	b.w	407fcc <__retarget_lock_release_recursive>
  407896:	bf00      	nop
  407898:	2040ca5c 	.word	0x2040ca5c
  40789c:	004077ed 	.word	0x004077ed

004078a0 <__sfp_lock_acquire>:
  4078a0:	4801      	ldr	r0, [pc, #4]	; (4078a8 <__sfp_lock_acquire+0x8>)
  4078a2:	f000 bb91 	b.w	407fc8 <__retarget_lock_acquire_recursive>
  4078a6:	bf00      	nop
  4078a8:	2040ca70 	.word	0x2040ca70

004078ac <__sfp_lock_release>:
  4078ac:	4801      	ldr	r0, [pc, #4]	; (4078b4 <__sfp_lock_release+0x8>)
  4078ae:	f000 bb8d 	b.w	407fcc <__retarget_lock_release_recursive>
  4078b2:	bf00      	nop
  4078b4:	2040ca70 	.word	0x2040ca70

004078b8 <__libc_fini_array>:
  4078b8:	b538      	push	{r3, r4, r5, lr}
  4078ba:	4c0a      	ldr	r4, [pc, #40]	; (4078e4 <__libc_fini_array+0x2c>)
  4078bc:	4d0a      	ldr	r5, [pc, #40]	; (4078e8 <__libc_fini_array+0x30>)
  4078be:	1b64      	subs	r4, r4, r5
  4078c0:	10a4      	asrs	r4, r4, #2
  4078c2:	d00a      	beq.n	4078da <__libc_fini_array+0x22>
  4078c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4078c8:	3b01      	subs	r3, #1
  4078ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4078ce:	3c01      	subs	r4, #1
  4078d0:	f855 3904 	ldr.w	r3, [r5], #-4
  4078d4:	4798      	blx	r3
  4078d6:	2c00      	cmp	r4, #0
  4078d8:	d1f9      	bne.n	4078ce <__libc_fini_array+0x16>
  4078da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4078de:	f014 b8f7 	b.w	41bad0 <_fini>
  4078e2:	bf00      	nop
  4078e4:	0041bae0 	.word	0x0041bae0
  4078e8:	0041badc 	.word	0x0041badc

004078ec <__fputwc>:
  4078ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4078f0:	b082      	sub	sp, #8
  4078f2:	4680      	mov	r8, r0
  4078f4:	4689      	mov	r9, r1
  4078f6:	4614      	mov	r4, r2
  4078f8:	f000 fb54 	bl	407fa4 <__locale_mb_cur_max>
  4078fc:	2801      	cmp	r0, #1
  4078fe:	d036      	beq.n	40796e <__fputwc+0x82>
  407900:	464a      	mov	r2, r9
  407902:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407906:	a901      	add	r1, sp, #4
  407908:	4640      	mov	r0, r8
  40790a:	f000 fee7 	bl	4086dc <_wcrtomb_r>
  40790e:	1c42      	adds	r2, r0, #1
  407910:	4606      	mov	r6, r0
  407912:	d025      	beq.n	407960 <__fputwc+0x74>
  407914:	b3a8      	cbz	r0, 407982 <__fputwc+0x96>
  407916:	f89d e004 	ldrb.w	lr, [sp, #4]
  40791a:	2500      	movs	r5, #0
  40791c:	f10d 0a04 	add.w	sl, sp, #4
  407920:	e009      	b.n	407936 <__fputwc+0x4a>
  407922:	6823      	ldr	r3, [r4, #0]
  407924:	1c5a      	adds	r2, r3, #1
  407926:	6022      	str	r2, [r4, #0]
  407928:	f883 e000 	strb.w	lr, [r3]
  40792c:	3501      	adds	r5, #1
  40792e:	42b5      	cmp	r5, r6
  407930:	d227      	bcs.n	407982 <__fputwc+0x96>
  407932:	f815 e00a 	ldrb.w	lr, [r5, sl]
  407936:	68a3      	ldr	r3, [r4, #8]
  407938:	3b01      	subs	r3, #1
  40793a:	2b00      	cmp	r3, #0
  40793c:	60a3      	str	r3, [r4, #8]
  40793e:	daf0      	bge.n	407922 <__fputwc+0x36>
  407940:	69a7      	ldr	r7, [r4, #24]
  407942:	42bb      	cmp	r3, r7
  407944:	4671      	mov	r1, lr
  407946:	4622      	mov	r2, r4
  407948:	4640      	mov	r0, r8
  40794a:	db02      	blt.n	407952 <__fputwc+0x66>
  40794c:	f1be 0f0a 	cmp.w	lr, #10
  407950:	d1e7      	bne.n	407922 <__fputwc+0x36>
  407952:	f000 fe6b 	bl	40862c <__swbuf_r>
  407956:	1c43      	adds	r3, r0, #1
  407958:	d1e8      	bne.n	40792c <__fputwc+0x40>
  40795a:	b002      	add	sp, #8
  40795c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407960:	89a3      	ldrh	r3, [r4, #12]
  407962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407966:	81a3      	strh	r3, [r4, #12]
  407968:	b002      	add	sp, #8
  40796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40796e:	f109 33ff 	add.w	r3, r9, #4294967295
  407972:	2bfe      	cmp	r3, #254	; 0xfe
  407974:	d8c4      	bhi.n	407900 <__fputwc+0x14>
  407976:	fa5f fe89 	uxtb.w	lr, r9
  40797a:	4606      	mov	r6, r0
  40797c:	f88d e004 	strb.w	lr, [sp, #4]
  407980:	e7cb      	b.n	40791a <__fputwc+0x2e>
  407982:	4648      	mov	r0, r9
  407984:	b002      	add	sp, #8
  407986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40798a:	bf00      	nop

0040798c <_fputwc_r>:
  40798c:	b530      	push	{r4, r5, lr}
  40798e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407990:	f013 0f01 	tst.w	r3, #1
  407994:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407998:	4614      	mov	r4, r2
  40799a:	b083      	sub	sp, #12
  40799c:	4605      	mov	r5, r0
  40799e:	b29a      	uxth	r2, r3
  4079a0:	d101      	bne.n	4079a6 <_fputwc_r+0x1a>
  4079a2:	0590      	lsls	r0, r2, #22
  4079a4:	d51c      	bpl.n	4079e0 <_fputwc_r+0x54>
  4079a6:	0490      	lsls	r0, r2, #18
  4079a8:	d406      	bmi.n	4079b8 <_fputwc_r+0x2c>
  4079aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4079ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4079b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4079b4:	81a3      	strh	r3, [r4, #12]
  4079b6:	6662      	str	r2, [r4, #100]	; 0x64
  4079b8:	4628      	mov	r0, r5
  4079ba:	4622      	mov	r2, r4
  4079bc:	f7ff ff96 	bl	4078ec <__fputwc>
  4079c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4079c2:	07da      	lsls	r2, r3, #31
  4079c4:	4605      	mov	r5, r0
  4079c6:	d402      	bmi.n	4079ce <_fputwc_r+0x42>
  4079c8:	89a3      	ldrh	r3, [r4, #12]
  4079ca:	059b      	lsls	r3, r3, #22
  4079cc:	d502      	bpl.n	4079d4 <_fputwc_r+0x48>
  4079ce:	4628      	mov	r0, r5
  4079d0:	b003      	add	sp, #12
  4079d2:	bd30      	pop	{r4, r5, pc}
  4079d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4079d6:	f000 faf9 	bl	407fcc <__retarget_lock_release_recursive>
  4079da:	4628      	mov	r0, r5
  4079dc:	b003      	add	sp, #12
  4079de:	bd30      	pop	{r4, r5, pc}
  4079e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4079e2:	9101      	str	r1, [sp, #4]
  4079e4:	f000 faf0 	bl	407fc8 <__retarget_lock_acquire_recursive>
  4079e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4079ec:	9901      	ldr	r1, [sp, #4]
  4079ee:	b29a      	uxth	r2, r3
  4079f0:	e7d9      	b.n	4079a6 <_fputwc_r+0x1a>
  4079f2:	bf00      	nop

004079f4 <_malloc_trim_r>:
  4079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4079f6:	4f24      	ldr	r7, [pc, #144]	; (407a88 <_malloc_trim_r+0x94>)
  4079f8:	460c      	mov	r4, r1
  4079fa:	4606      	mov	r6, r0
  4079fc:	f7fe fd8e 	bl	40651c <__malloc_lock>
  407a00:	68bb      	ldr	r3, [r7, #8]
  407a02:	685d      	ldr	r5, [r3, #4]
  407a04:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407a08:	310f      	adds	r1, #15
  407a0a:	f025 0503 	bic.w	r5, r5, #3
  407a0e:	4429      	add	r1, r5
  407a10:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407a14:	f021 010f 	bic.w	r1, r1, #15
  407a18:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407a1c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407a20:	db07      	blt.n	407a32 <_malloc_trim_r+0x3e>
  407a22:	2100      	movs	r1, #0
  407a24:	4630      	mov	r0, r6
  407a26:	f7fe fd85 	bl	406534 <_sbrk_r>
  407a2a:	68bb      	ldr	r3, [r7, #8]
  407a2c:	442b      	add	r3, r5
  407a2e:	4298      	cmp	r0, r3
  407a30:	d004      	beq.n	407a3c <_malloc_trim_r+0x48>
  407a32:	4630      	mov	r0, r6
  407a34:	f7fe fd78 	bl	406528 <__malloc_unlock>
  407a38:	2000      	movs	r0, #0
  407a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a3c:	4261      	negs	r1, r4
  407a3e:	4630      	mov	r0, r6
  407a40:	f7fe fd78 	bl	406534 <_sbrk_r>
  407a44:	3001      	adds	r0, #1
  407a46:	d00d      	beq.n	407a64 <_malloc_trim_r+0x70>
  407a48:	4b10      	ldr	r3, [pc, #64]	; (407a8c <_malloc_trim_r+0x98>)
  407a4a:	68ba      	ldr	r2, [r7, #8]
  407a4c:	6819      	ldr	r1, [r3, #0]
  407a4e:	1b2d      	subs	r5, r5, r4
  407a50:	f045 0501 	orr.w	r5, r5, #1
  407a54:	4630      	mov	r0, r6
  407a56:	1b09      	subs	r1, r1, r4
  407a58:	6055      	str	r5, [r2, #4]
  407a5a:	6019      	str	r1, [r3, #0]
  407a5c:	f7fe fd64 	bl	406528 <__malloc_unlock>
  407a60:	2001      	movs	r0, #1
  407a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a64:	2100      	movs	r1, #0
  407a66:	4630      	mov	r0, r6
  407a68:	f7fe fd64 	bl	406534 <_sbrk_r>
  407a6c:	68ba      	ldr	r2, [r7, #8]
  407a6e:	1a83      	subs	r3, r0, r2
  407a70:	2b0f      	cmp	r3, #15
  407a72:	ddde      	ble.n	407a32 <_malloc_trim_r+0x3e>
  407a74:	4c06      	ldr	r4, [pc, #24]	; (407a90 <_malloc_trim_r+0x9c>)
  407a76:	4905      	ldr	r1, [pc, #20]	; (407a8c <_malloc_trim_r+0x98>)
  407a78:	6824      	ldr	r4, [r4, #0]
  407a7a:	f043 0301 	orr.w	r3, r3, #1
  407a7e:	1b00      	subs	r0, r0, r4
  407a80:	6053      	str	r3, [r2, #4]
  407a82:	6008      	str	r0, [r1, #0]
  407a84:	e7d5      	b.n	407a32 <_malloc_trim_r+0x3e>
  407a86:	bf00      	nop
  407a88:	204005e0 	.word	0x204005e0
  407a8c:	2040c938 	.word	0x2040c938
  407a90:	204009e8 	.word	0x204009e8

00407a94 <_free_r>:
  407a94:	2900      	cmp	r1, #0
  407a96:	d044      	beq.n	407b22 <_free_r+0x8e>
  407a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407a9c:	460d      	mov	r5, r1
  407a9e:	4680      	mov	r8, r0
  407aa0:	f7fe fd3c 	bl	40651c <__malloc_lock>
  407aa4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407aa8:	4969      	ldr	r1, [pc, #420]	; (407c50 <_free_r+0x1bc>)
  407aaa:	f027 0301 	bic.w	r3, r7, #1
  407aae:	f1a5 0408 	sub.w	r4, r5, #8
  407ab2:	18e2      	adds	r2, r4, r3
  407ab4:	688e      	ldr	r6, [r1, #8]
  407ab6:	6850      	ldr	r0, [r2, #4]
  407ab8:	42b2      	cmp	r2, r6
  407aba:	f020 0003 	bic.w	r0, r0, #3
  407abe:	d05e      	beq.n	407b7e <_free_r+0xea>
  407ac0:	07fe      	lsls	r6, r7, #31
  407ac2:	6050      	str	r0, [r2, #4]
  407ac4:	d40b      	bmi.n	407ade <_free_r+0x4a>
  407ac6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407aca:	1be4      	subs	r4, r4, r7
  407acc:	f101 0e08 	add.w	lr, r1, #8
  407ad0:	68a5      	ldr	r5, [r4, #8]
  407ad2:	4575      	cmp	r5, lr
  407ad4:	443b      	add	r3, r7
  407ad6:	d06d      	beq.n	407bb4 <_free_r+0x120>
  407ad8:	68e7      	ldr	r7, [r4, #12]
  407ada:	60ef      	str	r7, [r5, #12]
  407adc:	60bd      	str	r5, [r7, #8]
  407ade:	1815      	adds	r5, r2, r0
  407ae0:	686d      	ldr	r5, [r5, #4]
  407ae2:	07ed      	lsls	r5, r5, #31
  407ae4:	d53e      	bpl.n	407b64 <_free_r+0xd0>
  407ae6:	f043 0201 	orr.w	r2, r3, #1
  407aea:	6062      	str	r2, [r4, #4]
  407aec:	50e3      	str	r3, [r4, r3]
  407aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407af2:	d217      	bcs.n	407b24 <_free_r+0x90>
  407af4:	08db      	lsrs	r3, r3, #3
  407af6:	1c58      	adds	r0, r3, #1
  407af8:	109a      	asrs	r2, r3, #2
  407afa:	684d      	ldr	r5, [r1, #4]
  407afc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407b00:	60a7      	str	r7, [r4, #8]
  407b02:	2301      	movs	r3, #1
  407b04:	4093      	lsls	r3, r2
  407b06:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407b0a:	432b      	orrs	r3, r5
  407b0c:	3a08      	subs	r2, #8
  407b0e:	60e2      	str	r2, [r4, #12]
  407b10:	604b      	str	r3, [r1, #4]
  407b12:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407b16:	60fc      	str	r4, [r7, #12]
  407b18:	4640      	mov	r0, r8
  407b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407b1e:	f7fe bd03 	b.w	406528 <__malloc_unlock>
  407b22:	4770      	bx	lr
  407b24:	0a5a      	lsrs	r2, r3, #9
  407b26:	2a04      	cmp	r2, #4
  407b28:	d852      	bhi.n	407bd0 <_free_r+0x13c>
  407b2a:	099a      	lsrs	r2, r3, #6
  407b2c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407b30:	00ff      	lsls	r7, r7, #3
  407b32:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407b36:	19c8      	adds	r0, r1, r7
  407b38:	59ca      	ldr	r2, [r1, r7]
  407b3a:	3808      	subs	r0, #8
  407b3c:	4290      	cmp	r0, r2
  407b3e:	d04f      	beq.n	407be0 <_free_r+0x14c>
  407b40:	6851      	ldr	r1, [r2, #4]
  407b42:	f021 0103 	bic.w	r1, r1, #3
  407b46:	428b      	cmp	r3, r1
  407b48:	d232      	bcs.n	407bb0 <_free_r+0x11c>
  407b4a:	6892      	ldr	r2, [r2, #8]
  407b4c:	4290      	cmp	r0, r2
  407b4e:	d1f7      	bne.n	407b40 <_free_r+0xac>
  407b50:	68c3      	ldr	r3, [r0, #12]
  407b52:	60a0      	str	r0, [r4, #8]
  407b54:	60e3      	str	r3, [r4, #12]
  407b56:	609c      	str	r4, [r3, #8]
  407b58:	60c4      	str	r4, [r0, #12]
  407b5a:	4640      	mov	r0, r8
  407b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407b60:	f7fe bce2 	b.w	406528 <__malloc_unlock>
  407b64:	6895      	ldr	r5, [r2, #8]
  407b66:	4f3b      	ldr	r7, [pc, #236]	; (407c54 <_free_r+0x1c0>)
  407b68:	42bd      	cmp	r5, r7
  407b6a:	4403      	add	r3, r0
  407b6c:	d040      	beq.n	407bf0 <_free_r+0x15c>
  407b6e:	68d0      	ldr	r0, [r2, #12]
  407b70:	60e8      	str	r0, [r5, #12]
  407b72:	f043 0201 	orr.w	r2, r3, #1
  407b76:	6085      	str	r5, [r0, #8]
  407b78:	6062      	str	r2, [r4, #4]
  407b7a:	50e3      	str	r3, [r4, r3]
  407b7c:	e7b7      	b.n	407aee <_free_r+0x5a>
  407b7e:	07ff      	lsls	r7, r7, #31
  407b80:	4403      	add	r3, r0
  407b82:	d407      	bmi.n	407b94 <_free_r+0x100>
  407b84:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407b88:	1aa4      	subs	r4, r4, r2
  407b8a:	4413      	add	r3, r2
  407b8c:	68a0      	ldr	r0, [r4, #8]
  407b8e:	68e2      	ldr	r2, [r4, #12]
  407b90:	60c2      	str	r2, [r0, #12]
  407b92:	6090      	str	r0, [r2, #8]
  407b94:	4a30      	ldr	r2, [pc, #192]	; (407c58 <_free_r+0x1c4>)
  407b96:	6812      	ldr	r2, [r2, #0]
  407b98:	f043 0001 	orr.w	r0, r3, #1
  407b9c:	4293      	cmp	r3, r2
  407b9e:	6060      	str	r0, [r4, #4]
  407ba0:	608c      	str	r4, [r1, #8]
  407ba2:	d3b9      	bcc.n	407b18 <_free_r+0x84>
  407ba4:	4b2d      	ldr	r3, [pc, #180]	; (407c5c <_free_r+0x1c8>)
  407ba6:	4640      	mov	r0, r8
  407ba8:	6819      	ldr	r1, [r3, #0]
  407baa:	f7ff ff23 	bl	4079f4 <_malloc_trim_r>
  407bae:	e7b3      	b.n	407b18 <_free_r+0x84>
  407bb0:	4610      	mov	r0, r2
  407bb2:	e7cd      	b.n	407b50 <_free_r+0xbc>
  407bb4:	1811      	adds	r1, r2, r0
  407bb6:	6849      	ldr	r1, [r1, #4]
  407bb8:	07c9      	lsls	r1, r1, #31
  407bba:	d444      	bmi.n	407c46 <_free_r+0x1b2>
  407bbc:	6891      	ldr	r1, [r2, #8]
  407bbe:	68d2      	ldr	r2, [r2, #12]
  407bc0:	60ca      	str	r2, [r1, #12]
  407bc2:	4403      	add	r3, r0
  407bc4:	f043 0001 	orr.w	r0, r3, #1
  407bc8:	6091      	str	r1, [r2, #8]
  407bca:	6060      	str	r0, [r4, #4]
  407bcc:	50e3      	str	r3, [r4, r3]
  407bce:	e7a3      	b.n	407b18 <_free_r+0x84>
  407bd0:	2a14      	cmp	r2, #20
  407bd2:	d816      	bhi.n	407c02 <_free_r+0x16e>
  407bd4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407bd8:	00ff      	lsls	r7, r7, #3
  407bda:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407bde:	e7aa      	b.n	407b36 <_free_r+0xa2>
  407be0:	10aa      	asrs	r2, r5, #2
  407be2:	2301      	movs	r3, #1
  407be4:	684d      	ldr	r5, [r1, #4]
  407be6:	4093      	lsls	r3, r2
  407be8:	432b      	orrs	r3, r5
  407bea:	604b      	str	r3, [r1, #4]
  407bec:	4603      	mov	r3, r0
  407bee:	e7b0      	b.n	407b52 <_free_r+0xbe>
  407bf0:	f043 0201 	orr.w	r2, r3, #1
  407bf4:	614c      	str	r4, [r1, #20]
  407bf6:	610c      	str	r4, [r1, #16]
  407bf8:	60e5      	str	r5, [r4, #12]
  407bfa:	60a5      	str	r5, [r4, #8]
  407bfc:	6062      	str	r2, [r4, #4]
  407bfe:	50e3      	str	r3, [r4, r3]
  407c00:	e78a      	b.n	407b18 <_free_r+0x84>
  407c02:	2a54      	cmp	r2, #84	; 0x54
  407c04:	d806      	bhi.n	407c14 <_free_r+0x180>
  407c06:	0b1a      	lsrs	r2, r3, #12
  407c08:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407c0c:	00ff      	lsls	r7, r7, #3
  407c0e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407c12:	e790      	b.n	407b36 <_free_r+0xa2>
  407c14:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407c18:	d806      	bhi.n	407c28 <_free_r+0x194>
  407c1a:	0bda      	lsrs	r2, r3, #15
  407c1c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407c20:	00ff      	lsls	r7, r7, #3
  407c22:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407c26:	e786      	b.n	407b36 <_free_r+0xa2>
  407c28:	f240 5054 	movw	r0, #1364	; 0x554
  407c2c:	4282      	cmp	r2, r0
  407c2e:	d806      	bhi.n	407c3e <_free_r+0x1aa>
  407c30:	0c9a      	lsrs	r2, r3, #18
  407c32:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407c36:	00ff      	lsls	r7, r7, #3
  407c38:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407c3c:	e77b      	b.n	407b36 <_free_r+0xa2>
  407c3e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407c42:	257e      	movs	r5, #126	; 0x7e
  407c44:	e777      	b.n	407b36 <_free_r+0xa2>
  407c46:	f043 0101 	orr.w	r1, r3, #1
  407c4a:	6061      	str	r1, [r4, #4]
  407c4c:	6013      	str	r3, [r2, #0]
  407c4e:	e763      	b.n	407b18 <_free_r+0x84>
  407c50:	204005e0 	.word	0x204005e0
  407c54:	204005e8 	.word	0x204005e8
  407c58:	204009ec 	.word	0x204009ec
  407c5c:	2040c968 	.word	0x2040c968

00407c60 <__sfvwrite_r>:
  407c60:	6893      	ldr	r3, [r2, #8]
  407c62:	2b00      	cmp	r3, #0
  407c64:	d073      	beq.n	407d4e <__sfvwrite_r+0xee>
  407c66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407c6a:	898b      	ldrh	r3, [r1, #12]
  407c6c:	b083      	sub	sp, #12
  407c6e:	460c      	mov	r4, r1
  407c70:	0719      	lsls	r1, r3, #28
  407c72:	9000      	str	r0, [sp, #0]
  407c74:	4616      	mov	r6, r2
  407c76:	d526      	bpl.n	407cc6 <__sfvwrite_r+0x66>
  407c78:	6922      	ldr	r2, [r4, #16]
  407c7a:	b322      	cbz	r2, 407cc6 <__sfvwrite_r+0x66>
  407c7c:	f013 0002 	ands.w	r0, r3, #2
  407c80:	6835      	ldr	r5, [r6, #0]
  407c82:	d02c      	beq.n	407cde <__sfvwrite_r+0x7e>
  407c84:	f04f 0900 	mov.w	r9, #0
  407c88:	4fb0      	ldr	r7, [pc, #704]	; (407f4c <__sfvwrite_r+0x2ec>)
  407c8a:	46c8      	mov	r8, r9
  407c8c:	46b2      	mov	sl, r6
  407c8e:	45b8      	cmp	r8, r7
  407c90:	4643      	mov	r3, r8
  407c92:	464a      	mov	r2, r9
  407c94:	bf28      	it	cs
  407c96:	463b      	movcs	r3, r7
  407c98:	9800      	ldr	r0, [sp, #0]
  407c9a:	f1b8 0f00 	cmp.w	r8, #0
  407c9e:	d050      	beq.n	407d42 <__sfvwrite_r+0xe2>
  407ca0:	69e1      	ldr	r1, [r4, #28]
  407ca2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407ca4:	47b0      	blx	r6
  407ca6:	2800      	cmp	r0, #0
  407ca8:	dd58      	ble.n	407d5c <__sfvwrite_r+0xfc>
  407caa:	f8da 3008 	ldr.w	r3, [sl, #8]
  407cae:	1a1b      	subs	r3, r3, r0
  407cb0:	4481      	add	r9, r0
  407cb2:	eba8 0800 	sub.w	r8, r8, r0
  407cb6:	f8ca 3008 	str.w	r3, [sl, #8]
  407cba:	2b00      	cmp	r3, #0
  407cbc:	d1e7      	bne.n	407c8e <__sfvwrite_r+0x2e>
  407cbe:	2000      	movs	r0, #0
  407cc0:	b003      	add	sp, #12
  407cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407cc6:	4621      	mov	r1, r4
  407cc8:	9800      	ldr	r0, [sp, #0]
  407cca:	f7ff fc51 	bl	407570 <__swsetup_r>
  407cce:	2800      	cmp	r0, #0
  407cd0:	f040 8133 	bne.w	407f3a <__sfvwrite_r+0x2da>
  407cd4:	89a3      	ldrh	r3, [r4, #12]
  407cd6:	6835      	ldr	r5, [r6, #0]
  407cd8:	f013 0002 	ands.w	r0, r3, #2
  407cdc:	d1d2      	bne.n	407c84 <__sfvwrite_r+0x24>
  407cde:	f013 0901 	ands.w	r9, r3, #1
  407ce2:	d145      	bne.n	407d70 <__sfvwrite_r+0x110>
  407ce4:	464f      	mov	r7, r9
  407ce6:	9601      	str	r6, [sp, #4]
  407ce8:	b337      	cbz	r7, 407d38 <__sfvwrite_r+0xd8>
  407cea:	059a      	lsls	r2, r3, #22
  407cec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407cf0:	f140 8083 	bpl.w	407dfa <__sfvwrite_r+0x19a>
  407cf4:	4547      	cmp	r7, r8
  407cf6:	46c3      	mov	fp, r8
  407cf8:	f0c0 80ab 	bcc.w	407e52 <__sfvwrite_r+0x1f2>
  407cfc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407d00:	f040 80ac 	bne.w	407e5c <__sfvwrite_r+0x1fc>
  407d04:	6820      	ldr	r0, [r4, #0]
  407d06:	46ba      	mov	sl, r7
  407d08:	465a      	mov	r2, fp
  407d0a:	4649      	mov	r1, r9
  407d0c:	f000 fa40 	bl	408190 <memmove>
  407d10:	68a2      	ldr	r2, [r4, #8]
  407d12:	6823      	ldr	r3, [r4, #0]
  407d14:	eba2 0208 	sub.w	r2, r2, r8
  407d18:	445b      	add	r3, fp
  407d1a:	60a2      	str	r2, [r4, #8]
  407d1c:	6023      	str	r3, [r4, #0]
  407d1e:	9a01      	ldr	r2, [sp, #4]
  407d20:	6893      	ldr	r3, [r2, #8]
  407d22:	eba3 030a 	sub.w	r3, r3, sl
  407d26:	44d1      	add	r9, sl
  407d28:	eba7 070a 	sub.w	r7, r7, sl
  407d2c:	6093      	str	r3, [r2, #8]
  407d2e:	2b00      	cmp	r3, #0
  407d30:	d0c5      	beq.n	407cbe <__sfvwrite_r+0x5e>
  407d32:	89a3      	ldrh	r3, [r4, #12]
  407d34:	2f00      	cmp	r7, #0
  407d36:	d1d8      	bne.n	407cea <__sfvwrite_r+0x8a>
  407d38:	f8d5 9000 	ldr.w	r9, [r5]
  407d3c:	686f      	ldr	r7, [r5, #4]
  407d3e:	3508      	adds	r5, #8
  407d40:	e7d2      	b.n	407ce8 <__sfvwrite_r+0x88>
  407d42:	f8d5 9000 	ldr.w	r9, [r5]
  407d46:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407d4a:	3508      	adds	r5, #8
  407d4c:	e79f      	b.n	407c8e <__sfvwrite_r+0x2e>
  407d4e:	2000      	movs	r0, #0
  407d50:	4770      	bx	lr
  407d52:	4621      	mov	r1, r4
  407d54:	9800      	ldr	r0, [sp, #0]
  407d56:	f7ff fd1f 	bl	407798 <_fflush_r>
  407d5a:	b370      	cbz	r0, 407dba <__sfvwrite_r+0x15a>
  407d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407d64:	f04f 30ff 	mov.w	r0, #4294967295
  407d68:	81a3      	strh	r3, [r4, #12]
  407d6a:	b003      	add	sp, #12
  407d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d70:	4681      	mov	r9, r0
  407d72:	4633      	mov	r3, r6
  407d74:	464e      	mov	r6, r9
  407d76:	46a8      	mov	r8, r5
  407d78:	469a      	mov	sl, r3
  407d7a:	464d      	mov	r5, r9
  407d7c:	b34e      	cbz	r6, 407dd2 <__sfvwrite_r+0x172>
  407d7e:	b380      	cbz	r0, 407de2 <__sfvwrite_r+0x182>
  407d80:	6820      	ldr	r0, [r4, #0]
  407d82:	6923      	ldr	r3, [r4, #16]
  407d84:	6962      	ldr	r2, [r4, #20]
  407d86:	45b1      	cmp	r9, r6
  407d88:	46cb      	mov	fp, r9
  407d8a:	bf28      	it	cs
  407d8c:	46b3      	movcs	fp, r6
  407d8e:	4298      	cmp	r0, r3
  407d90:	465f      	mov	r7, fp
  407d92:	d904      	bls.n	407d9e <__sfvwrite_r+0x13e>
  407d94:	68a3      	ldr	r3, [r4, #8]
  407d96:	4413      	add	r3, r2
  407d98:	459b      	cmp	fp, r3
  407d9a:	f300 80a6 	bgt.w	407eea <__sfvwrite_r+0x28a>
  407d9e:	4593      	cmp	fp, r2
  407da0:	db4b      	blt.n	407e3a <__sfvwrite_r+0x1da>
  407da2:	4613      	mov	r3, r2
  407da4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407da6:	69e1      	ldr	r1, [r4, #28]
  407da8:	9800      	ldr	r0, [sp, #0]
  407daa:	462a      	mov	r2, r5
  407dac:	47b8      	blx	r7
  407dae:	1e07      	subs	r7, r0, #0
  407db0:	ddd4      	ble.n	407d5c <__sfvwrite_r+0xfc>
  407db2:	ebb9 0907 	subs.w	r9, r9, r7
  407db6:	d0cc      	beq.n	407d52 <__sfvwrite_r+0xf2>
  407db8:	2001      	movs	r0, #1
  407dba:	f8da 3008 	ldr.w	r3, [sl, #8]
  407dbe:	1bdb      	subs	r3, r3, r7
  407dc0:	443d      	add	r5, r7
  407dc2:	1bf6      	subs	r6, r6, r7
  407dc4:	f8ca 3008 	str.w	r3, [sl, #8]
  407dc8:	2b00      	cmp	r3, #0
  407dca:	f43f af78 	beq.w	407cbe <__sfvwrite_r+0x5e>
  407dce:	2e00      	cmp	r6, #0
  407dd0:	d1d5      	bne.n	407d7e <__sfvwrite_r+0x11e>
  407dd2:	f108 0308 	add.w	r3, r8, #8
  407dd6:	e913 0060 	ldmdb	r3, {r5, r6}
  407dda:	4698      	mov	r8, r3
  407ddc:	3308      	adds	r3, #8
  407dde:	2e00      	cmp	r6, #0
  407de0:	d0f9      	beq.n	407dd6 <__sfvwrite_r+0x176>
  407de2:	4632      	mov	r2, r6
  407de4:	210a      	movs	r1, #10
  407de6:	4628      	mov	r0, r5
  407de8:	f000 f982 	bl	4080f0 <memchr>
  407dec:	2800      	cmp	r0, #0
  407dee:	f000 80a1 	beq.w	407f34 <__sfvwrite_r+0x2d4>
  407df2:	3001      	adds	r0, #1
  407df4:	eba0 0905 	sub.w	r9, r0, r5
  407df8:	e7c2      	b.n	407d80 <__sfvwrite_r+0x120>
  407dfa:	6820      	ldr	r0, [r4, #0]
  407dfc:	6923      	ldr	r3, [r4, #16]
  407dfe:	4298      	cmp	r0, r3
  407e00:	d802      	bhi.n	407e08 <__sfvwrite_r+0x1a8>
  407e02:	6963      	ldr	r3, [r4, #20]
  407e04:	429f      	cmp	r7, r3
  407e06:	d25d      	bcs.n	407ec4 <__sfvwrite_r+0x264>
  407e08:	45b8      	cmp	r8, r7
  407e0a:	bf28      	it	cs
  407e0c:	46b8      	movcs	r8, r7
  407e0e:	4642      	mov	r2, r8
  407e10:	4649      	mov	r1, r9
  407e12:	f000 f9bd 	bl	408190 <memmove>
  407e16:	68a3      	ldr	r3, [r4, #8]
  407e18:	6822      	ldr	r2, [r4, #0]
  407e1a:	eba3 0308 	sub.w	r3, r3, r8
  407e1e:	4442      	add	r2, r8
  407e20:	60a3      	str	r3, [r4, #8]
  407e22:	6022      	str	r2, [r4, #0]
  407e24:	b10b      	cbz	r3, 407e2a <__sfvwrite_r+0x1ca>
  407e26:	46c2      	mov	sl, r8
  407e28:	e779      	b.n	407d1e <__sfvwrite_r+0xbe>
  407e2a:	4621      	mov	r1, r4
  407e2c:	9800      	ldr	r0, [sp, #0]
  407e2e:	f7ff fcb3 	bl	407798 <_fflush_r>
  407e32:	2800      	cmp	r0, #0
  407e34:	d192      	bne.n	407d5c <__sfvwrite_r+0xfc>
  407e36:	46c2      	mov	sl, r8
  407e38:	e771      	b.n	407d1e <__sfvwrite_r+0xbe>
  407e3a:	465a      	mov	r2, fp
  407e3c:	4629      	mov	r1, r5
  407e3e:	f000 f9a7 	bl	408190 <memmove>
  407e42:	68a2      	ldr	r2, [r4, #8]
  407e44:	6823      	ldr	r3, [r4, #0]
  407e46:	eba2 020b 	sub.w	r2, r2, fp
  407e4a:	445b      	add	r3, fp
  407e4c:	60a2      	str	r2, [r4, #8]
  407e4e:	6023      	str	r3, [r4, #0]
  407e50:	e7af      	b.n	407db2 <__sfvwrite_r+0x152>
  407e52:	6820      	ldr	r0, [r4, #0]
  407e54:	46b8      	mov	r8, r7
  407e56:	46ba      	mov	sl, r7
  407e58:	46bb      	mov	fp, r7
  407e5a:	e755      	b.n	407d08 <__sfvwrite_r+0xa8>
  407e5c:	6962      	ldr	r2, [r4, #20]
  407e5e:	6820      	ldr	r0, [r4, #0]
  407e60:	6921      	ldr	r1, [r4, #16]
  407e62:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407e66:	eba0 0a01 	sub.w	sl, r0, r1
  407e6a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  407e6e:	f10a 0001 	add.w	r0, sl, #1
  407e72:	ea4f 0868 	mov.w	r8, r8, asr #1
  407e76:	4438      	add	r0, r7
  407e78:	4540      	cmp	r0, r8
  407e7a:	4642      	mov	r2, r8
  407e7c:	bf84      	itt	hi
  407e7e:	4680      	movhi	r8, r0
  407e80:	4642      	movhi	r2, r8
  407e82:	055b      	lsls	r3, r3, #21
  407e84:	d544      	bpl.n	407f10 <__sfvwrite_r+0x2b0>
  407e86:	4611      	mov	r1, r2
  407e88:	9800      	ldr	r0, [sp, #0]
  407e8a:	f7fd ffaf 	bl	405dec <_malloc_r>
  407e8e:	4683      	mov	fp, r0
  407e90:	2800      	cmp	r0, #0
  407e92:	d055      	beq.n	407f40 <__sfvwrite_r+0x2e0>
  407e94:	4652      	mov	r2, sl
  407e96:	6921      	ldr	r1, [r4, #16]
  407e98:	f7fe fa58 	bl	40634c <memcpy>
  407e9c:	89a3      	ldrh	r3, [r4, #12]
  407e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407ea6:	81a3      	strh	r3, [r4, #12]
  407ea8:	eb0b 000a 	add.w	r0, fp, sl
  407eac:	eba8 030a 	sub.w	r3, r8, sl
  407eb0:	f8c4 b010 	str.w	fp, [r4, #16]
  407eb4:	f8c4 8014 	str.w	r8, [r4, #20]
  407eb8:	6020      	str	r0, [r4, #0]
  407eba:	60a3      	str	r3, [r4, #8]
  407ebc:	46b8      	mov	r8, r7
  407ebe:	46ba      	mov	sl, r7
  407ec0:	46bb      	mov	fp, r7
  407ec2:	e721      	b.n	407d08 <__sfvwrite_r+0xa8>
  407ec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407ec8:	42b9      	cmp	r1, r7
  407eca:	bf28      	it	cs
  407ecc:	4639      	movcs	r1, r7
  407ece:	464a      	mov	r2, r9
  407ed0:	fb91 f1f3 	sdiv	r1, r1, r3
  407ed4:	9800      	ldr	r0, [sp, #0]
  407ed6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407ed8:	fb03 f301 	mul.w	r3, r3, r1
  407edc:	69e1      	ldr	r1, [r4, #28]
  407ede:	47b0      	blx	r6
  407ee0:	f1b0 0a00 	subs.w	sl, r0, #0
  407ee4:	f73f af1b 	bgt.w	407d1e <__sfvwrite_r+0xbe>
  407ee8:	e738      	b.n	407d5c <__sfvwrite_r+0xfc>
  407eea:	461a      	mov	r2, r3
  407eec:	4629      	mov	r1, r5
  407eee:	9301      	str	r3, [sp, #4]
  407ef0:	f000 f94e 	bl	408190 <memmove>
  407ef4:	6822      	ldr	r2, [r4, #0]
  407ef6:	9b01      	ldr	r3, [sp, #4]
  407ef8:	9800      	ldr	r0, [sp, #0]
  407efa:	441a      	add	r2, r3
  407efc:	6022      	str	r2, [r4, #0]
  407efe:	4621      	mov	r1, r4
  407f00:	f7ff fc4a 	bl	407798 <_fflush_r>
  407f04:	9b01      	ldr	r3, [sp, #4]
  407f06:	2800      	cmp	r0, #0
  407f08:	f47f af28 	bne.w	407d5c <__sfvwrite_r+0xfc>
  407f0c:	461f      	mov	r7, r3
  407f0e:	e750      	b.n	407db2 <__sfvwrite_r+0x152>
  407f10:	9800      	ldr	r0, [sp, #0]
  407f12:	f000 f9a1 	bl	408258 <_realloc_r>
  407f16:	4683      	mov	fp, r0
  407f18:	2800      	cmp	r0, #0
  407f1a:	d1c5      	bne.n	407ea8 <__sfvwrite_r+0x248>
  407f1c:	9d00      	ldr	r5, [sp, #0]
  407f1e:	6921      	ldr	r1, [r4, #16]
  407f20:	4628      	mov	r0, r5
  407f22:	f7ff fdb7 	bl	407a94 <_free_r>
  407f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407f2a:	220c      	movs	r2, #12
  407f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407f30:	602a      	str	r2, [r5, #0]
  407f32:	e715      	b.n	407d60 <__sfvwrite_r+0x100>
  407f34:	f106 0901 	add.w	r9, r6, #1
  407f38:	e722      	b.n	407d80 <__sfvwrite_r+0x120>
  407f3a:	f04f 30ff 	mov.w	r0, #4294967295
  407f3e:	e6bf      	b.n	407cc0 <__sfvwrite_r+0x60>
  407f40:	9a00      	ldr	r2, [sp, #0]
  407f42:	230c      	movs	r3, #12
  407f44:	6013      	str	r3, [r2, #0]
  407f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407f4a:	e709      	b.n	407d60 <__sfvwrite_r+0x100>
  407f4c:	7ffffc00 	.word	0x7ffffc00

00407f50 <_fwalk_reent>:
  407f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407f54:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407f58:	d01f      	beq.n	407f9a <_fwalk_reent+0x4a>
  407f5a:	4688      	mov	r8, r1
  407f5c:	4606      	mov	r6, r0
  407f5e:	f04f 0900 	mov.w	r9, #0
  407f62:	687d      	ldr	r5, [r7, #4]
  407f64:	68bc      	ldr	r4, [r7, #8]
  407f66:	3d01      	subs	r5, #1
  407f68:	d411      	bmi.n	407f8e <_fwalk_reent+0x3e>
  407f6a:	89a3      	ldrh	r3, [r4, #12]
  407f6c:	2b01      	cmp	r3, #1
  407f6e:	f105 35ff 	add.w	r5, r5, #4294967295
  407f72:	d908      	bls.n	407f86 <_fwalk_reent+0x36>
  407f74:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407f78:	3301      	adds	r3, #1
  407f7a:	4621      	mov	r1, r4
  407f7c:	4630      	mov	r0, r6
  407f7e:	d002      	beq.n	407f86 <_fwalk_reent+0x36>
  407f80:	47c0      	blx	r8
  407f82:	ea49 0900 	orr.w	r9, r9, r0
  407f86:	1c6b      	adds	r3, r5, #1
  407f88:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407f8c:	d1ed      	bne.n	407f6a <_fwalk_reent+0x1a>
  407f8e:	683f      	ldr	r7, [r7, #0]
  407f90:	2f00      	cmp	r7, #0
  407f92:	d1e6      	bne.n	407f62 <_fwalk_reent+0x12>
  407f94:	4648      	mov	r0, r9
  407f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407f9a:	46b9      	mov	r9, r7
  407f9c:	4648      	mov	r0, r9
  407f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407fa2:	bf00      	nop

00407fa4 <__locale_mb_cur_max>:
  407fa4:	4b04      	ldr	r3, [pc, #16]	; (407fb8 <__locale_mb_cur_max+0x14>)
  407fa6:	4a05      	ldr	r2, [pc, #20]	; (407fbc <__locale_mb_cur_max+0x18>)
  407fa8:	681b      	ldr	r3, [r3, #0]
  407faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  407fac:	2b00      	cmp	r3, #0
  407fae:	bf08      	it	eq
  407fb0:	4613      	moveq	r3, r2
  407fb2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  407fb6:	4770      	bx	lr
  407fb8:	204001b0 	.word	0x204001b0
  407fbc:	204009f4 	.word	0x204009f4

00407fc0 <__retarget_lock_init_recursive>:
  407fc0:	4770      	bx	lr
  407fc2:	bf00      	nop

00407fc4 <__retarget_lock_close_recursive>:
  407fc4:	4770      	bx	lr
  407fc6:	bf00      	nop

00407fc8 <__retarget_lock_acquire_recursive>:
  407fc8:	4770      	bx	lr
  407fca:	bf00      	nop

00407fcc <__retarget_lock_release_recursive>:
  407fcc:	4770      	bx	lr
  407fce:	bf00      	nop

00407fd0 <__swhatbuf_r>:
  407fd0:	b570      	push	{r4, r5, r6, lr}
  407fd2:	460c      	mov	r4, r1
  407fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407fd8:	2900      	cmp	r1, #0
  407fda:	b090      	sub	sp, #64	; 0x40
  407fdc:	4615      	mov	r5, r2
  407fde:	461e      	mov	r6, r3
  407fe0:	db14      	blt.n	40800c <__swhatbuf_r+0x3c>
  407fe2:	aa01      	add	r2, sp, #4
  407fe4:	f000 fc9e 	bl	408924 <_fstat_r>
  407fe8:	2800      	cmp	r0, #0
  407fea:	db0f      	blt.n	40800c <__swhatbuf_r+0x3c>
  407fec:	9a02      	ldr	r2, [sp, #8]
  407fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  407ff2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  407ff6:	fab2 f282 	clz	r2, r2
  407ffa:	0952      	lsrs	r2, r2, #5
  407ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408000:	f44f 6000 	mov.w	r0, #2048	; 0x800
  408004:	6032      	str	r2, [r6, #0]
  408006:	602b      	str	r3, [r5, #0]
  408008:	b010      	add	sp, #64	; 0x40
  40800a:	bd70      	pop	{r4, r5, r6, pc}
  40800c:	89a2      	ldrh	r2, [r4, #12]
  40800e:	2300      	movs	r3, #0
  408010:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  408014:	6033      	str	r3, [r6, #0]
  408016:	d004      	beq.n	408022 <__swhatbuf_r+0x52>
  408018:	2240      	movs	r2, #64	; 0x40
  40801a:	4618      	mov	r0, r3
  40801c:	602a      	str	r2, [r5, #0]
  40801e:	b010      	add	sp, #64	; 0x40
  408020:	bd70      	pop	{r4, r5, r6, pc}
  408022:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408026:	602b      	str	r3, [r5, #0]
  408028:	b010      	add	sp, #64	; 0x40
  40802a:	bd70      	pop	{r4, r5, r6, pc}

0040802c <__smakebuf_r>:
  40802c:	898a      	ldrh	r2, [r1, #12]
  40802e:	0792      	lsls	r2, r2, #30
  408030:	460b      	mov	r3, r1
  408032:	d506      	bpl.n	408042 <__smakebuf_r+0x16>
  408034:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408038:	2101      	movs	r1, #1
  40803a:	601a      	str	r2, [r3, #0]
  40803c:	611a      	str	r2, [r3, #16]
  40803e:	6159      	str	r1, [r3, #20]
  408040:	4770      	bx	lr
  408042:	b5f0      	push	{r4, r5, r6, r7, lr}
  408044:	b083      	sub	sp, #12
  408046:	ab01      	add	r3, sp, #4
  408048:	466a      	mov	r2, sp
  40804a:	460c      	mov	r4, r1
  40804c:	4606      	mov	r6, r0
  40804e:	f7ff ffbf 	bl	407fd0 <__swhatbuf_r>
  408052:	9900      	ldr	r1, [sp, #0]
  408054:	4605      	mov	r5, r0
  408056:	4630      	mov	r0, r6
  408058:	f7fd fec8 	bl	405dec <_malloc_r>
  40805c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408060:	b1d8      	cbz	r0, 40809a <__smakebuf_r+0x6e>
  408062:	9a01      	ldr	r2, [sp, #4]
  408064:	4f15      	ldr	r7, [pc, #84]	; (4080bc <__smakebuf_r+0x90>)
  408066:	9900      	ldr	r1, [sp, #0]
  408068:	63f7      	str	r7, [r6, #60]	; 0x3c
  40806a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40806e:	81a3      	strh	r3, [r4, #12]
  408070:	6020      	str	r0, [r4, #0]
  408072:	6120      	str	r0, [r4, #16]
  408074:	6161      	str	r1, [r4, #20]
  408076:	b91a      	cbnz	r2, 408080 <__smakebuf_r+0x54>
  408078:	432b      	orrs	r3, r5
  40807a:	81a3      	strh	r3, [r4, #12]
  40807c:	b003      	add	sp, #12
  40807e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408080:	4630      	mov	r0, r6
  408082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408086:	f000 fc61 	bl	40894c <_isatty_r>
  40808a:	b1a0      	cbz	r0, 4080b6 <__smakebuf_r+0x8a>
  40808c:	89a3      	ldrh	r3, [r4, #12]
  40808e:	f023 0303 	bic.w	r3, r3, #3
  408092:	f043 0301 	orr.w	r3, r3, #1
  408096:	b21b      	sxth	r3, r3
  408098:	e7ee      	b.n	408078 <__smakebuf_r+0x4c>
  40809a:	059a      	lsls	r2, r3, #22
  40809c:	d4ee      	bmi.n	40807c <__smakebuf_r+0x50>
  40809e:	f023 0303 	bic.w	r3, r3, #3
  4080a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4080a6:	f043 0302 	orr.w	r3, r3, #2
  4080aa:	2101      	movs	r1, #1
  4080ac:	81a3      	strh	r3, [r4, #12]
  4080ae:	6022      	str	r2, [r4, #0]
  4080b0:	6122      	str	r2, [r4, #16]
  4080b2:	6161      	str	r1, [r4, #20]
  4080b4:	e7e2      	b.n	40807c <__smakebuf_r+0x50>
  4080b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4080ba:	e7dd      	b.n	408078 <__smakebuf_r+0x4c>
  4080bc:	004077ed 	.word	0x004077ed

004080c0 <__ascii_mbtowc>:
  4080c0:	b082      	sub	sp, #8
  4080c2:	b149      	cbz	r1, 4080d8 <__ascii_mbtowc+0x18>
  4080c4:	b15a      	cbz	r2, 4080de <__ascii_mbtowc+0x1e>
  4080c6:	b16b      	cbz	r3, 4080e4 <__ascii_mbtowc+0x24>
  4080c8:	7813      	ldrb	r3, [r2, #0]
  4080ca:	600b      	str	r3, [r1, #0]
  4080cc:	7812      	ldrb	r2, [r2, #0]
  4080ce:	1c10      	adds	r0, r2, #0
  4080d0:	bf18      	it	ne
  4080d2:	2001      	movne	r0, #1
  4080d4:	b002      	add	sp, #8
  4080d6:	4770      	bx	lr
  4080d8:	a901      	add	r1, sp, #4
  4080da:	2a00      	cmp	r2, #0
  4080dc:	d1f3      	bne.n	4080c6 <__ascii_mbtowc+0x6>
  4080de:	4610      	mov	r0, r2
  4080e0:	b002      	add	sp, #8
  4080e2:	4770      	bx	lr
  4080e4:	f06f 0001 	mvn.w	r0, #1
  4080e8:	e7f4      	b.n	4080d4 <__ascii_mbtowc+0x14>
  4080ea:	bf00      	nop
  4080ec:	0000      	movs	r0, r0
	...

004080f0 <memchr>:
  4080f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4080f4:	2a10      	cmp	r2, #16
  4080f6:	db2b      	blt.n	408150 <memchr+0x60>
  4080f8:	f010 0f07 	tst.w	r0, #7
  4080fc:	d008      	beq.n	408110 <memchr+0x20>
  4080fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  408102:	3a01      	subs	r2, #1
  408104:	428b      	cmp	r3, r1
  408106:	d02d      	beq.n	408164 <memchr+0x74>
  408108:	f010 0f07 	tst.w	r0, #7
  40810c:	b342      	cbz	r2, 408160 <memchr+0x70>
  40810e:	d1f6      	bne.n	4080fe <memchr+0xe>
  408110:	b4f0      	push	{r4, r5, r6, r7}
  408112:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408116:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40811a:	f022 0407 	bic.w	r4, r2, #7
  40811e:	f07f 0700 	mvns.w	r7, #0
  408122:	2300      	movs	r3, #0
  408124:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408128:	3c08      	subs	r4, #8
  40812a:	ea85 0501 	eor.w	r5, r5, r1
  40812e:	ea86 0601 	eor.w	r6, r6, r1
  408132:	fa85 f547 	uadd8	r5, r5, r7
  408136:	faa3 f587 	sel	r5, r3, r7
  40813a:	fa86 f647 	uadd8	r6, r6, r7
  40813e:	faa5 f687 	sel	r6, r5, r7
  408142:	b98e      	cbnz	r6, 408168 <memchr+0x78>
  408144:	d1ee      	bne.n	408124 <memchr+0x34>
  408146:	bcf0      	pop	{r4, r5, r6, r7}
  408148:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40814c:	f002 0207 	and.w	r2, r2, #7
  408150:	b132      	cbz	r2, 408160 <memchr+0x70>
  408152:	f810 3b01 	ldrb.w	r3, [r0], #1
  408156:	3a01      	subs	r2, #1
  408158:	ea83 0301 	eor.w	r3, r3, r1
  40815c:	b113      	cbz	r3, 408164 <memchr+0x74>
  40815e:	d1f8      	bne.n	408152 <memchr+0x62>
  408160:	2000      	movs	r0, #0
  408162:	4770      	bx	lr
  408164:	3801      	subs	r0, #1
  408166:	4770      	bx	lr
  408168:	2d00      	cmp	r5, #0
  40816a:	bf06      	itte	eq
  40816c:	4635      	moveq	r5, r6
  40816e:	3803      	subeq	r0, #3
  408170:	3807      	subne	r0, #7
  408172:	f015 0f01 	tst.w	r5, #1
  408176:	d107      	bne.n	408188 <memchr+0x98>
  408178:	3001      	adds	r0, #1
  40817a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40817e:	bf02      	ittt	eq
  408180:	3001      	addeq	r0, #1
  408182:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408186:	3001      	addeq	r0, #1
  408188:	bcf0      	pop	{r4, r5, r6, r7}
  40818a:	3801      	subs	r0, #1
  40818c:	4770      	bx	lr
  40818e:	bf00      	nop

00408190 <memmove>:
  408190:	4288      	cmp	r0, r1
  408192:	b5f0      	push	{r4, r5, r6, r7, lr}
  408194:	d90d      	bls.n	4081b2 <memmove+0x22>
  408196:	188b      	adds	r3, r1, r2
  408198:	4298      	cmp	r0, r3
  40819a:	d20a      	bcs.n	4081b2 <memmove+0x22>
  40819c:	1884      	adds	r4, r0, r2
  40819e:	2a00      	cmp	r2, #0
  4081a0:	d051      	beq.n	408246 <memmove+0xb6>
  4081a2:	4622      	mov	r2, r4
  4081a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4081a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4081ac:	4299      	cmp	r1, r3
  4081ae:	d1f9      	bne.n	4081a4 <memmove+0x14>
  4081b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4081b2:	2a0f      	cmp	r2, #15
  4081b4:	d948      	bls.n	408248 <memmove+0xb8>
  4081b6:	ea41 0300 	orr.w	r3, r1, r0
  4081ba:	079b      	lsls	r3, r3, #30
  4081bc:	d146      	bne.n	40824c <memmove+0xbc>
  4081be:	f100 0410 	add.w	r4, r0, #16
  4081c2:	f101 0310 	add.w	r3, r1, #16
  4081c6:	4615      	mov	r5, r2
  4081c8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4081cc:	f844 6c10 	str.w	r6, [r4, #-16]
  4081d0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4081d4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4081d8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4081dc:	f844 6c08 	str.w	r6, [r4, #-8]
  4081e0:	3d10      	subs	r5, #16
  4081e2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4081e6:	f844 6c04 	str.w	r6, [r4, #-4]
  4081ea:	2d0f      	cmp	r5, #15
  4081ec:	f103 0310 	add.w	r3, r3, #16
  4081f0:	f104 0410 	add.w	r4, r4, #16
  4081f4:	d8e8      	bhi.n	4081c8 <memmove+0x38>
  4081f6:	f1a2 0310 	sub.w	r3, r2, #16
  4081fa:	f023 030f 	bic.w	r3, r3, #15
  4081fe:	f002 0e0f 	and.w	lr, r2, #15
  408202:	3310      	adds	r3, #16
  408204:	f1be 0f03 	cmp.w	lr, #3
  408208:	4419      	add	r1, r3
  40820a:	4403      	add	r3, r0
  40820c:	d921      	bls.n	408252 <memmove+0xc2>
  40820e:	1f1e      	subs	r6, r3, #4
  408210:	460d      	mov	r5, r1
  408212:	4674      	mov	r4, lr
  408214:	3c04      	subs	r4, #4
  408216:	f855 7b04 	ldr.w	r7, [r5], #4
  40821a:	f846 7f04 	str.w	r7, [r6, #4]!
  40821e:	2c03      	cmp	r4, #3
  408220:	d8f8      	bhi.n	408214 <memmove+0x84>
  408222:	f1ae 0404 	sub.w	r4, lr, #4
  408226:	f024 0403 	bic.w	r4, r4, #3
  40822a:	3404      	adds	r4, #4
  40822c:	4421      	add	r1, r4
  40822e:	4423      	add	r3, r4
  408230:	f002 0203 	and.w	r2, r2, #3
  408234:	b162      	cbz	r2, 408250 <memmove+0xc0>
  408236:	3b01      	subs	r3, #1
  408238:	440a      	add	r2, r1
  40823a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40823e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408242:	428a      	cmp	r2, r1
  408244:	d1f9      	bne.n	40823a <memmove+0xaa>
  408246:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408248:	4603      	mov	r3, r0
  40824a:	e7f3      	b.n	408234 <memmove+0xa4>
  40824c:	4603      	mov	r3, r0
  40824e:	e7f2      	b.n	408236 <memmove+0xa6>
  408250:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408252:	4672      	mov	r2, lr
  408254:	e7ee      	b.n	408234 <memmove+0xa4>
  408256:	bf00      	nop

00408258 <_realloc_r>:
  408258:	2900      	cmp	r1, #0
  40825a:	f000 8095 	beq.w	408388 <_realloc_r+0x130>
  40825e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408262:	460d      	mov	r5, r1
  408264:	4616      	mov	r6, r2
  408266:	b083      	sub	sp, #12
  408268:	4680      	mov	r8, r0
  40826a:	f106 070b 	add.w	r7, r6, #11
  40826e:	f7fe f955 	bl	40651c <__malloc_lock>
  408272:	f855 ec04 	ldr.w	lr, [r5, #-4]
  408276:	2f16      	cmp	r7, #22
  408278:	f02e 0403 	bic.w	r4, lr, #3
  40827c:	f1a5 0908 	sub.w	r9, r5, #8
  408280:	d83c      	bhi.n	4082fc <_realloc_r+0xa4>
  408282:	2210      	movs	r2, #16
  408284:	4617      	mov	r7, r2
  408286:	42be      	cmp	r6, r7
  408288:	d83d      	bhi.n	408306 <_realloc_r+0xae>
  40828a:	4294      	cmp	r4, r2
  40828c:	da43      	bge.n	408316 <_realloc_r+0xbe>
  40828e:	4bc4      	ldr	r3, [pc, #784]	; (4085a0 <_realloc_r+0x348>)
  408290:	6899      	ldr	r1, [r3, #8]
  408292:	eb09 0004 	add.w	r0, r9, r4
  408296:	4288      	cmp	r0, r1
  408298:	f000 80b4 	beq.w	408404 <_realloc_r+0x1ac>
  40829c:	6843      	ldr	r3, [r0, #4]
  40829e:	f023 0101 	bic.w	r1, r3, #1
  4082a2:	4401      	add	r1, r0
  4082a4:	6849      	ldr	r1, [r1, #4]
  4082a6:	07c9      	lsls	r1, r1, #31
  4082a8:	d54c      	bpl.n	408344 <_realloc_r+0xec>
  4082aa:	f01e 0f01 	tst.w	lr, #1
  4082ae:	f000 809b 	beq.w	4083e8 <_realloc_r+0x190>
  4082b2:	4631      	mov	r1, r6
  4082b4:	4640      	mov	r0, r8
  4082b6:	f7fd fd99 	bl	405dec <_malloc_r>
  4082ba:	4606      	mov	r6, r0
  4082bc:	2800      	cmp	r0, #0
  4082be:	d03a      	beq.n	408336 <_realloc_r+0xde>
  4082c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4082c4:	f023 0301 	bic.w	r3, r3, #1
  4082c8:	444b      	add	r3, r9
  4082ca:	f1a0 0208 	sub.w	r2, r0, #8
  4082ce:	429a      	cmp	r2, r3
  4082d0:	f000 8121 	beq.w	408516 <_realloc_r+0x2be>
  4082d4:	1f22      	subs	r2, r4, #4
  4082d6:	2a24      	cmp	r2, #36	; 0x24
  4082d8:	f200 8107 	bhi.w	4084ea <_realloc_r+0x292>
  4082dc:	2a13      	cmp	r2, #19
  4082de:	f200 80db 	bhi.w	408498 <_realloc_r+0x240>
  4082e2:	4603      	mov	r3, r0
  4082e4:	462a      	mov	r2, r5
  4082e6:	6811      	ldr	r1, [r2, #0]
  4082e8:	6019      	str	r1, [r3, #0]
  4082ea:	6851      	ldr	r1, [r2, #4]
  4082ec:	6059      	str	r1, [r3, #4]
  4082ee:	6892      	ldr	r2, [r2, #8]
  4082f0:	609a      	str	r2, [r3, #8]
  4082f2:	4629      	mov	r1, r5
  4082f4:	4640      	mov	r0, r8
  4082f6:	f7ff fbcd 	bl	407a94 <_free_r>
  4082fa:	e01c      	b.n	408336 <_realloc_r+0xde>
  4082fc:	f027 0707 	bic.w	r7, r7, #7
  408300:	2f00      	cmp	r7, #0
  408302:	463a      	mov	r2, r7
  408304:	dabf      	bge.n	408286 <_realloc_r+0x2e>
  408306:	2600      	movs	r6, #0
  408308:	230c      	movs	r3, #12
  40830a:	4630      	mov	r0, r6
  40830c:	f8c8 3000 	str.w	r3, [r8]
  408310:	b003      	add	sp, #12
  408312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408316:	462e      	mov	r6, r5
  408318:	1be3      	subs	r3, r4, r7
  40831a:	2b0f      	cmp	r3, #15
  40831c:	d81e      	bhi.n	40835c <_realloc_r+0x104>
  40831e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  408322:	f003 0301 	and.w	r3, r3, #1
  408326:	4323      	orrs	r3, r4
  408328:	444c      	add	r4, r9
  40832a:	f8c9 3004 	str.w	r3, [r9, #4]
  40832e:	6863      	ldr	r3, [r4, #4]
  408330:	f043 0301 	orr.w	r3, r3, #1
  408334:	6063      	str	r3, [r4, #4]
  408336:	4640      	mov	r0, r8
  408338:	f7fe f8f6 	bl	406528 <__malloc_unlock>
  40833c:	4630      	mov	r0, r6
  40833e:	b003      	add	sp, #12
  408340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408344:	f023 0303 	bic.w	r3, r3, #3
  408348:	18e1      	adds	r1, r4, r3
  40834a:	4291      	cmp	r1, r2
  40834c:	db1f      	blt.n	40838e <_realloc_r+0x136>
  40834e:	68c3      	ldr	r3, [r0, #12]
  408350:	6882      	ldr	r2, [r0, #8]
  408352:	462e      	mov	r6, r5
  408354:	60d3      	str	r3, [r2, #12]
  408356:	460c      	mov	r4, r1
  408358:	609a      	str	r2, [r3, #8]
  40835a:	e7dd      	b.n	408318 <_realloc_r+0xc0>
  40835c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408360:	eb09 0107 	add.w	r1, r9, r7
  408364:	f002 0201 	and.w	r2, r2, #1
  408368:	444c      	add	r4, r9
  40836a:	f043 0301 	orr.w	r3, r3, #1
  40836e:	4317      	orrs	r7, r2
  408370:	f8c9 7004 	str.w	r7, [r9, #4]
  408374:	604b      	str	r3, [r1, #4]
  408376:	6863      	ldr	r3, [r4, #4]
  408378:	f043 0301 	orr.w	r3, r3, #1
  40837c:	3108      	adds	r1, #8
  40837e:	6063      	str	r3, [r4, #4]
  408380:	4640      	mov	r0, r8
  408382:	f7ff fb87 	bl	407a94 <_free_r>
  408386:	e7d6      	b.n	408336 <_realloc_r+0xde>
  408388:	4611      	mov	r1, r2
  40838a:	f7fd bd2f 	b.w	405dec <_malloc_r>
  40838e:	f01e 0f01 	tst.w	lr, #1
  408392:	d18e      	bne.n	4082b2 <_realloc_r+0x5a>
  408394:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408398:	eba9 0a01 	sub.w	sl, r9, r1
  40839c:	f8da 1004 	ldr.w	r1, [sl, #4]
  4083a0:	f021 0103 	bic.w	r1, r1, #3
  4083a4:	440b      	add	r3, r1
  4083a6:	4423      	add	r3, r4
  4083a8:	4293      	cmp	r3, r2
  4083aa:	db25      	blt.n	4083f8 <_realloc_r+0x1a0>
  4083ac:	68c2      	ldr	r2, [r0, #12]
  4083ae:	6881      	ldr	r1, [r0, #8]
  4083b0:	4656      	mov	r6, sl
  4083b2:	60ca      	str	r2, [r1, #12]
  4083b4:	6091      	str	r1, [r2, #8]
  4083b6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4083ba:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4083be:	1f22      	subs	r2, r4, #4
  4083c0:	2a24      	cmp	r2, #36	; 0x24
  4083c2:	60c1      	str	r1, [r0, #12]
  4083c4:	6088      	str	r0, [r1, #8]
  4083c6:	f200 8094 	bhi.w	4084f2 <_realloc_r+0x29a>
  4083ca:	2a13      	cmp	r2, #19
  4083cc:	d96f      	bls.n	4084ae <_realloc_r+0x256>
  4083ce:	6829      	ldr	r1, [r5, #0]
  4083d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4083d4:	6869      	ldr	r1, [r5, #4]
  4083d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4083da:	2a1b      	cmp	r2, #27
  4083dc:	f200 80a2 	bhi.w	408524 <_realloc_r+0x2cc>
  4083e0:	3508      	adds	r5, #8
  4083e2:	f10a 0210 	add.w	r2, sl, #16
  4083e6:	e063      	b.n	4084b0 <_realloc_r+0x258>
  4083e8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4083ec:	eba9 0a03 	sub.w	sl, r9, r3
  4083f0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4083f4:	f021 0103 	bic.w	r1, r1, #3
  4083f8:	1863      	adds	r3, r4, r1
  4083fa:	4293      	cmp	r3, r2
  4083fc:	f6ff af59 	blt.w	4082b2 <_realloc_r+0x5a>
  408400:	4656      	mov	r6, sl
  408402:	e7d8      	b.n	4083b6 <_realloc_r+0x15e>
  408404:	6841      	ldr	r1, [r0, #4]
  408406:	f021 0b03 	bic.w	fp, r1, #3
  40840a:	44a3      	add	fp, r4
  40840c:	f107 0010 	add.w	r0, r7, #16
  408410:	4583      	cmp	fp, r0
  408412:	da56      	bge.n	4084c2 <_realloc_r+0x26a>
  408414:	f01e 0f01 	tst.w	lr, #1
  408418:	f47f af4b 	bne.w	4082b2 <_realloc_r+0x5a>
  40841c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408420:	eba9 0a01 	sub.w	sl, r9, r1
  408424:	f8da 1004 	ldr.w	r1, [sl, #4]
  408428:	f021 0103 	bic.w	r1, r1, #3
  40842c:	448b      	add	fp, r1
  40842e:	4558      	cmp	r0, fp
  408430:	dce2      	bgt.n	4083f8 <_realloc_r+0x1a0>
  408432:	4656      	mov	r6, sl
  408434:	f8da 100c 	ldr.w	r1, [sl, #12]
  408438:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40843c:	1f22      	subs	r2, r4, #4
  40843e:	2a24      	cmp	r2, #36	; 0x24
  408440:	60c1      	str	r1, [r0, #12]
  408442:	6088      	str	r0, [r1, #8]
  408444:	f200 808f 	bhi.w	408566 <_realloc_r+0x30e>
  408448:	2a13      	cmp	r2, #19
  40844a:	f240 808a 	bls.w	408562 <_realloc_r+0x30a>
  40844e:	6829      	ldr	r1, [r5, #0]
  408450:	f8ca 1008 	str.w	r1, [sl, #8]
  408454:	6869      	ldr	r1, [r5, #4]
  408456:	f8ca 100c 	str.w	r1, [sl, #12]
  40845a:	2a1b      	cmp	r2, #27
  40845c:	f200 808a 	bhi.w	408574 <_realloc_r+0x31c>
  408460:	3508      	adds	r5, #8
  408462:	f10a 0210 	add.w	r2, sl, #16
  408466:	6829      	ldr	r1, [r5, #0]
  408468:	6011      	str	r1, [r2, #0]
  40846a:	6869      	ldr	r1, [r5, #4]
  40846c:	6051      	str	r1, [r2, #4]
  40846e:	68a9      	ldr	r1, [r5, #8]
  408470:	6091      	str	r1, [r2, #8]
  408472:	eb0a 0107 	add.w	r1, sl, r7
  408476:	ebab 0207 	sub.w	r2, fp, r7
  40847a:	f042 0201 	orr.w	r2, r2, #1
  40847e:	6099      	str	r1, [r3, #8]
  408480:	604a      	str	r2, [r1, #4]
  408482:	f8da 3004 	ldr.w	r3, [sl, #4]
  408486:	f003 0301 	and.w	r3, r3, #1
  40848a:	431f      	orrs	r7, r3
  40848c:	4640      	mov	r0, r8
  40848e:	f8ca 7004 	str.w	r7, [sl, #4]
  408492:	f7fe f849 	bl	406528 <__malloc_unlock>
  408496:	e751      	b.n	40833c <_realloc_r+0xe4>
  408498:	682b      	ldr	r3, [r5, #0]
  40849a:	6003      	str	r3, [r0, #0]
  40849c:	686b      	ldr	r3, [r5, #4]
  40849e:	6043      	str	r3, [r0, #4]
  4084a0:	2a1b      	cmp	r2, #27
  4084a2:	d82d      	bhi.n	408500 <_realloc_r+0x2a8>
  4084a4:	f100 0308 	add.w	r3, r0, #8
  4084a8:	f105 0208 	add.w	r2, r5, #8
  4084ac:	e71b      	b.n	4082e6 <_realloc_r+0x8e>
  4084ae:	4632      	mov	r2, r6
  4084b0:	6829      	ldr	r1, [r5, #0]
  4084b2:	6011      	str	r1, [r2, #0]
  4084b4:	6869      	ldr	r1, [r5, #4]
  4084b6:	6051      	str	r1, [r2, #4]
  4084b8:	68a9      	ldr	r1, [r5, #8]
  4084ba:	6091      	str	r1, [r2, #8]
  4084bc:	461c      	mov	r4, r3
  4084be:	46d1      	mov	r9, sl
  4084c0:	e72a      	b.n	408318 <_realloc_r+0xc0>
  4084c2:	eb09 0107 	add.w	r1, r9, r7
  4084c6:	ebab 0b07 	sub.w	fp, fp, r7
  4084ca:	f04b 0201 	orr.w	r2, fp, #1
  4084ce:	6099      	str	r1, [r3, #8]
  4084d0:	604a      	str	r2, [r1, #4]
  4084d2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4084d6:	f003 0301 	and.w	r3, r3, #1
  4084da:	431f      	orrs	r7, r3
  4084dc:	4640      	mov	r0, r8
  4084de:	f845 7c04 	str.w	r7, [r5, #-4]
  4084e2:	f7fe f821 	bl	406528 <__malloc_unlock>
  4084e6:	462e      	mov	r6, r5
  4084e8:	e728      	b.n	40833c <_realloc_r+0xe4>
  4084ea:	4629      	mov	r1, r5
  4084ec:	f7ff fe50 	bl	408190 <memmove>
  4084f0:	e6ff      	b.n	4082f2 <_realloc_r+0x9a>
  4084f2:	4629      	mov	r1, r5
  4084f4:	4630      	mov	r0, r6
  4084f6:	461c      	mov	r4, r3
  4084f8:	46d1      	mov	r9, sl
  4084fa:	f7ff fe49 	bl	408190 <memmove>
  4084fe:	e70b      	b.n	408318 <_realloc_r+0xc0>
  408500:	68ab      	ldr	r3, [r5, #8]
  408502:	6083      	str	r3, [r0, #8]
  408504:	68eb      	ldr	r3, [r5, #12]
  408506:	60c3      	str	r3, [r0, #12]
  408508:	2a24      	cmp	r2, #36	; 0x24
  40850a:	d017      	beq.n	40853c <_realloc_r+0x2e4>
  40850c:	f100 0310 	add.w	r3, r0, #16
  408510:	f105 0210 	add.w	r2, r5, #16
  408514:	e6e7      	b.n	4082e6 <_realloc_r+0x8e>
  408516:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40851a:	f023 0303 	bic.w	r3, r3, #3
  40851e:	441c      	add	r4, r3
  408520:	462e      	mov	r6, r5
  408522:	e6f9      	b.n	408318 <_realloc_r+0xc0>
  408524:	68a9      	ldr	r1, [r5, #8]
  408526:	f8ca 1010 	str.w	r1, [sl, #16]
  40852a:	68e9      	ldr	r1, [r5, #12]
  40852c:	f8ca 1014 	str.w	r1, [sl, #20]
  408530:	2a24      	cmp	r2, #36	; 0x24
  408532:	d00c      	beq.n	40854e <_realloc_r+0x2f6>
  408534:	3510      	adds	r5, #16
  408536:	f10a 0218 	add.w	r2, sl, #24
  40853a:	e7b9      	b.n	4084b0 <_realloc_r+0x258>
  40853c:	692b      	ldr	r3, [r5, #16]
  40853e:	6103      	str	r3, [r0, #16]
  408540:	696b      	ldr	r3, [r5, #20]
  408542:	6143      	str	r3, [r0, #20]
  408544:	f105 0218 	add.w	r2, r5, #24
  408548:	f100 0318 	add.w	r3, r0, #24
  40854c:	e6cb      	b.n	4082e6 <_realloc_r+0x8e>
  40854e:	692a      	ldr	r2, [r5, #16]
  408550:	f8ca 2018 	str.w	r2, [sl, #24]
  408554:	696a      	ldr	r2, [r5, #20]
  408556:	f8ca 201c 	str.w	r2, [sl, #28]
  40855a:	3518      	adds	r5, #24
  40855c:	f10a 0220 	add.w	r2, sl, #32
  408560:	e7a6      	b.n	4084b0 <_realloc_r+0x258>
  408562:	4632      	mov	r2, r6
  408564:	e77f      	b.n	408466 <_realloc_r+0x20e>
  408566:	4629      	mov	r1, r5
  408568:	4630      	mov	r0, r6
  40856a:	9301      	str	r3, [sp, #4]
  40856c:	f7ff fe10 	bl	408190 <memmove>
  408570:	9b01      	ldr	r3, [sp, #4]
  408572:	e77e      	b.n	408472 <_realloc_r+0x21a>
  408574:	68a9      	ldr	r1, [r5, #8]
  408576:	f8ca 1010 	str.w	r1, [sl, #16]
  40857a:	68e9      	ldr	r1, [r5, #12]
  40857c:	f8ca 1014 	str.w	r1, [sl, #20]
  408580:	2a24      	cmp	r2, #36	; 0x24
  408582:	d003      	beq.n	40858c <_realloc_r+0x334>
  408584:	3510      	adds	r5, #16
  408586:	f10a 0218 	add.w	r2, sl, #24
  40858a:	e76c      	b.n	408466 <_realloc_r+0x20e>
  40858c:	692a      	ldr	r2, [r5, #16]
  40858e:	f8ca 2018 	str.w	r2, [sl, #24]
  408592:	696a      	ldr	r2, [r5, #20]
  408594:	f8ca 201c 	str.w	r2, [sl, #28]
  408598:	3518      	adds	r5, #24
  40859a:	f10a 0220 	add.w	r2, sl, #32
  40859e:	e762      	b.n	408466 <_realloc_r+0x20e>
  4085a0:	204005e0 	.word	0x204005e0

004085a4 <__sread>:
  4085a4:	b510      	push	{r4, lr}
  4085a6:	460c      	mov	r4, r1
  4085a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4085ac:	f000 f9f6 	bl	40899c <_read_r>
  4085b0:	2800      	cmp	r0, #0
  4085b2:	db03      	blt.n	4085bc <__sread+0x18>
  4085b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4085b6:	4403      	add	r3, r0
  4085b8:	6523      	str	r3, [r4, #80]	; 0x50
  4085ba:	bd10      	pop	{r4, pc}
  4085bc:	89a3      	ldrh	r3, [r4, #12]
  4085be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4085c2:	81a3      	strh	r3, [r4, #12]
  4085c4:	bd10      	pop	{r4, pc}
  4085c6:	bf00      	nop

004085c8 <__swrite>:
  4085c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4085cc:	4616      	mov	r6, r2
  4085ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4085d2:	461f      	mov	r7, r3
  4085d4:	05d3      	lsls	r3, r2, #23
  4085d6:	460c      	mov	r4, r1
  4085d8:	4605      	mov	r5, r0
  4085da:	d507      	bpl.n	4085ec <__swrite+0x24>
  4085dc:	2200      	movs	r2, #0
  4085de:	2302      	movs	r3, #2
  4085e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4085e4:	f000 f9c4 	bl	408970 <_lseek_r>
  4085e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4085ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4085f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4085f4:	81a2      	strh	r2, [r4, #12]
  4085f6:	463b      	mov	r3, r7
  4085f8:	4632      	mov	r2, r6
  4085fa:	4628      	mov	r0, r5
  4085fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408600:	f000 b8a4 	b.w	40874c <_write_r>

00408604 <__sseek>:
  408604:	b510      	push	{r4, lr}
  408606:	460c      	mov	r4, r1
  408608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40860c:	f000 f9b0 	bl	408970 <_lseek_r>
  408610:	89a3      	ldrh	r3, [r4, #12]
  408612:	1c42      	adds	r2, r0, #1
  408614:	bf0e      	itee	eq
  408616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40861a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40861e:	6520      	strne	r0, [r4, #80]	; 0x50
  408620:	81a3      	strh	r3, [r4, #12]
  408622:	bd10      	pop	{r4, pc}

00408624 <__sclose>:
  408624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408628:	f000 b908 	b.w	40883c <_close_r>

0040862c <__swbuf_r>:
  40862c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40862e:	460d      	mov	r5, r1
  408630:	4614      	mov	r4, r2
  408632:	4606      	mov	r6, r0
  408634:	b110      	cbz	r0, 40863c <__swbuf_r+0x10>
  408636:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408638:	2b00      	cmp	r3, #0
  40863a:	d04b      	beq.n	4086d4 <__swbuf_r+0xa8>
  40863c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408640:	69a3      	ldr	r3, [r4, #24]
  408642:	60a3      	str	r3, [r4, #8]
  408644:	b291      	uxth	r1, r2
  408646:	0708      	lsls	r0, r1, #28
  408648:	d539      	bpl.n	4086be <__swbuf_r+0x92>
  40864a:	6923      	ldr	r3, [r4, #16]
  40864c:	2b00      	cmp	r3, #0
  40864e:	d036      	beq.n	4086be <__swbuf_r+0x92>
  408650:	b2ed      	uxtb	r5, r5
  408652:	0489      	lsls	r1, r1, #18
  408654:	462f      	mov	r7, r5
  408656:	d515      	bpl.n	408684 <__swbuf_r+0x58>
  408658:	6822      	ldr	r2, [r4, #0]
  40865a:	6961      	ldr	r1, [r4, #20]
  40865c:	1ad3      	subs	r3, r2, r3
  40865e:	428b      	cmp	r3, r1
  408660:	da1c      	bge.n	40869c <__swbuf_r+0x70>
  408662:	3301      	adds	r3, #1
  408664:	68a1      	ldr	r1, [r4, #8]
  408666:	1c50      	adds	r0, r2, #1
  408668:	3901      	subs	r1, #1
  40866a:	60a1      	str	r1, [r4, #8]
  40866c:	6020      	str	r0, [r4, #0]
  40866e:	7015      	strb	r5, [r2, #0]
  408670:	6962      	ldr	r2, [r4, #20]
  408672:	429a      	cmp	r2, r3
  408674:	d01a      	beq.n	4086ac <__swbuf_r+0x80>
  408676:	89a3      	ldrh	r3, [r4, #12]
  408678:	07db      	lsls	r3, r3, #31
  40867a:	d501      	bpl.n	408680 <__swbuf_r+0x54>
  40867c:	2d0a      	cmp	r5, #10
  40867e:	d015      	beq.n	4086ac <__swbuf_r+0x80>
  408680:	4638      	mov	r0, r7
  408682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408684:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408686:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40868a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40868e:	81a2      	strh	r2, [r4, #12]
  408690:	6822      	ldr	r2, [r4, #0]
  408692:	6661      	str	r1, [r4, #100]	; 0x64
  408694:	6961      	ldr	r1, [r4, #20]
  408696:	1ad3      	subs	r3, r2, r3
  408698:	428b      	cmp	r3, r1
  40869a:	dbe2      	blt.n	408662 <__swbuf_r+0x36>
  40869c:	4621      	mov	r1, r4
  40869e:	4630      	mov	r0, r6
  4086a0:	f7ff f87a 	bl	407798 <_fflush_r>
  4086a4:	b940      	cbnz	r0, 4086b8 <__swbuf_r+0x8c>
  4086a6:	6822      	ldr	r2, [r4, #0]
  4086a8:	2301      	movs	r3, #1
  4086aa:	e7db      	b.n	408664 <__swbuf_r+0x38>
  4086ac:	4621      	mov	r1, r4
  4086ae:	4630      	mov	r0, r6
  4086b0:	f7ff f872 	bl	407798 <_fflush_r>
  4086b4:	2800      	cmp	r0, #0
  4086b6:	d0e3      	beq.n	408680 <__swbuf_r+0x54>
  4086b8:	f04f 37ff 	mov.w	r7, #4294967295
  4086bc:	e7e0      	b.n	408680 <__swbuf_r+0x54>
  4086be:	4621      	mov	r1, r4
  4086c0:	4630      	mov	r0, r6
  4086c2:	f7fe ff55 	bl	407570 <__swsetup_r>
  4086c6:	2800      	cmp	r0, #0
  4086c8:	d1f6      	bne.n	4086b8 <__swbuf_r+0x8c>
  4086ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4086ce:	6923      	ldr	r3, [r4, #16]
  4086d0:	b291      	uxth	r1, r2
  4086d2:	e7bd      	b.n	408650 <__swbuf_r+0x24>
  4086d4:	f7ff f8b8 	bl	407848 <__sinit>
  4086d8:	e7b0      	b.n	40863c <__swbuf_r+0x10>
  4086da:	bf00      	nop

004086dc <_wcrtomb_r>:
  4086dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4086de:	4606      	mov	r6, r0
  4086e0:	b085      	sub	sp, #20
  4086e2:	461f      	mov	r7, r3
  4086e4:	b189      	cbz	r1, 40870a <_wcrtomb_r+0x2e>
  4086e6:	4c10      	ldr	r4, [pc, #64]	; (408728 <_wcrtomb_r+0x4c>)
  4086e8:	4d10      	ldr	r5, [pc, #64]	; (40872c <_wcrtomb_r+0x50>)
  4086ea:	6824      	ldr	r4, [r4, #0]
  4086ec:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4086ee:	2c00      	cmp	r4, #0
  4086f0:	bf08      	it	eq
  4086f2:	462c      	moveq	r4, r5
  4086f4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4086f8:	47a0      	blx	r4
  4086fa:	1c43      	adds	r3, r0, #1
  4086fc:	d103      	bne.n	408706 <_wcrtomb_r+0x2a>
  4086fe:	2200      	movs	r2, #0
  408700:	238a      	movs	r3, #138	; 0x8a
  408702:	603a      	str	r2, [r7, #0]
  408704:	6033      	str	r3, [r6, #0]
  408706:	b005      	add	sp, #20
  408708:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40870a:	460c      	mov	r4, r1
  40870c:	4906      	ldr	r1, [pc, #24]	; (408728 <_wcrtomb_r+0x4c>)
  40870e:	4a07      	ldr	r2, [pc, #28]	; (40872c <_wcrtomb_r+0x50>)
  408710:	6809      	ldr	r1, [r1, #0]
  408712:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408714:	2900      	cmp	r1, #0
  408716:	bf08      	it	eq
  408718:	4611      	moveq	r1, r2
  40871a:	4622      	mov	r2, r4
  40871c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  408720:	a901      	add	r1, sp, #4
  408722:	47a0      	blx	r4
  408724:	e7e9      	b.n	4086fa <_wcrtomb_r+0x1e>
  408726:	bf00      	nop
  408728:	204001b0 	.word	0x204001b0
  40872c:	204009f4 	.word	0x204009f4

00408730 <__ascii_wctomb>:
  408730:	b121      	cbz	r1, 40873c <__ascii_wctomb+0xc>
  408732:	2aff      	cmp	r2, #255	; 0xff
  408734:	d804      	bhi.n	408740 <__ascii_wctomb+0x10>
  408736:	700a      	strb	r2, [r1, #0]
  408738:	2001      	movs	r0, #1
  40873a:	4770      	bx	lr
  40873c:	4608      	mov	r0, r1
  40873e:	4770      	bx	lr
  408740:	238a      	movs	r3, #138	; 0x8a
  408742:	6003      	str	r3, [r0, #0]
  408744:	f04f 30ff 	mov.w	r0, #4294967295
  408748:	4770      	bx	lr
  40874a:	bf00      	nop

0040874c <_write_r>:
  40874c:	b570      	push	{r4, r5, r6, lr}
  40874e:	460d      	mov	r5, r1
  408750:	4c08      	ldr	r4, [pc, #32]	; (408774 <_write_r+0x28>)
  408752:	4611      	mov	r1, r2
  408754:	4606      	mov	r6, r0
  408756:	461a      	mov	r2, r3
  408758:	4628      	mov	r0, r5
  40875a:	2300      	movs	r3, #0
  40875c:	6023      	str	r3, [r4, #0]
  40875e:	f7f8 f9a1 	bl	400aa4 <_write>
  408762:	1c43      	adds	r3, r0, #1
  408764:	d000      	beq.n	408768 <_write_r+0x1c>
  408766:	bd70      	pop	{r4, r5, r6, pc}
  408768:	6823      	ldr	r3, [r4, #0]
  40876a:	2b00      	cmp	r3, #0
  40876c:	d0fb      	beq.n	408766 <_write_r+0x1a>
  40876e:	6033      	str	r3, [r6, #0]
  408770:	bd70      	pop	{r4, r5, r6, pc}
  408772:	bf00      	nop
  408774:	2040ca74 	.word	0x2040ca74

00408778 <__register_exitproc>:
  408778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40877c:	4d2c      	ldr	r5, [pc, #176]	; (408830 <__register_exitproc+0xb8>)
  40877e:	4606      	mov	r6, r0
  408780:	6828      	ldr	r0, [r5, #0]
  408782:	4698      	mov	r8, r3
  408784:	460f      	mov	r7, r1
  408786:	4691      	mov	r9, r2
  408788:	f7ff fc1e 	bl	407fc8 <__retarget_lock_acquire_recursive>
  40878c:	4b29      	ldr	r3, [pc, #164]	; (408834 <__register_exitproc+0xbc>)
  40878e:	681c      	ldr	r4, [r3, #0]
  408790:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408794:	2b00      	cmp	r3, #0
  408796:	d03e      	beq.n	408816 <__register_exitproc+0x9e>
  408798:	685a      	ldr	r2, [r3, #4]
  40879a:	2a1f      	cmp	r2, #31
  40879c:	dc1c      	bgt.n	4087d8 <__register_exitproc+0x60>
  40879e:	f102 0e01 	add.w	lr, r2, #1
  4087a2:	b176      	cbz	r6, 4087c2 <__register_exitproc+0x4a>
  4087a4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4087a8:	2401      	movs	r4, #1
  4087aa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4087ae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4087b2:	4094      	lsls	r4, r2
  4087b4:	4320      	orrs	r0, r4
  4087b6:	2e02      	cmp	r6, #2
  4087b8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4087bc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4087c0:	d023      	beq.n	40880a <__register_exitproc+0x92>
  4087c2:	3202      	adds	r2, #2
  4087c4:	f8c3 e004 	str.w	lr, [r3, #4]
  4087c8:	6828      	ldr	r0, [r5, #0]
  4087ca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4087ce:	f7ff fbfd 	bl	407fcc <__retarget_lock_release_recursive>
  4087d2:	2000      	movs	r0, #0
  4087d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4087d8:	4b17      	ldr	r3, [pc, #92]	; (408838 <__register_exitproc+0xc0>)
  4087da:	b30b      	cbz	r3, 408820 <__register_exitproc+0xa8>
  4087dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4087e0:	f7fd fafc 	bl	405ddc <malloc>
  4087e4:	4603      	mov	r3, r0
  4087e6:	b1d8      	cbz	r0, 408820 <__register_exitproc+0xa8>
  4087e8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4087ec:	6002      	str	r2, [r0, #0]
  4087ee:	2100      	movs	r1, #0
  4087f0:	6041      	str	r1, [r0, #4]
  4087f2:	460a      	mov	r2, r1
  4087f4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4087f8:	f04f 0e01 	mov.w	lr, #1
  4087fc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  408800:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408804:	2e00      	cmp	r6, #0
  408806:	d0dc      	beq.n	4087c2 <__register_exitproc+0x4a>
  408808:	e7cc      	b.n	4087a4 <__register_exitproc+0x2c>
  40880a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40880e:	430c      	orrs	r4, r1
  408810:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408814:	e7d5      	b.n	4087c2 <__register_exitproc+0x4a>
  408816:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40881a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40881e:	e7bb      	b.n	408798 <__register_exitproc+0x20>
  408820:	6828      	ldr	r0, [r5, #0]
  408822:	f7ff fbd3 	bl	407fcc <__retarget_lock_release_recursive>
  408826:	f04f 30ff 	mov.w	r0, #4294967295
  40882a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40882e:	bf00      	nop
  408830:	204009f0 	.word	0x204009f0
  408834:	0041b954 	.word	0x0041b954
  408838:	00405ddd 	.word	0x00405ddd

0040883c <_close_r>:
  40883c:	b538      	push	{r3, r4, r5, lr}
  40883e:	4c07      	ldr	r4, [pc, #28]	; (40885c <_close_r+0x20>)
  408840:	2300      	movs	r3, #0
  408842:	4605      	mov	r5, r0
  408844:	4608      	mov	r0, r1
  408846:	6023      	str	r3, [r4, #0]
  408848:	f7f9 fc0c 	bl	402064 <_close>
  40884c:	1c43      	adds	r3, r0, #1
  40884e:	d000      	beq.n	408852 <_close_r+0x16>
  408850:	bd38      	pop	{r3, r4, r5, pc}
  408852:	6823      	ldr	r3, [r4, #0]
  408854:	2b00      	cmp	r3, #0
  408856:	d0fb      	beq.n	408850 <_close_r+0x14>
  408858:	602b      	str	r3, [r5, #0]
  40885a:	bd38      	pop	{r3, r4, r5, pc}
  40885c:	2040ca74 	.word	0x2040ca74

00408860 <_fclose_r>:
  408860:	b570      	push	{r4, r5, r6, lr}
  408862:	b159      	cbz	r1, 40887c <_fclose_r+0x1c>
  408864:	4605      	mov	r5, r0
  408866:	460c      	mov	r4, r1
  408868:	b110      	cbz	r0, 408870 <_fclose_r+0x10>
  40886a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40886c:	2b00      	cmp	r3, #0
  40886e:	d03c      	beq.n	4088ea <_fclose_r+0x8a>
  408870:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408872:	07d8      	lsls	r0, r3, #31
  408874:	d505      	bpl.n	408882 <_fclose_r+0x22>
  408876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40887a:	b92b      	cbnz	r3, 408888 <_fclose_r+0x28>
  40887c:	2600      	movs	r6, #0
  40887e:	4630      	mov	r0, r6
  408880:	bd70      	pop	{r4, r5, r6, pc}
  408882:	89a3      	ldrh	r3, [r4, #12]
  408884:	0599      	lsls	r1, r3, #22
  408886:	d53c      	bpl.n	408902 <_fclose_r+0xa2>
  408888:	4621      	mov	r1, r4
  40888a:	4628      	mov	r0, r5
  40888c:	f7fe fee4 	bl	407658 <__sflush_r>
  408890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408892:	4606      	mov	r6, r0
  408894:	b133      	cbz	r3, 4088a4 <_fclose_r+0x44>
  408896:	69e1      	ldr	r1, [r4, #28]
  408898:	4628      	mov	r0, r5
  40889a:	4798      	blx	r3
  40889c:	2800      	cmp	r0, #0
  40889e:	bfb8      	it	lt
  4088a0:	f04f 36ff 	movlt.w	r6, #4294967295
  4088a4:	89a3      	ldrh	r3, [r4, #12]
  4088a6:	061a      	lsls	r2, r3, #24
  4088a8:	d422      	bmi.n	4088f0 <_fclose_r+0x90>
  4088aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4088ac:	b141      	cbz	r1, 4088c0 <_fclose_r+0x60>
  4088ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4088b2:	4299      	cmp	r1, r3
  4088b4:	d002      	beq.n	4088bc <_fclose_r+0x5c>
  4088b6:	4628      	mov	r0, r5
  4088b8:	f7ff f8ec 	bl	407a94 <_free_r>
  4088bc:	2300      	movs	r3, #0
  4088be:	6323      	str	r3, [r4, #48]	; 0x30
  4088c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4088c2:	b121      	cbz	r1, 4088ce <_fclose_r+0x6e>
  4088c4:	4628      	mov	r0, r5
  4088c6:	f7ff f8e5 	bl	407a94 <_free_r>
  4088ca:	2300      	movs	r3, #0
  4088cc:	6463      	str	r3, [r4, #68]	; 0x44
  4088ce:	f7fe ffe7 	bl	4078a0 <__sfp_lock_acquire>
  4088d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4088d4:	2200      	movs	r2, #0
  4088d6:	07db      	lsls	r3, r3, #31
  4088d8:	81a2      	strh	r2, [r4, #12]
  4088da:	d50e      	bpl.n	4088fa <_fclose_r+0x9a>
  4088dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4088de:	f7ff fb71 	bl	407fc4 <__retarget_lock_close_recursive>
  4088e2:	f7fe ffe3 	bl	4078ac <__sfp_lock_release>
  4088e6:	4630      	mov	r0, r6
  4088e8:	bd70      	pop	{r4, r5, r6, pc}
  4088ea:	f7fe ffad 	bl	407848 <__sinit>
  4088ee:	e7bf      	b.n	408870 <_fclose_r+0x10>
  4088f0:	6921      	ldr	r1, [r4, #16]
  4088f2:	4628      	mov	r0, r5
  4088f4:	f7ff f8ce 	bl	407a94 <_free_r>
  4088f8:	e7d7      	b.n	4088aa <_fclose_r+0x4a>
  4088fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4088fc:	f7ff fb66 	bl	407fcc <__retarget_lock_release_recursive>
  408900:	e7ec      	b.n	4088dc <_fclose_r+0x7c>
  408902:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408904:	f7ff fb60 	bl	407fc8 <__retarget_lock_acquire_recursive>
  408908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40890c:	2b00      	cmp	r3, #0
  40890e:	d1bb      	bne.n	408888 <_fclose_r+0x28>
  408910:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408912:	f016 0601 	ands.w	r6, r6, #1
  408916:	d1b1      	bne.n	40887c <_fclose_r+0x1c>
  408918:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40891a:	f7ff fb57 	bl	407fcc <__retarget_lock_release_recursive>
  40891e:	4630      	mov	r0, r6
  408920:	bd70      	pop	{r4, r5, r6, pc}
  408922:	bf00      	nop

00408924 <_fstat_r>:
  408924:	b538      	push	{r3, r4, r5, lr}
  408926:	460b      	mov	r3, r1
  408928:	4c07      	ldr	r4, [pc, #28]	; (408948 <_fstat_r+0x24>)
  40892a:	4605      	mov	r5, r0
  40892c:	4611      	mov	r1, r2
  40892e:	4618      	mov	r0, r3
  408930:	2300      	movs	r3, #0
  408932:	6023      	str	r3, [r4, #0]
  408934:	f7f9 fb99 	bl	40206a <_fstat>
  408938:	1c43      	adds	r3, r0, #1
  40893a:	d000      	beq.n	40893e <_fstat_r+0x1a>
  40893c:	bd38      	pop	{r3, r4, r5, pc}
  40893e:	6823      	ldr	r3, [r4, #0]
  408940:	2b00      	cmp	r3, #0
  408942:	d0fb      	beq.n	40893c <_fstat_r+0x18>
  408944:	602b      	str	r3, [r5, #0]
  408946:	bd38      	pop	{r3, r4, r5, pc}
  408948:	2040ca74 	.word	0x2040ca74

0040894c <_isatty_r>:
  40894c:	b538      	push	{r3, r4, r5, lr}
  40894e:	4c07      	ldr	r4, [pc, #28]	; (40896c <_isatty_r+0x20>)
  408950:	2300      	movs	r3, #0
  408952:	4605      	mov	r5, r0
  408954:	4608      	mov	r0, r1
  408956:	6023      	str	r3, [r4, #0]
  408958:	f7f9 fb8c 	bl	402074 <_isatty>
  40895c:	1c43      	adds	r3, r0, #1
  40895e:	d000      	beq.n	408962 <_isatty_r+0x16>
  408960:	bd38      	pop	{r3, r4, r5, pc}
  408962:	6823      	ldr	r3, [r4, #0]
  408964:	2b00      	cmp	r3, #0
  408966:	d0fb      	beq.n	408960 <_isatty_r+0x14>
  408968:	602b      	str	r3, [r5, #0]
  40896a:	bd38      	pop	{r3, r4, r5, pc}
  40896c:	2040ca74 	.word	0x2040ca74

00408970 <_lseek_r>:
  408970:	b570      	push	{r4, r5, r6, lr}
  408972:	460d      	mov	r5, r1
  408974:	4c08      	ldr	r4, [pc, #32]	; (408998 <_lseek_r+0x28>)
  408976:	4611      	mov	r1, r2
  408978:	4606      	mov	r6, r0
  40897a:	461a      	mov	r2, r3
  40897c:	4628      	mov	r0, r5
  40897e:	2300      	movs	r3, #0
  408980:	6023      	str	r3, [r4, #0]
  408982:	f7f9 fb79 	bl	402078 <_lseek>
  408986:	1c43      	adds	r3, r0, #1
  408988:	d000      	beq.n	40898c <_lseek_r+0x1c>
  40898a:	bd70      	pop	{r4, r5, r6, pc}
  40898c:	6823      	ldr	r3, [r4, #0]
  40898e:	2b00      	cmp	r3, #0
  408990:	d0fb      	beq.n	40898a <_lseek_r+0x1a>
  408992:	6033      	str	r3, [r6, #0]
  408994:	bd70      	pop	{r4, r5, r6, pc}
  408996:	bf00      	nop
  408998:	2040ca74 	.word	0x2040ca74

0040899c <_read_r>:
  40899c:	b570      	push	{r4, r5, r6, lr}
  40899e:	460d      	mov	r5, r1
  4089a0:	4c08      	ldr	r4, [pc, #32]	; (4089c4 <_read_r+0x28>)
  4089a2:	4611      	mov	r1, r2
  4089a4:	4606      	mov	r6, r0
  4089a6:	461a      	mov	r2, r3
  4089a8:	4628      	mov	r0, r5
  4089aa:	2300      	movs	r3, #0
  4089ac:	6023      	str	r3, [r4, #0]
  4089ae:	f7f8 f85b 	bl	400a68 <_read>
  4089b2:	1c43      	adds	r3, r0, #1
  4089b4:	d000      	beq.n	4089b8 <_read_r+0x1c>
  4089b6:	bd70      	pop	{r4, r5, r6, pc}
  4089b8:	6823      	ldr	r3, [r4, #0]
  4089ba:	2b00      	cmp	r3, #0
  4089bc:	d0fb      	beq.n	4089b6 <_read_r+0x1a>
  4089be:	6033      	str	r3, [r6, #0]
  4089c0:	bd70      	pop	{r4, r5, r6, pc}
  4089c2:	bf00      	nop
  4089c4:	2040ca74 	.word	0x2040ca74

004089c8 <__aeabi_uldivmod>:
  4089c8:	b953      	cbnz	r3, 4089e0 <__aeabi_uldivmod+0x18>
  4089ca:	b94a      	cbnz	r2, 4089e0 <__aeabi_uldivmod+0x18>
  4089cc:	2900      	cmp	r1, #0
  4089ce:	bf08      	it	eq
  4089d0:	2800      	cmpeq	r0, #0
  4089d2:	bf1c      	itt	ne
  4089d4:	f04f 31ff 	movne.w	r1, #4294967295
  4089d8:	f04f 30ff 	movne.w	r0, #4294967295
  4089dc:	f000 b97a 	b.w	408cd4 <__aeabi_idiv0>
  4089e0:	f1ad 0c08 	sub.w	ip, sp, #8
  4089e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4089e8:	f000 f806 	bl	4089f8 <__udivmoddi4>
  4089ec:	f8dd e004 	ldr.w	lr, [sp, #4]
  4089f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4089f4:	b004      	add	sp, #16
  4089f6:	4770      	bx	lr

004089f8 <__udivmoddi4>:
  4089f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4089fc:	468c      	mov	ip, r1
  4089fe:	460d      	mov	r5, r1
  408a00:	4604      	mov	r4, r0
  408a02:	9e08      	ldr	r6, [sp, #32]
  408a04:	2b00      	cmp	r3, #0
  408a06:	d151      	bne.n	408aac <__udivmoddi4+0xb4>
  408a08:	428a      	cmp	r2, r1
  408a0a:	4617      	mov	r7, r2
  408a0c:	d96d      	bls.n	408aea <__udivmoddi4+0xf2>
  408a0e:	fab2 fe82 	clz	lr, r2
  408a12:	f1be 0f00 	cmp.w	lr, #0
  408a16:	d00b      	beq.n	408a30 <__udivmoddi4+0x38>
  408a18:	f1ce 0c20 	rsb	ip, lr, #32
  408a1c:	fa01 f50e 	lsl.w	r5, r1, lr
  408a20:	fa20 fc0c 	lsr.w	ip, r0, ip
  408a24:	fa02 f70e 	lsl.w	r7, r2, lr
  408a28:	ea4c 0c05 	orr.w	ip, ip, r5
  408a2c:	fa00 f40e 	lsl.w	r4, r0, lr
  408a30:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408a34:	0c25      	lsrs	r5, r4, #16
  408a36:	fbbc f8fa 	udiv	r8, ip, sl
  408a3a:	fa1f f987 	uxth.w	r9, r7
  408a3e:	fb0a cc18 	mls	ip, sl, r8, ip
  408a42:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408a46:	fb08 f309 	mul.w	r3, r8, r9
  408a4a:	42ab      	cmp	r3, r5
  408a4c:	d90a      	bls.n	408a64 <__udivmoddi4+0x6c>
  408a4e:	19ed      	adds	r5, r5, r7
  408a50:	f108 32ff 	add.w	r2, r8, #4294967295
  408a54:	f080 8123 	bcs.w	408c9e <__udivmoddi4+0x2a6>
  408a58:	42ab      	cmp	r3, r5
  408a5a:	f240 8120 	bls.w	408c9e <__udivmoddi4+0x2a6>
  408a5e:	f1a8 0802 	sub.w	r8, r8, #2
  408a62:	443d      	add	r5, r7
  408a64:	1aed      	subs	r5, r5, r3
  408a66:	b2a4      	uxth	r4, r4
  408a68:	fbb5 f0fa 	udiv	r0, r5, sl
  408a6c:	fb0a 5510 	mls	r5, sl, r0, r5
  408a70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408a74:	fb00 f909 	mul.w	r9, r0, r9
  408a78:	45a1      	cmp	r9, r4
  408a7a:	d909      	bls.n	408a90 <__udivmoddi4+0x98>
  408a7c:	19e4      	adds	r4, r4, r7
  408a7e:	f100 33ff 	add.w	r3, r0, #4294967295
  408a82:	f080 810a 	bcs.w	408c9a <__udivmoddi4+0x2a2>
  408a86:	45a1      	cmp	r9, r4
  408a88:	f240 8107 	bls.w	408c9a <__udivmoddi4+0x2a2>
  408a8c:	3802      	subs	r0, #2
  408a8e:	443c      	add	r4, r7
  408a90:	eba4 0409 	sub.w	r4, r4, r9
  408a94:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408a98:	2100      	movs	r1, #0
  408a9a:	2e00      	cmp	r6, #0
  408a9c:	d061      	beq.n	408b62 <__udivmoddi4+0x16a>
  408a9e:	fa24 f40e 	lsr.w	r4, r4, lr
  408aa2:	2300      	movs	r3, #0
  408aa4:	6034      	str	r4, [r6, #0]
  408aa6:	6073      	str	r3, [r6, #4]
  408aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408aac:	428b      	cmp	r3, r1
  408aae:	d907      	bls.n	408ac0 <__udivmoddi4+0xc8>
  408ab0:	2e00      	cmp	r6, #0
  408ab2:	d054      	beq.n	408b5e <__udivmoddi4+0x166>
  408ab4:	2100      	movs	r1, #0
  408ab6:	e886 0021 	stmia.w	r6, {r0, r5}
  408aba:	4608      	mov	r0, r1
  408abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ac0:	fab3 f183 	clz	r1, r3
  408ac4:	2900      	cmp	r1, #0
  408ac6:	f040 808e 	bne.w	408be6 <__udivmoddi4+0x1ee>
  408aca:	42ab      	cmp	r3, r5
  408acc:	d302      	bcc.n	408ad4 <__udivmoddi4+0xdc>
  408ace:	4282      	cmp	r2, r0
  408ad0:	f200 80fa 	bhi.w	408cc8 <__udivmoddi4+0x2d0>
  408ad4:	1a84      	subs	r4, r0, r2
  408ad6:	eb65 0503 	sbc.w	r5, r5, r3
  408ada:	2001      	movs	r0, #1
  408adc:	46ac      	mov	ip, r5
  408ade:	2e00      	cmp	r6, #0
  408ae0:	d03f      	beq.n	408b62 <__udivmoddi4+0x16a>
  408ae2:	e886 1010 	stmia.w	r6, {r4, ip}
  408ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408aea:	b912      	cbnz	r2, 408af2 <__udivmoddi4+0xfa>
  408aec:	2701      	movs	r7, #1
  408aee:	fbb7 f7f2 	udiv	r7, r7, r2
  408af2:	fab7 fe87 	clz	lr, r7
  408af6:	f1be 0f00 	cmp.w	lr, #0
  408afa:	d134      	bne.n	408b66 <__udivmoddi4+0x16e>
  408afc:	1beb      	subs	r3, r5, r7
  408afe:	0c3a      	lsrs	r2, r7, #16
  408b00:	fa1f fc87 	uxth.w	ip, r7
  408b04:	2101      	movs	r1, #1
  408b06:	fbb3 f8f2 	udiv	r8, r3, r2
  408b0a:	0c25      	lsrs	r5, r4, #16
  408b0c:	fb02 3318 	mls	r3, r2, r8, r3
  408b10:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408b14:	fb0c f308 	mul.w	r3, ip, r8
  408b18:	42ab      	cmp	r3, r5
  408b1a:	d907      	bls.n	408b2c <__udivmoddi4+0x134>
  408b1c:	19ed      	adds	r5, r5, r7
  408b1e:	f108 30ff 	add.w	r0, r8, #4294967295
  408b22:	d202      	bcs.n	408b2a <__udivmoddi4+0x132>
  408b24:	42ab      	cmp	r3, r5
  408b26:	f200 80d1 	bhi.w	408ccc <__udivmoddi4+0x2d4>
  408b2a:	4680      	mov	r8, r0
  408b2c:	1aed      	subs	r5, r5, r3
  408b2e:	b2a3      	uxth	r3, r4
  408b30:	fbb5 f0f2 	udiv	r0, r5, r2
  408b34:	fb02 5510 	mls	r5, r2, r0, r5
  408b38:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408b3c:	fb0c fc00 	mul.w	ip, ip, r0
  408b40:	45a4      	cmp	ip, r4
  408b42:	d907      	bls.n	408b54 <__udivmoddi4+0x15c>
  408b44:	19e4      	adds	r4, r4, r7
  408b46:	f100 33ff 	add.w	r3, r0, #4294967295
  408b4a:	d202      	bcs.n	408b52 <__udivmoddi4+0x15a>
  408b4c:	45a4      	cmp	ip, r4
  408b4e:	f200 80b8 	bhi.w	408cc2 <__udivmoddi4+0x2ca>
  408b52:	4618      	mov	r0, r3
  408b54:	eba4 040c 	sub.w	r4, r4, ip
  408b58:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408b5c:	e79d      	b.n	408a9a <__udivmoddi4+0xa2>
  408b5e:	4631      	mov	r1, r6
  408b60:	4630      	mov	r0, r6
  408b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b66:	f1ce 0420 	rsb	r4, lr, #32
  408b6a:	fa05 f30e 	lsl.w	r3, r5, lr
  408b6e:	fa07 f70e 	lsl.w	r7, r7, lr
  408b72:	fa20 f804 	lsr.w	r8, r0, r4
  408b76:	0c3a      	lsrs	r2, r7, #16
  408b78:	fa25 f404 	lsr.w	r4, r5, r4
  408b7c:	ea48 0803 	orr.w	r8, r8, r3
  408b80:	fbb4 f1f2 	udiv	r1, r4, r2
  408b84:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408b88:	fb02 4411 	mls	r4, r2, r1, r4
  408b8c:	fa1f fc87 	uxth.w	ip, r7
  408b90:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408b94:	fb01 f30c 	mul.w	r3, r1, ip
  408b98:	42ab      	cmp	r3, r5
  408b9a:	fa00 f40e 	lsl.w	r4, r0, lr
  408b9e:	d909      	bls.n	408bb4 <__udivmoddi4+0x1bc>
  408ba0:	19ed      	adds	r5, r5, r7
  408ba2:	f101 30ff 	add.w	r0, r1, #4294967295
  408ba6:	f080 808a 	bcs.w	408cbe <__udivmoddi4+0x2c6>
  408baa:	42ab      	cmp	r3, r5
  408bac:	f240 8087 	bls.w	408cbe <__udivmoddi4+0x2c6>
  408bb0:	3902      	subs	r1, #2
  408bb2:	443d      	add	r5, r7
  408bb4:	1aeb      	subs	r3, r5, r3
  408bb6:	fa1f f588 	uxth.w	r5, r8
  408bba:	fbb3 f0f2 	udiv	r0, r3, r2
  408bbe:	fb02 3310 	mls	r3, r2, r0, r3
  408bc2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408bc6:	fb00 f30c 	mul.w	r3, r0, ip
  408bca:	42ab      	cmp	r3, r5
  408bcc:	d907      	bls.n	408bde <__udivmoddi4+0x1e6>
  408bce:	19ed      	adds	r5, r5, r7
  408bd0:	f100 38ff 	add.w	r8, r0, #4294967295
  408bd4:	d26f      	bcs.n	408cb6 <__udivmoddi4+0x2be>
  408bd6:	42ab      	cmp	r3, r5
  408bd8:	d96d      	bls.n	408cb6 <__udivmoddi4+0x2be>
  408bda:	3802      	subs	r0, #2
  408bdc:	443d      	add	r5, r7
  408bde:	1aeb      	subs	r3, r5, r3
  408be0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408be4:	e78f      	b.n	408b06 <__udivmoddi4+0x10e>
  408be6:	f1c1 0720 	rsb	r7, r1, #32
  408bea:	fa22 f807 	lsr.w	r8, r2, r7
  408bee:	408b      	lsls	r3, r1
  408bf0:	fa05 f401 	lsl.w	r4, r5, r1
  408bf4:	ea48 0303 	orr.w	r3, r8, r3
  408bf8:	fa20 fe07 	lsr.w	lr, r0, r7
  408bfc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408c00:	40fd      	lsrs	r5, r7
  408c02:	ea4e 0e04 	orr.w	lr, lr, r4
  408c06:	fbb5 f9fc 	udiv	r9, r5, ip
  408c0a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408c0e:	fb0c 5519 	mls	r5, ip, r9, r5
  408c12:	fa1f f883 	uxth.w	r8, r3
  408c16:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408c1a:	fb09 f408 	mul.w	r4, r9, r8
  408c1e:	42ac      	cmp	r4, r5
  408c20:	fa02 f201 	lsl.w	r2, r2, r1
  408c24:	fa00 fa01 	lsl.w	sl, r0, r1
  408c28:	d908      	bls.n	408c3c <__udivmoddi4+0x244>
  408c2a:	18ed      	adds	r5, r5, r3
  408c2c:	f109 30ff 	add.w	r0, r9, #4294967295
  408c30:	d243      	bcs.n	408cba <__udivmoddi4+0x2c2>
  408c32:	42ac      	cmp	r4, r5
  408c34:	d941      	bls.n	408cba <__udivmoddi4+0x2c2>
  408c36:	f1a9 0902 	sub.w	r9, r9, #2
  408c3a:	441d      	add	r5, r3
  408c3c:	1b2d      	subs	r5, r5, r4
  408c3e:	fa1f fe8e 	uxth.w	lr, lr
  408c42:	fbb5 f0fc 	udiv	r0, r5, ip
  408c46:	fb0c 5510 	mls	r5, ip, r0, r5
  408c4a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  408c4e:	fb00 f808 	mul.w	r8, r0, r8
  408c52:	45a0      	cmp	r8, r4
  408c54:	d907      	bls.n	408c66 <__udivmoddi4+0x26e>
  408c56:	18e4      	adds	r4, r4, r3
  408c58:	f100 35ff 	add.w	r5, r0, #4294967295
  408c5c:	d229      	bcs.n	408cb2 <__udivmoddi4+0x2ba>
  408c5e:	45a0      	cmp	r8, r4
  408c60:	d927      	bls.n	408cb2 <__udivmoddi4+0x2ba>
  408c62:	3802      	subs	r0, #2
  408c64:	441c      	add	r4, r3
  408c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408c6a:	eba4 0408 	sub.w	r4, r4, r8
  408c6e:	fba0 8902 	umull	r8, r9, r0, r2
  408c72:	454c      	cmp	r4, r9
  408c74:	46c6      	mov	lr, r8
  408c76:	464d      	mov	r5, r9
  408c78:	d315      	bcc.n	408ca6 <__udivmoddi4+0x2ae>
  408c7a:	d012      	beq.n	408ca2 <__udivmoddi4+0x2aa>
  408c7c:	b156      	cbz	r6, 408c94 <__udivmoddi4+0x29c>
  408c7e:	ebba 030e 	subs.w	r3, sl, lr
  408c82:	eb64 0405 	sbc.w	r4, r4, r5
  408c86:	fa04 f707 	lsl.w	r7, r4, r7
  408c8a:	40cb      	lsrs	r3, r1
  408c8c:	431f      	orrs	r7, r3
  408c8e:	40cc      	lsrs	r4, r1
  408c90:	6037      	str	r7, [r6, #0]
  408c92:	6074      	str	r4, [r6, #4]
  408c94:	2100      	movs	r1, #0
  408c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408c9a:	4618      	mov	r0, r3
  408c9c:	e6f8      	b.n	408a90 <__udivmoddi4+0x98>
  408c9e:	4690      	mov	r8, r2
  408ca0:	e6e0      	b.n	408a64 <__udivmoddi4+0x6c>
  408ca2:	45c2      	cmp	sl, r8
  408ca4:	d2ea      	bcs.n	408c7c <__udivmoddi4+0x284>
  408ca6:	ebb8 0e02 	subs.w	lr, r8, r2
  408caa:	eb69 0503 	sbc.w	r5, r9, r3
  408cae:	3801      	subs	r0, #1
  408cb0:	e7e4      	b.n	408c7c <__udivmoddi4+0x284>
  408cb2:	4628      	mov	r0, r5
  408cb4:	e7d7      	b.n	408c66 <__udivmoddi4+0x26e>
  408cb6:	4640      	mov	r0, r8
  408cb8:	e791      	b.n	408bde <__udivmoddi4+0x1e6>
  408cba:	4681      	mov	r9, r0
  408cbc:	e7be      	b.n	408c3c <__udivmoddi4+0x244>
  408cbe:	4601      	mov	r1, r0
  408cc0:	e778      	b.n	408bb4 <__udivmoddi4+0x1bc>
  408cc2:	3802      	subs	r0, #2
  408cc4:	443c      	add	r4, r7
  408cc6:	e745      	b.n	408b54 <__udivmoddi4+0x15c>
  408cc8:	4608      	mov	r0, r1
  408cca:	e708      	b.n	408ade <__udivmoddi4+0xe6>
  408ccc:	f1a8 0802 	sub.w	r8, r8, #2
  408cd0:	443d      	add	r5, r7
  408cd2:	e72b      	b.n	408b2c <__udivmoddi4+0x134>

00408cd4 <__aeabi_idiv0>:
  408cd4:	4770      	bx	lr
  408cd6:	bf00      	nop
  408cd8:	0a05000d 	.word	0x0a05000d
  408cdc:	0000004b 	.word	0x0000004b
  408ce0:	00001932 	.word	0x00001932
  408ce4:	0e00008b 	.word	0x0e00008b
  408ce8:	32800008 	.word	0x32800008
  408cec:	030a0205 	.word	0x030a0205
  408cf0:	0f022003 	.word	0x0f022003
  408cf4:	00000a0f 	.word	0x00000a0f
  408cf8:	18180000 	.word	0x18180000
  408cfc:	00002020 	.word	0x00002020
  408d00:	0a000000 	.word	0x0a000000
  408d04:	02020000 	.word	0x02020000
  408d08:	18180000 	.word	0x18180000
  408d0c:	00030000 	.word	0x00030000
  408d10:	00000000 	.word	0x00000000
  408d14:	18010002 	.word	0x18010002
  408d18:	1e1e1e1e 	.word	0x1e1e1e1e
  408d1c:	1e1e1e1e 	.word	0x1e1e1e1e
  408d20:	1e1e1e1e 	.word	0x1e1e1e1e
  408d24:	00001e1e 	.word	0x00001e1e
	...
  408d38:	454c4449 	.word	0x454c4449
  408d3c:	00000000 	.word	0x00000000
  408d40:	51726d54 	.word	0x51726d54
  408d44:	00000000 	.word	0x00000000
  408d48:	20726d54 	.word	0x20726d54
  408d4c:	00637653 	.word	0x00637653

00408d50 <calibri_23>:
  408d50:	0000005f 0040934c 00007e20              _...L.@. ~..

00408d5c <calibri_23_0x20>:
  408d5c:	00409678 00000005 00000018 00000008     x.@.............

00408d6c <calibri_23_0x21>:
  408d6c:	004097e0 00000007 00000018 00000008     ..@.............

00408d7c <calibri_23_0x22>:
  408d7c:	004099d8 00000009 00000018 00000008     ..@.............

00408d8c <calibri_23_0x23>:
  408d8c:	00409c60 0000000b 00000018 00000008     `.@.............

00408d9c <calibri_23_0x24>:
  408d9c:	00409f78 0000000c 00000018 00000008     x.@.............

00408dac <calibri_23_0x25>:
  408dac:	0040a2d8 00000010 00000018 00000008     ..@.............

00408dbc <calibri_23_0x26>:
  408dbc:	0040a758 00000010 00000018 00000008     X.@.............

00408dcc <calibri_23_0x27>:
  408dcc:	0040abd8 00000005 00000018 00000008     ..@.............

00408ddc <calibri_23_0x28>:
  408ddc:	0040ad40 00000007 00000018 00000008     @.@.............

00408dec <calibri_23_0x29>:
  408dec:	0040af38 00000007 00000018 00000008     8.@.............

00408dfc <calibri_23_0x2a>:
  408dfc:	0040b130 0000000b 00000018 00000008     0.@.............

00408e0c <calibri_23_0x2b>:
  408e0c:	0040b448 0000000b 00000018 00000008     H.@.............

00408e1c <calibri_23_0x2c>:
  408e1c:	0040b760 00000006 00000018 00000008     `.@.............

00408e2c <calibri_23_0x2d>:
  408e2c:	0040b910 00000007 00000018 00000008     ..@.............

00408e3c <calibri_23_0x2e>:
  408e3c:	0040bb08 00000006 00000018 00000008     ..@.............

00408e4c <calibri_23_0x2f>:
  408e4c:	0040bcb8 00000009 00000018 00000008     ..@.............

00408e5c <calibri_23_0x30>:
  408e5c:	0040bf40 0000000c 00000018 00000008     @.@.............

00408e6c <calibri_23_0x31>:
  408e6c:	0040c2a0 0000000c 00000018 00000008     ..@.............

00408e7c <calibri_23_0x32>:
  408e7c:	0040c600 0000000c 00000018 00000008     ..@.............

00408e8c <calibri_23_0x33>:
  408e8c:	0040c960 0000000c 00000018 00000008     `.@.............

00408e9c <calibri_23_0x34>:
  408e9c:	0040ccc0 0000000c 00000018 00000008     ..@.............

00408eac <calibri_23_0x35>:
  408eac:	0040d020 0000000c 00000018 00000008      .@.............

00408ebc <calibri_23_0x36>:
  408ebc:	0040d380 0000000c 00000018 00000008     ..@.............

00408ecc <calibri_23_0x37>:
  408ecc:	0040d6e0 0000000c 00000018 00000008     ..@.............

00408edc <calibri_23_0x38>:
  408edc:	0040da40 0000000c 00000018 00000008     @.@.............

00408eec <calibri_23_0x39>:
  408eec:	0040dda0 0000000c 00000018 00000008     ..@.............

00408efc <calibri_23_0x3a>:
  408efc:	0040e100 00000006 00000018 00000008     ..@.............

00408f0c <calibri_23_0x3b>:
  408f0c:	0040e2b0 00000006 00000018 00000008     ..@.............

00408f1c <calibri_23_0x3c>:
  408f1c:	0040e460 0000000b 00000018 00000008     `.@.............

00408f2c <calibri_23_0x3d>:
  408f2c:	0040e778 0000000b 00000018 00000008     x.@.............

00408f3c <calibri_23_0x3e>:
  408f3c:	0040ea90 0000000b 00000018 00000008     ..@.............

00408f4c <calibri_23_0x3f>:
  408f4c:	0040eda8 0000000b 00000018 00000008     ..@.............

00408f5c <calibri_23_0x40>:
  408f5c:	0040f0c0 00000015 00000018 00000008     ..@.............

00408f6c <calibri_23_0x41>:
  408f6c:	0040f6a8 0000000d 00000018 00000008     ..@.............

00408f7c <calibri_23_0x42>:
  408f7c:	0040fa50 0000000d 00000018 00000008     P.@.............

00408f8c <calibri_23_0x43>:
  408f8c:	0040fdf8 0000000c 00000018 00000008     ..@.............

00408f9c <calibri_23_0x44>:
  408f9c:	00410158 0000000e 00000018 00000008     X.A.............

00408fac <calibri_23_0x45>:
  408fac:	00410548 0000000b 00000018 00000008     H.A.............

00408fbc <calibri_23_0x46>:
  408fbc:	00410860 0000000b 00000018 00000008     `.A.............

00408fcc <calibri_23_0x47>:
  408fcc:	00410b78 0000000f 00000018 00000008     x.A.............

00408fdc <calibri_23_0x48>:
  408fdc:	00410fb0 0000000e 00000018 00000008     ..A.............

00408fec <calibri_23_0x49>:
  408fec:	004113a0 00000006 00000018 00000008     ..A.............

00408ffc <calibri_23_0x4a>:
  408ffc:	00411550 00000007 00000018 00000008     P.A.............

0040900c <calibri_23_0x4b>:
  40900c:	00411748 0000000c 00000018 00000008     H.A.............

0040901c <calibri_23_0x4c>:
  40901c:	00411aa8 0000000a 00000018 00000008     ..A.............

0040902c <calibri_23_0x4d>:
  40902c:	00411d78 00000014 00000018 00000008     x.A.............

0040903c <calibri_23_0x4e>:
  40903c:	00412318 0000000f 00000018 00000008     .#A.............

0040904c <calibri_23_0x4f>:
  40904c:	00412750 0000000f 00000018 00000008     P'A.............

0040905c <calibri_23_0x50>:
  40905c:	00412b88 0000000c 00000018 00000008     .+A.............

0040906c <calibri_23_0x51>:
  40906c:	00412ee8 00000010 00000018 00000008     ..A.............

0040907c <calibri_23_0x52>:
  40907c:	00413368 0000000c 00000018 00000008     h3A.............

0040908c <calibri_23_0x53>:
  40908c:	004136c8 0000000b 00000018 00000008     .6A.............

0040909c <calibri_23_0x54>:
  40909c:	004139e0 0000000b 00000018 00000008     .9A.............

004090ac <calibri_23_0x55>:
  4090ac:	00413cf8 0000000f 00000018 00000008     .<A.............

004090bc <calibri_23_0x56>:
  4090bc:	00414130 0000000d 00000018 00000008     0AA.............

004090cc <calibri_23_0x57>:
  4090cc:	004144d8 00000014 00000018 00000008     .DA.............

004090dc <calibri_23_0x58>:
  4090dc:	00414a78 0000000c 00000018 00000008     xJA.............

004090ec <calibri_23_0x59>:
  4090ec:	00414dd8 0000000b 00000018 00000008     .MA.............

004090fc <calibri_23_0x5a>:
  4090fc:	004150f0 0000000b 00000018 00000008     .PA.............

0040910c <calibri_23_0x5b>:
  40910c:	00415408 00000007 00000018 00000008     .TA.............

0040911c <calibri_23_0x5c>:
  40911c:	00415600 00000009 00000018 00000008     .VA.............

0040912c <calibri_23_0x5d>:
  40912c:	00415888 00000007 00000018 00000008     .XA.............

0040913c <calibri_23_0x5e>:
  40913c:	00415a80 0000000b 00000018 00000008     .ZA.............

0040914c <calibri_23_0x5f>:
  40914c:	00415d98 0000000c 00000018 00000008     .]A.............

0040915c <calibri_23_0x60>:
  40915c:	004160f8 00000007 00000018 00000008     .`A.............

0040916c <calibri_23_0x61>:
  40916c:	004162f0 0000000b 00000018 00000008     .bA.............

0040917c <calibri_23_0x62>:
  40917c:	00416608 0000000c 00000018 00000008     .fA.............

0040918c <calibri_23_0x63>:
  40918c:	00416968 0000000a 00000018 00000008     hiA.............

0040919c <calibri_23_0x64>:
  40919c:	00416c38 0000000c 00000018 00000008     8lA.............

004091ac <calibri_23_0x65>:
  4091ac:	00416f98 0000000b 00000018 00000008     .oA.............

004091bc <calibri_23_0x66>:
  4091bc:	004172b0 00000007 00000018 00000008     .rA.............

004091cc <calibri_23_0x67>:
  4091cc:	004174a8 0000000b 00000018 00000008     .tA.............

004091dc <calibri_23_0x68>:
  4091dc:	004177c0 0000000c 00000018 00000008     .wA.............

004091ec <calibri_23_0x69>:
  4091ec:	00417b20 00000005 00000018 00000008      {A.............

004091fc <calibri_23_0x6a>:
  4091fc:	00417c88 00000006 00000018 00000008     .|A.............

0040920c <calibri_23_0x6b>:
  40920c:	00417e38 0000000a 00000018 00000008     8~A.............

0040921c <calibri_23_0x6c>:
  40921c:	00418108 00000005 00000018 00000008     ..A.............

0040922c <calibri_23_0x6d>:
  40922c:	00418270 00000012 00000018 00000008     p.A.............

0040923c <calibri_23_0x6e>:
  40923c:	00418780 0000000c 00000018 00000008     ..A.............

0040924c <calibri_23_0x6f>:
  40924c:	00418ae0 0000000c 00000018 00000008     ..A.............

0040925c <calibri_23_0x70>:
  40925c:	00418e40 0000000c 00000018 00000008     @.A.............

0040926c <calibri_23_0x71>:
  40926c:	004191a0 0000000c 00000018 00000008     ..A.............

0040927c <calibri_23_0x72>:
  40927c:	00419500 00000008 00000018 00000008     ..A.............

0040928c <calibri_23_0x73>:
  40928c:	00419740 00000009 00000018 00000008     @.A.............

0040929c <calibri_23_0x74>:
  40929c:	004199c8 00000008 00000018 00000008     ..A.............

004092ac <calibri_23_0x75>:
  4092ac:	00419c08 0000000c 00000018 00000008     ..A.............

004092bc <calibri_23_0x76>:
  4092bc:	00419f68 0000000a 00000018 00000008     h.A.............

004092cc <calibri_23_0x77>:
  4092cc:	0041a238 00000010 00000018 00000008     8.A.............

004092dc <calibri_23_0x78>:
  4092dc:	0041a6b8 0000000a 00000018 00000008     ..A.............

004092ec <calibri_23_0x79>:
  4092ec:	0041a988 0000000a 00000018 00000008     ..A.............

004092fc <calibri_23_0x7a>:
  4092fc:	0041ac58 00000009 00000018 00000008     X.A.............

0040930c <calibri_23_0x7b>:
  40930c:	0041aee0 00000007 00000018 00000008     ..A.............

0040931c <calibri_23_0x7c>:
  40931c:	0041b0d8 0000000b 00000018 00000008     ..A.............

0040932c <calibri_23_0x7d>:
  40932c:	0041b3f0 00000007 00000018 00000008     ..A.............

0040933c <calibri_23_0x7e>:
  40933c:	0041b5e8 0000000b 00000018 00000008     ..A.............

0040934c <calibri_23_array>:
  40934c:	00000020 00408d5c 00000021 00408d6c      ...\.@.!...l.@.
  40935c:	00000022 00408d7c 00000023 00408d8c     "...|.@.#.....@.
  40936c:	00000024 00408d9c 00000025 00408dac     $.....@.%.....@.
  40937c:	00000026 00408dbc 00000027 00408dcc     &.....@.'.....@.
  40938c:	00000028 00408ddc 00000029 00408dec     (.....@.).....@.
  40939c:	0000002a 00408dfc 0000002b 00408e0c     *.....@.+.....@.
  4093ac:	0000002c 00408e1c 0000002d 00408e2c     ,.....@.-...,.@.
  4093bc:	0000002e 00408e3c 0000002f 00408e4c     ....<.@./...L.@.
  4093cc:	00000030 00408e5c 00000031 00408e6c     0...\.@.1...l.@.
  4093dc:	00000032 00408e7c 00000033 00408e8c     2...|.@.3.....@.
  4093ec:	00000034 00408e9c 00000035 00408eac     4.....@.5.....@.
  4093fc:	00000036 00408ebc 00000037 00408ecc     6.....@.7.....@.
  40940c:	00000038 00408edc 00000039 00408eec     8.....@.9.....@.
  40941c:	0000003a 00408efc 0000003b 00408f0c     :.....@.;.....@.
  40942c:	0000003c 00408f1c 0000003d 00408f2c     <.....@.=...,.@.
  40943c:	0000003e 00408f3c 0000003f 00408f4c     >...<.@.?...L.@.
  40944c:	00000040 00408f5c 00000041 00408f6c     @...\.@.A...l.@.
  40945c:	00000042 00408f7c 00000043 00408f8c     B...|.@.C.....@.
  40946c:	00000044 00408f9c 00000045 00408fac     D.....@.E.....@.
  40947c:	00000046 00408fbc 00000047 00408fcc     F.....@.G.....@.
  40948c:	00000048 00408fdc 00000049 00408fec     H.....@.I.....@.
  40949c:	0000004a 00408ffc 0000004b 0040900c     J.....@.K.....@.
  4094ac:	0000004c 0040901c 0000004d 0040902c     L.....@.M...,.@.
  4094bc:	0000004e 0040903c 0000004f 0040904c     N...<.@.O...L.@.
  4094cc:	00000050 0040905c 00000051 0040906c     P...\.@.Q...l.@.
  4094dc:	00000052 0040907c 00000053 0040908c     R...|.@.S.....@.
  4094ec:	00000054 0040909c 00000055 004090ac     T.....@.U.....@.
  4094fc:	00000056 004090bc 00000057 004090cc     V.....@.W.....@.
  40950c:	00000058 004090dc 00000059 004090ec     X.....@.Y.....@.
  40951c:	0000005a 004090fc 0000005b 0040910c     Z.....@.[.....@.
  40952c:	0000005c 0040911c 0000005d 0040912c     \.....@.]...,.@.
  40953c:	0000005e 0040913c 0000005f 0040914c     ^...<.@._...L.@.
  40954c:	00000060 0040915c 00000061 0040916c     `...\.@.a...l.@.
  40955c:	00000062 0040917c 00000063 0040918c     b...|.@.c.....@.
  40956c:	00000064 0040919c 00000065 004091ac     d.....@.e.....@.
  40957c:	00000066 004091bc 00000067 004091cc     f.....@.g.....@.
  40958c:	00000068 004091dc 00000069 004091ec     h.....@.i.....@.
  40959c:	0000006a 004091fc 0000006b 0040920c     j.....@.k.....@.
  4095ac:	0000006c 0040921c 0000006d 0040922c     l.....@.m...,.@.
  4095bc:	0000006e 0040923c 0000006f 0040924c     n...<.@.o...L.@.
  4095cc:	00000070 0040925c 00000071 0040926c     p...\.@.q...l.@.
  4095dc:	00000072 0040927c 00000073 0040928c     r...|.@.s.....@.
  4095ec:	00000074 0040929c 00000075 004092ac     t.....@.u.....@.
  4095fc:	00000076 004092bc 00000077 004092cc     v.....@.w.....@.
  40960c:	00000078 004092dc 00000079 004092ec     x.....@.y.....@.
  40961c:	0000007a 004092fc 0000007b 0040930c     z.....@.{.....@.
  40962c:	0000007c 0040931c 0000007d 0040932c     |.....@.}...,.@.
  40963c:	0000007e 0040933c 00000030 00000031     ~...<.@.0...1...
  40964c:	00000032 00000033 00000034 00000035     2...3...4...5...
  40965c:	00000036 00000037 00000038 00000039     6...7...8...9...
  40966c:	0000002a 61656c43 00000072              *...Clear...

00409678 <image_data_calibri_23_0x20>:
  409678:	ffffffff ffffffff ffffffff ffffffff     ................
  409688:	ffffffff ffffffff ffffffff ffffffff     ................
  409698:	ffffffff ffffffff ffffffff ffffffff     ................
  4096a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4096b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4096c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4096d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4096e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4096f8:	ffffffff ffffffff ffffffff ffffffff     ................
  409708:	ffffffff ffffffff ffffffff ffffffff     ................
  409718:	ffffffff ffffffff ffffffff ffffffff     ................
  409728:	ffffffff ffffffff ffffffff ffffffff     ................
  409738:	ffffffff ffffffff ffffffff ffffffff     ................
  409748:	ffffffff ffffffff ffffffff ffffffff     ................
  409758:	ffffffff ffffffff ffffffff ffffffff     ................
  409768:	ffffffff ffffffff ffffffff ffffffff     ................
  409778:	ffffffff ffffffff ffffffff ffffffff     ................
  409788:	ffffffff ffffffff ffffffff ffffffff     ................
  409798:	ffffffff ffffffff ffffffff ffffffff     ................
  4097a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4097b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4097c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4097d8:	ffffffff ffffffff                       ........

004097e0 <image_data_calibri_23_0x21>:
  4097e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4097f0:	ffffffff ffffffff ffffffff ffffffff     ................
  409800:	ffffffff ffffffff ffffffff ffffffff     ................
  409810:	00ffffff 00000000 ffffff00 ffffffff     ................
  409820:	ffffffff ffffffff 00000000 ffff0000     ................
  409830:	ffffffff ffffffff ffffffff 000000ff     ................
  409840:	ff000000 ffffffff ffffffff ffffffff     ................
  409850:	0000ffff 00000000 ffffffff ffffffff     ................
  409860:	ffffffff 00ffffff 00000000 ffffff00     ................
  409870:	ffffffff ffffffff ffffffff 00000000     ................
  409880:	ffff0000 ffffffff ffffffff ffffffff     ................
  409890:	000000ff ff000000 ffffffff ffffffff     ................
  4098a0:	ffffffff 0000ffff 00000000 ffffffff     ................
  4098b0:	ffffffff ffffffff 00ffffff 00000000     ................
  4098c0:	ffffff00 ffffffff ffffffff ffffffff     ................
  4098d0:	00000000 ffff0000 ffffffff ffffffff     ................
  4098e0:	ffffffff 000000ff ff000000 ffffffff     ................
  4098f0:	ffffffff ffffffff 0000ffff 00000000     ................
  409900:	ffffffff ffffffff ffffffff ffffffff     ................
  409910:	ffffffff ffffffff ffffffff ffffffff     ................
  409920:	ffffffff 00000000 ffff0000 ffffffff     ................
  409930:	ffffffff ffffffff 000000ff ff000000     ................
  409940:	ffffffff ffffffff ffffffff 0000ffff     ................
  409950:	00000000 ffffffff ffffffff ffffffff     ................
  409960:	ffffffff ffffffff ffffffff ffffffff     ................
  409970:	ffffffff ffffffff ffffffff ffffffff     ................
  409980:	ffffffff ffffffff ffffffff ffffffff     ................
  409990:	ffffffff ffffffff ffffffff ffffffff     ................
  4099a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4099b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4099c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4099d0:	ffffffff ffffffff                       ........

004099d8 <image_data_calibri_23_0x22>:
  4099d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4099e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4099f8:	ffffffff ffffffff ffffffff ffffffff     ................
  409a08:	ffffffff ffffffff ffffffff ff000000     ................
  409a18:	ffffffff ffffffff ff000000 ffffffff     ................
  409a28:	ffffffff 00ffffff ffff0000 ffffffff     ................
  409a38:	00ffffff ffff0000 ffffffff ffffffff     ................
  409a48:	0000ffff ffffff00 ffffffff 0000ffff     ................
  409a58:	ffffff00 ffffffff ffffffff 000000ff     ................
  409a68:	ffffffff ffffffff 000000ff ffffffff     ................
  409a78:	ffffffff ffffffff ff000000 ffffffff     ................
  409a88:	ffffffff ff000000 ffffffff ffffffff     ................
  409a98:	00ffffff ffff0000 ffffffff 00ffffff     ................
  409aa8:	ffff0000 ffffffff ffffffff ffffffff     ................
  409ab8:	ffffffff ffffffff ffffffff ffffffff     ................
  409ac8:	ffffffff ffffffff ffffffff ffffffff     ................
  409ad8:	ffffffff ffffffff ffffffff ffffffff     ................
  409ae8:	ffffffff ffffffff ffffffff ffffffff     ................
  409af8:	ffffffff ffffffff ffffffff ffffffff     ................
  409b08:	ffffffff ffffffff ffffffff ffffffff     ................
  409b18:	ffffffff ffffffff ffffffff ffffffff     ................
  409b28:	ffffffff ffffffff ffffffff ffffffff     ................
  409b38:	ffffffff ffffffff ffffffff ffffffff     ................
  409b48:	ffffffff ffffffff ffffffff ffffffff     ................
  409b58:	ffffffff ffffffff ffffffff ffffffff     ................
  409b68:	ffffffff ffffffff ffffffff ffffffff     ................
  409b78:	ffffffff ffffffff ffffffff ffffffff     ................
  409b88:	ffffffff ffffffff ffffffff ffffffff     ................
  409b98:	ffffffff ffffffff ffffffff ffffffff     ................
  409ba8:	ffffffff ffffffff ffffffff ffffffff     ................
  409bb8:	ffffffff ffffffff ffffffff ffffffff     ................
  409bc8:	ffffffff ffffffff ffffffff ffffffff     ................
  409bd8:	ffffffff ffffffff ffffffff ffffffff     ................
  409be8:	ffffffff ffffffff ffffffff ffffffff     ................
  409bf8:	ffffffff ffffffff ffffffff ffffffff     ................
  409c08:	ffffffff ffffffff ffffffff ffffffff     ................
  409c18:	ffffffff ffffffff ffffffff ffffffff     ................
  409c28:	ffffffff ffffffff ffffffff ffffffff     ................
  409c38:	ffffffff ffffffff ffffffff ffffffff     ................
  409c48:	ffffffff ffffffff ffffffff ffffffff     ................
  409c58:	ffffffff ffffffff                       ........

00409c60 <image_data_calibri_23_0x23>:
  409c60:	ffffffff ffffffff ffffffff ffffffff     ................
  409c70:	ffffffff ffffffff ffffffff ffffffff     ................
  409c80:	ffffffff ffffffff ffffffff ffffffff     ................
  409c90:	ffffffff ffffffff ffffffff ffffffff     ................
  409ca0:	ffffffff ffffffff ffffffff ffffffff     ................
  409cb0:	ffffffff ffffffff ffffffff ffffffff     ................
  409cc0:	ffffffff ffffffff ffffffff 00000000     ................
  409cd0:	ffff0000 ffffffff 00ffffff 00000000     ................
  409ce0:	ffffff00 ffffffff ffffffff 000000ff     ................
  409cf0:	ff000000 ffffffff ffffffff 00000000     ................
  409d00:	ffff0000 ffffffff ffffffff 0000ffff     ................
  409d10:	00000000 ffffffff ffffffff 000000ff     ................
  409d20:	ffffffff ffffffff 000000ff 00000000     ................
	...
  409d44:	ff000000 0000ffff 00000000 00000000     ................
	...
  409d68:	ffffffff ffffffff 000000ff ffffffff     ................
  409d78:	ffffffff 000000ff ff000000 ffffffff     ................
  409d88:	ffffffff ffffffff 0000ffff ffffff00     ................
  409d98:	ffffffff 0000ffff 00000000 ffffffff     ................
  409da8:	ffffffff ffffffff 00000000 ffff0000     ................
  409db8:	ffffffff 00ffffff 00000000 ffffff00     ................
  409dc8:	ffffffff ffffffff 000000ff ff000000     ................
  409dd8:	ffffffff ffffffff 00000000 ffff0000     ................
  409de8:	ffffffff 00000000 00000000 00000000     ................
	...
  409e08:	ffff0000 000000ff 00000000 00000000     ................
	...
  409e28:	ff000000 ffffffff ffffffff 00000000     ................
  409e38:	ffff0000 ffffffff 00ffffff ffff0000     ................
  409e48:	ffffffff ffffffff ffffffff 000000ff     ................
  409e58:	ff000000 ffffffff ffffffff ff000000     ................
  409e68:	ffffffff ffffffff ffffffff 0000ffff     ................
  409e78:	ffffff00 ffffffff ffffffff 000000ff     ................
  409e88:	ffffffff ffffffff ffffffff 00ffffff     ................
  409e98:	ffff0000 ffffffff 00ffffff 00000000     ................
  409ea8:	ffffff00 ffffffff ffffffff ffffffff     ................
  409eb8:	ffffffff ffffffff ffffffff ffffffff     ................
  409ec8:	ffffffff ffffffff ffffffff ffffffff     ................
  409ed8:	ffffffff ffffffff ffffffff ffffffff     ................
  409ee8:	ffffffff ffffffff ffffffff ffffffff     ................
  409ef8:	ffffffff ffffffff ffffffff ffffffff     ................
  409f08:	ffffffff ffffffff ffffffff ffffffff     ................
  409f18:	ffffffff ffffffff ffffffff ffffffff     ................
  409f28:	ffffffff ffffffff ffffffff ffffffff     ................
  409f38:	ffffffff ffffffff ffffffff ffffffff     ................
  409f48:	ffffffff ffffffff ffffffff ffffffff     ................
  409f58:	ffffffff ffffffff ffffffff ffffffff     ................
  409f68:	ffffffff ffffffff ffffffff ffffffff     ................

00409f78 <image_data_calibri_23_0x24>:
  409f78:	ffffffff ffffffff ffffffff ffffffff     ................
  409f88:	0000ffff ffffff00 ffffffff ffffffff     ................
  409f98:	ffffffff ffffffff ffffffff ffffffff     ................
  409fa8:	ffffffff 0000ffff ffffff00 ffffffff     ................
  409fb8:	ffffffff ffffffff ffffffff ffffffff     ................
  409fc8:	ffffffff ffffffff 0000ffff ffffff00     ................
  409fd8:	ffffffff ffffffff ffffffff ffffffff     ................
  409fe8:	ffffffff 000000ff 00000000 00000000     ................
  409ff8:	00000000 ff000000 ffffffff ffffffff     ................
  40a008:	ffffffff 0000ffff 00000000 00000000     ................
	...
  40a020:	ff000000 ffffffff ffffffff ffffffff     ................
  40a030:	0000ffff 00000000 ffffffff ffffffff     ................
  40a040:	ffffffff 00000000 ffff0000 ffffffff     ................
  40a050:	00ffffff 00000000 ffffff00 ffffffff     ................
  40a060:	ffffffff ffffffff ffffffff ffffffff     ................
  40a070:	ffffffff 00ffffff 00000000 ffffff00     ................
  40a080:	ffffffff ffffffff ffffffff ffffffff     ................
  40a090:	ffffffff ffffffff ffffffff 0000ffff     ................
  40a0a0:	00000000 ffffffff ffffffff ffffffff     ................
  40a0b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a0c0:	0000ffff 00000000 00000000 ffff0000     ................
  40a0d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a0e0:	ffffffff ffffffff ffffffff 00000000     ................
	...
  40a0f8:	ff000000 ffffffff ffffffff ffffffff     ................
  40a108:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
  40a120:	ffff0000 ffffffff ffffffff ffffffff     ................
  40a130:	ffffffff ffffffff ffffffff ffffffff     ................
  40a140:	00000000 ffff0000 ffffffff ffffffff     ................
  40a150:	ffffffff ffffffff ffffffff ffffffff     ................
  40a160:	ffffffff 00000000 ffff0000 ffffffff     ................
  40a170:	ffffffff ffffffff ffffffff ffffffff     ................
  40a180:	ffffffff ffffffff 00000000 ffff0000     ................
  40a190:	ffffffff 00ffffff 00000000 ffffff00     ................
  40a1a0:	ffffffff ffffffff 000000ff 00000000     ................
  40a1b0:	ffff0000 ffffffff 00ffffff 00000000     ................
	...
  40a1d0:	ff000000 ffffffff ffffffff ffffffff     ................
  40a1e0:	0000ffff 00000000 00000000 00000000     ................
  40a1f0:	00000000 ffffffff ffffffff ffffffff     ................
  40a200:	ffffffff ffffffff ffffffff ff000000     ................
  40a210:	ffffffff ffffffff ffffffff ffffffff     ................
  40a220:	ffffffff ffffffff ffffffff ffffffff     ................
  40a230:	ff000000 ffffffff ffffffff ffffffff     ................
  40a240:	ffffffff ffffffff ffffffff ffffffff     ................
  40a250:	ffffffff ff000000 ffffffff ffffffff     ................
  40a260:	ffffffff ffffffff ffffffff ffffffff     ................
  40a270:	ffffffff ffffffff ffffffff ffffffff     ................
  40a280:	ffffffff ffffffff ffffffff ffffffff     ................
  40a290:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2d0:	ffffffff ffffffff                       ........

0040a2d8 <image_data_calibri_23_0x25>:
  40a2d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a308:	ffffffff ffffffff ffffffff ffffffff     ................
  40a318:	ffffffff ffffffff ffffffff ffffffff     ................
  40a328:	ffffffff ffffffff ffffffff ffffffff     ................
  40a338:	ffffffff ffffffff ffffffff ffffffff     ................
  40a348:	ffffffff ffffffff ffffffff ffffffff     ................
  40a358:	ffffffff ffffffff ffffffff ffffffff     ................
  40a368:	ffffffff 0000ffff 00000000 00000000     ................
  40a378:	ffff0000 ffffffff ffffffff ffffffff     ................
  40a388:	ffffffff 00000000 ffff0000 ffffffff     ................
  40a398:	ffffffff 0000ffff ffffff00 00ffffff     ................
  40a3a8:	00000000 ffffff00 ffffffff ffffffff     ................
  40a3b8:	000000ff ff000000 ffffffff ffffffff     ................
  40a3c8:	00ffffff 00000000 ffffff00 00ffffff     ................
  40a3d8:	00000000 ffffff00 ffffffff ffffffff     ................
  40a3e8:	000000ff ffffffff ffffffff ffffffff     ................
  40a3f8:	00ffffff 00000000 ffffff00 00ffffff     ................
  40a408:	00000000 ffffff00 ffffffff 0000ffff     ................
  40a418:	00000000 ffffffff ffffffff ffffffff     ................
  40a428:	00ffffff 00000000 ffffff00 00ffffff     ................
  40a438:	00000000 ffffff00 00ffffff 00000000     ................
  40a448:	ffffff00 ffffffff ffffffff ffffffff     ................
  40a458:	00ffffff 00000000 ffffff00 00ffffff     ................
  40a468:	00000000 ffffff00 00ffffff ffff0000     ................
  40a478:	ffffffff ffffffff ffffffff ffffffff     ................
  40a488:	00ffffff 00000000 ffffff00 00ffffff     ................
  40a498:	ffff0000 ffffffff 00000000 ffff0000     ................
  40a4a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a4b8:	ffffffff 0000ffff 00000000 00000000     ................
  40a4c8:	ffff0000 000000ff ff000000 ffffffff     ................
  40a4d8:	000000ff 00000000 00000000 ffffff00     ................
  40a4e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a4f8:	0000ffff 00000000 ffffffff ffffffff     ................
  40a508:	000000ff ffffffff 0000ffff 00000000     ................
  40a518:	ffffffff ffffffff ffffffff ffffffff     ................
  40a528:	0000ffff ffffff00 ffffffff 0000ffff     ................
  40a538:	00000000 ffffffff 0000ffff 00000000     ................
  40a548:	ffffffff ffffffff ffffffff 00ffffff     ................
  40a558:	00000000 ffffff00 ffffffff 0000ffff     ................
  40a568:	00000000 ffffffff 0000ffff 00000000     ................
  40a578:	ffffffff ffffffff ffffffff 00000000     ................
  40a588:	ffff0000 ffffffff ffffffff 0000ffff     ................
  40a598:	00000000 ffffffff 0000ffff 00000000     ................
  40a5a8:	ffffffff ffffffff ffffffff ff000000     ................
  40a5b8:	ffffffff ffffffff ffffffff 0000ffff     ................
  40a5c8:	00000000 ffffffff 0000ffff 00000000     ................
  40a5d8:	ffffffff ffffffff 000000ff ff000000     ................
  40a5e8:	ffffffff ffffffff ffffffff 0000ffff     ................
  40a5f8:	00000000 ffffffff 0000ffff ffffff00     ................
  40a608:	ffffffff 0000ffff 00000000 ffffffff     ................
  40a618:	ffffffff ffffffff ffffffff ffffffff     ................
  40a628:	000000ff 00000000 00000000 ffffff00     ................
  40a638:	ffffffff ffffffff ffffffff ffffffff     ................
  40a648:	ffffffff ffffffff ffffffff ffffffff     ................
  40a658:	ffffffff ffffffff ffffffff ffffffff     ................
  40a668:	ffffffff ffffffff ffffffff ffffffff     ................
  40a678:	ffffffff ffffffff ffffffff ffffffff     ................
  40a688:	ffffffff ffffffff ffffffff ffffffff     ................
  40a698:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a708:	ffffffff ffffffff ffffffff ffffffff     ................
  40a718:	ffffffff ffffffff ffffffff ffffffff     ................
  40a728:	ffffffff ffffffff ffffffff ffffffff     ................
  40a738:	ffffffff ffffffff ffffffff ffffffff     ................
  40a748:	ffffffff ffffffff ffffffff ffffffff     ................

0040a758 <image_data_calibri_23_0x26>:
  40a758:	ffffffff ffffffff ffffffff ffffffff     ................
  40a768:	ffffffff ffffffff ffffffff ffffffff     ................
  40a778:	ffffffff ffffffff ffffffff ffffffff     ................
  40a788:	ffffffff ffffffff ffffffff ffffffff     ................
  40a798:	ffffffff ffffffff ffffffff ffffffff     ................
  40a7a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a7b8:	ffffffff ffffffff ffffffff 00000000     ................
	...
  40a7d0:	ff000000 ffffffff ffffffff ffffffff     ................
  40a7e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a7f0:	000000ff 00000000 00000000 00000000     ................
  40a800:	00000000 ffff0000 ffffffff ffffffff     ................
  40a810:	ffffffff ffffffff ffffffff ffffffff     ................
  40a820:	000000ff ff000000 ffffffff ffffffff     ................
	...
  40a838:	ffffff00 ffffffff ffffffff ffffffff     ................
  40a848:	ffffffff ffffffff 000000ff ff000000     ................
  40a858:	ffffffff ffffffff 00ffffff 00000000     ................
  40a868:	ffffff00 ffffffff ffffffff ffffffff     ................
  40a878:	ffffffff ffffffff 000000ff ff000000     ................
  40a888:	ffffffff ffffffff 00ffffff ffff0000     ................
  40a898:	ffffffff ffffffff ffffffff ffffffff     ................
  40a8a8:	ffffffff ffffffff 000000ff ff000000     ................
  40a8b8:	ffffffff ffffffff 00000000 ffff0000     ................
  40a8c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a8d8:	ffffffff ffffffff ffffffff 00000000     ................
	...
  40a8f0:	ff000000 ffffffff ffffffff ffffffff     ................
  40a900:	ffffffff ffffffff ffffffff ffffffff     ................
  40a910:	ffffffff 00000000 00000000 ffffff00     ................
  40a920:	ffffffff ffffffff ffffffff ff000000     ................
  40a930:	ffffffff ffffffff ffffffff ffffffff     ................
  40a940:	000000ff 00000000 00000000 00000000     ................
  40a950:	ffffffff ffffffff ffffffff ff000000     ................
  40a960:	ffffffff ffffffff ffffffff 0000ffff     ................
  40a970:	00000000 ffffffff 0000ffff 00000000     ................
  40a980:	ffffffff ffffffff 000000ff ff000000     ................
  40a990:	ffffffff ffffffff 00ffffff 00000000     ................
  40a9a0:	ffffff00 ffffffff ffffffff 000000ff     ................
  40a9b0:	ff000000 ffffffff 000000ff ff000000     ................
  40a9c0:	ffffffff ffffffff 00ffffff 00000000     ................
  40a9d0:	ffffff00 ffffffff ffffffff ffffffff     ................
  40a9e0:	00000000 ffff0000 000000ff ff000000     ................
  40a9f0:	ffffffff ffffffff 00ffffff 00000000     ................
  40aa00:	ffffff00 ffffffff ffffffff ffffffff     ................
  40aa10:	00ffffff 00000000 00000000 ffffffff     ................
  40aa20:	ffffffff ffffffff ffffffff 0000ffff     ................
  40aa30:	00000000 ffffffff ffffffff ffffffff     ................
  40aa40:	00ffffff 00000000 00000000 ff000000     ................
  40aa50:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
  40aa74:	ffff0000 000000ff 00000000 00000000     ................
  40aa84:	ffffff00 ffffffff ffffffff ffffffff     ................
	...
  40aaa0:	ff000000 ffffffff ffffffff 00ffffff     ................
  40aab0:	00000000 ffffff00 ffffffff ffffffff     ................
  40aac0:	ffffffff ffffffff ffffffff ffffffff     ................
  40aad0:	ffffffff ffffffff ffffffff ffffffff     ................
  40aae0:	ffffffff ffffffff ffffffff ffffffff     ................
  40aaf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab00:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab10:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab20:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab30:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab40:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab50:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab60:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab70:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab80:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab90:	ffffffff ffffffff ffffffff ffffffff     ................
  40aba0:	ffffffff ffffffff ffffffff ffffffff     ................
  40abb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40abc0:	ffffffff ffffffff ffffffff ffffffff     ................
  40abd0:	ffffffff ffffffff                       ........

0040abd8 <image_data_calibri_23_0x27>:
  40abd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40abe8:	ffffffff ffffffff ffffffff ffffffff     ................
  40abf8:	ffffffff ff000000 ffffffff ffffffff     ................
  40ac08:	00ffffff ffff0000 ffffffff ffffffff     ................
  40ac18:	0000ffff ffffff00 ffffffff ffffffff     ................
  40ac28:	000000ff ffffffff ffffffff ffffffff     ................
  40ac38:	ff000000 ffffffff ffffffff 00ffffff     ................
  40ac48:	ffff0000 ffffffff ffffffff ffffffff     ................
  40ac58:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac68:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac78:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac88:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac98:	ffffffff ffffffff ffffffff ffffffff     ................
  40aca8:	ffffffff ffffffff ffffffff ffffffff     ................
  40acb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40acc8:	ffffffff ffffffff ffffffff ffffffff     ................
  40acd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ace8:	ffffffff ffffffff ffffffff ffffffff     ................
  40acf8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad08:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad18:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad28:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad38:	ffffffff ffffffff                       ........

0040ad40 <image_data_calibri_23_0x28>:
  40ad40:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad50:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad60:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad70:	ffffffff 0000ffff 00000000 ffffffff     ................
  40ad80:	ffffffff ffffffff 00ffffff 00000000     ................
  40ad90:	ffffff00 ffffffff ffffffff 000000ff     ................
  40ada0:	ff000000 ffffffff ffffffff ffffffff     ................
  40adb0:	0000ffff 00000000 ffffffff ffffffff     ................
  40adc0:	ffffffff 00ffffff 00000000 ffffff00     ................
  40add0:	ffffffff ffffffff ffffffff ff000000     ................
  40ade0:	ffffffff ffffffff ffffffff 0000ffff     ................
  40adf0:	00000000 ffffffff ffffffff ffffffff     ................
  40ae00:	00ffffff 00000000 ffffff00 ffffffff     ................
  40ae10:	ffffffff ffffffff 00000000 ffff0000     ................
  40ae20:	ffffffff ffffffff ffffffff 000000ff     ................
  40ae30:	ff000000 ffffffff ffffffff ffffffff     ................
  40ae40:	0000ffff 00000000 ffffffff ffffffff     ................
  40ae50:	ffffffff 00ffffff 00000000 ffffff00     ................
  40ae60:	ffffffff ffffffff ffffffff 00000000     ................
  40ae70:	ffff0000 ffffffff ffffffff ffffffff     ................
  40ae80:	000000ff ff000000 ffffffff ffffffff     ................
  40ae90:	ffffffff ffffffff 000000ff ffffffff     ................
  40aea0:	ffffffff ffffffff ffffffff 0000ffff     ................
  40aeb0:	00000000 ffffffff ffffffff ffffffff     ................
  40aec0:	00ffffff 00000000 ffffff00 ffffffff     ................
  40aed0:	ffffffff ffffffff 00000000 ffff0000     ................
  40aee0:	ffffffff ffffffff ffffffff ffffffff     ................
  40aef0:	00000000 ffff0000 ffffffff ffffffff     ................
  40af00:	ffffffff 000000ff ff000000 ffffffff     ................
  40af10:	ffffffff ffffffff ffffffff ffffffff     ................
  40af20:	ffffffff ffffffff ffffffff ffffffff     ................
  40af30:	ffffffff ffffffff                       ........

0040af38 <image_data_calibri_23_0x29>:
  40af38:	ffffffff ffffffff ffffffff ffffffff     ................
  40af48:	ffffffff ffffffff ffffffff ffffffff     ................
  40af58:	ffffffff ffffffff ffffffff 000000ff     ................
  40af68:	ff000000 ffffffff ffffffff ffffffff     ................
  40af78:	0000ffff 00000000 ffffffff ffffffff     ................
  40af88:	ffffffff ffffffff 0000ffff 00000000     ................
  40af98:	ffffffff ffffffff ffffffff 00ffffff     ................
  40afa8:	00000000 ffffff00 ffffffff ffffffff     ................
  40afb8:	ffffffff 00000000 ffff0000 ffffffff     ................
  40afc8:	ffffffff ffffffff ffffffff ff000000     ................
  40afd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40afe8:	000000ff ff000000 ffffffff ffffffff     ................
  40aff8:	ffffffff 0000ffff 00000000 ffffffff     ................
  40b008:	ffffffff ffffffff 00ffffff 00000000     ................
  40b018:	ffffff00 ffffffff ffffffff ffffffff     ................
  40b028:	00000000 ffff0000 ffffffff ffffffff     ................
  40b038:	ffffffff 000000ff ff000000 ffffffff     ................
  40b048:	ffffffff ffffffff 0000ffff 00000000     ................
  40b058:	ffffffff ffffffff ffffffff 00ffffff     ................
  40b068:	00000000 ffffff00 ffffffff ffffffff     ................
  40b078:	ffffffff 00000000 ffff0000 ffffffff     ................
  40b088:	ffffffff ffffffff 000000ff ffffffff     ................
  40b098:	ffffffff ffffffff 00ffffff 00000000     ................
  40b0a8:	ffffff00 ffffffff ffffffff ffffffff     ................
  40b0b8:	00000000 ffff0000 ffffffff ffffffff     ................
  40b0c8:	ffffffff 000000ff ff000000 ffffffff     ................
  40b0d8:	ffffffff 00ffffff 00000000 ffffff00     ................
  40b0e8:	ffffffff ffffffff ffffffff 00000000     ................
  40b0f8:	ffff0000 ffffffff ffffffff ffffffff     ................
  40b108:	ffffffff ffffffff ffffffff ffffffff     ................
  40b118:	ffffffff ffffffff ffffffff ffffffff     ................
  40b128:	ffffffff ffffffff                       ........

0040b130 <image_data_calibri_23_0x2a>:
  40b130:	ffffffff ffffffff ffffffff ffffffff     ................
  40b140:	ffffffff ffffffff ffffffff ffffffff     ................
  40b150:	ffffffff ffffffff ffffffff ffffffff     ................
  40b160:	ffffffff ffffffff ffffffff ffffffff     ................
  40b170:	ffffffff ffffffff ffffffff ffffffff     ................
  40b180:	000000ff ff000000 ffffffff ffffffff     ................
  40b190:	ffffffff ffffffff 000000ff ffffffff     ................
  40b1a0:	0000ffff ffffff00 ffffffff ffffffff     ................
  40b1b0:	ffffffff ffffffff 0000ffff 00000000     ................
  40b1c0:	00ffffff ffff0000 000000ff 00000000     ................
  40b1d0:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
  40b1ec:	ffffff00 ffffffff ffffffff ffffffff     ................
  40b1fc:	00ffffff 00000000 00000000 00000000     ................
  40b20c:	ffff0000 ffffffff ffffffff ffffffff     ................
  40b21c:	000000ff ff000000 0000ffff ffffff00     ................
	...
  40b234:	ffffff00 ffffffff 0000ffff ffffff00     ................
  40b244:	00ffffff ffff0000 ffffffff ffffffff     ................
  40b254:	ffffffff ffffffff ffffffff ffffffff     ................
  40b264:	ffffffff 00000000 ffff0000 ffffffff     ................
  40b274:	ffffffff ffffffff ffffffff ffffffff     ................
  40b284:	ffffffff ffffffff ffffffff ffffffff     ................
  40b294:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b304:	ffffffff ffffffff ffffffff ffffffff     ................
  40b314:	ffffffff ffffffff ffffffff ffffffff     ................
  40b324:	ffffffff ffffffff ffffffff ffffffff     ................
  40b334:	ffffffff ffffffff ffffffff ffffffff     ................
  40b344:	ffffffff ffffffff ffffffff ffffffff     ................
  40b354:	ffffffff ffffffff ffffffff ffffffff     ................
  40b364:	ffffffff ffffffff ffffffff ffffffff     ................
  40b374:	ffffffff ffffffff ffffffff ffffffff     ................
  40b384:	ffffffff ffffffff ffffffff ffffffff     ................
  40b394:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b404:	ffffffff ffffffff ffffffff ffffffff     ................
  40b414:	ffffffff ffffffff ffffffff ffffffff     ................
  40b424:	ffffffff ffffffff ffffffff ffffffff     ................
  40b434:	ffffffff ffffffff ffffffff ffffffff     ................
  40b444:	ffffffff                                ....

0040b448 <image_data_calibri_23_0x2b>:
  40b448:	ffffffff ffffffff ffffffff ffffffff     ................
  40b458:	ffffffff ffffffff ffffffff ffffffff     ................
  40b468:	ffffffff ffffffff ffffffff ffffffff     ................
  40b478:	ffffffff ffffffff ffffffff ffffffff     ................
  40b488:	ffffffff ffffffff ffffffff ffffffff     ................
  40b498:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b508:	ffffffff ffffffff ffffffff ffffffff     ................
  40b518:	ffffffff 000000ff ff000000 ffffffff     ................
  40b528:	ffffffff ffffffff ffffffff ffffffff     ................
  40b538:	ffffffff 0000ffff 00000000 ffffffff     ................
  40b548:	ffffffff ffffffff ffffffff ffffffff     ................
  40b558:	ffffffff 00ffffff 00000000 ffffff00     ................
  40b568:	ffffffff ffffffff ffffffff ffffffff     ................
  40b578:	ffffffff ffffffff 00000000 ffff0000     ................
  40b588:	ffffffff ffffffff ffffffff 000000ff     ................
	...
  40b5b0:	ff000000 0000ffff 00000000 00000000     ................
	...
  40b5d4:	ffffffff ffffffff ffffffff 00ffffff     ................
  40b5e4:	00000000 ffffff00 ffffffff ffffffff     ................
  40b5f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b604:	00000000 ffff0000 ffffffff ffffffff     ................
  40b614:	ffffffff ffffffff ffffffff ffffffff     ................
  40b624:	000000ff ff000000 ffffffff ffffffff     ................
  40b634:	ffffffff ffffffff ffffffff ffffffff     ................
  40b644:	0000ffff 00000000 ffffffff ffffffff     ................
  40b654:	ffffffff ffffffff ffffffff ffffffff     ................
  40b664:	ffffffff ffffffff ffffffff ffffffff     ................
  40b674:	ffffffff ffffffff ffffffff ffffffff     ................
  40b684:	ffffffff ffffffff ffffffff ffffffff     ................
  40b694:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b704:	ffffffff ffffffff ffffffff ffffffff     ................
  40b714:	ffffffff ffffffff ffffffff ffffffff     ................
  40b724:	ffffffff ffffffff ffffffff ffffffff     ................
  40b734:	ffffffff ffffffff ffffffff ffffffff     ................
  40b744:	ffffffff ffffffff ffffffff ffffffff     ................
  40b754:	ffffffff ffffffff ffffffff              ............

0040b760 <image_data_calibri_23_0x2c>:
  40b760:	ffffffff ffffffff ffffffff ffffffff     ................
  40b770:	ffffffff ffffffff ffffffff ffffffff     ................
  40b780:	ffffffff ffffffff ffffffff ffffffff     ................
  40b790:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b800:	ffffffff ffffffff ffffffff ffffffff     ................
  40b810:	ffffffff ffffffff ffffffff ffffffff     ................
  40b820:	ffffffff ffffffff ffffffff ffffffff     ................
  40b830:	ffffffff ffffffff ffffffff ffffffff     ................
  40b840:	ffffffff ffffffff ffffffff ffffffff     ................
  40b850:	ffffffff ffffffff ffffffff ffffffff     ................
  40b860:	ffffffff ffffffff ffffffff ffffffff     ................
  40b870:	ffffffff 00000000 ffff0000 ffffffff     ................
  40b880:	ffffffff 0000ffff 00000000 ffffffff     ................
  40b890:	ffffffff ffffffff 00000000 ffff0000     ................
  40b8a0:	ffffffff ffffffff 0000ffff ffffff00     ................
  40b8b0:	ffffffff ffffffff 000000ff ff000000     ................
  40b8c0:	ffffffff ffffffff 00ffffff ffff0000     ................
  40b8d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b8e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b8f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b900:	ffffffff ffffffff ffffffff ffffffff     ................

0040b910 <image_data_calibri_23_0x2d>:
  40b910:	ffffffff ffffffff ffffffff ffffffff     ................
  40b920:	ffffffff ffffffff ffffffff ffffffff     ................
  40b930:	ffffffff ffffffff ffffffff ffffffff     ................
  40b940:	ffffffff ffffffff ffffffff ffffffff     ................
  40b950:	ffffffff ffffffff ffffffff ffffffff     ................
  40b960:	ffffffff ffffffff ffffffff ffffffff     ................
  40b970:	ffffffff ffffffff ffffffff ffffffff     ................
  40b980:	ffffffff ffffffff ffffffff ffffffff     ................
  40b990:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9f0:	ffffffff ffffffff 0000ffff 00000000     ................
	...
  40ba08:	ffffff00 00ffffff 00000000 00000000     ................
  40ba18:	00000000 ffff0000 ffffffff ffffffff     ................
  40ba28:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba38:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba48:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba58:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba68:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba78:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba88:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba98:	ffffffff ffffffff ffffffff ffffffff     ................
  40baa8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bab8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bac8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bad8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bae8:	ffffffff ffffffff ffffffff ffffffff     ................
  40baf8:	ffffffff ffffffff ffffffff ffffffff     ................

0040bb08 <image_data_calibri_23_0x2e>:
  40bb08:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb18:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb28:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb38:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb48:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb58:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb68:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb78:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb88:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb98:	ffffffff ffffffff ffffffff ffffffff     ................
  40bba8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbc8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbe8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbf8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc08:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc18:	ffffffff 00000000 ffff0000 ffffffff     ................
  40bc28:	ffffffff 0000ffff 00000000 ffffffff     ................
  40bc38:	ffffffff ffffffff 00000000 ffff0000     ................
  40bc48:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc58:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc68:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc78:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc88:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc98:	ffffffff ffffffff ffffffff ffffffff     ................
  40bca8:	ffffffff ffffffff ffffffff ffffffff     ................

0040bcb8 <image_data_calibri_23_0x2f>:
  40bcb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bcc8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bcd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bce8:	00000000 ffff0000 ffffffff ffffffff     ................
  40bcf8:	ffffffff ffffffff 00000000 ffff0000     ................
  40bd08:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd18:	00ffffff 00000000 ffffff00 ffffffff     ................
  40bd28:	ffffffff ffffffff ffffffff 0000ffff     ................
  40bd38:	00000000 ffffffff ffffffff ffffffff     ................
  40bd48:	ffffffff 0000ffff 00000000 ffffffff     ................
  40bd58:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd68:	000000ff ff000000 ffffffff ffffffff     ................
  40bd78:	ffffffff ffffffff ffffffff 00000000     ................
  40bd88:	ffff0000 ffffffff ffffffff ffffffff     ................
  40bd98:	ffffffff 00000000 ffff0000 ffffffff     ................
  40bda8:	ffffffff ffffffff ffffffff 00ffffff     ................
  40bdb8:	00000000 ffffff00 ffffffff ffffffff     ................
  40bdc8:	ffffffff ffffffff 0000ffff ffffff00     ................
  40bdd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bde8:	0000ffff 00000000 ffffffff ffffffff     ................
  40bdf8:	ffffffff ffffffff ffffffff 000000ff     ................
  40be08:	ff000000 ffffffff ffffffff ffffffff     ................
  40be18:	ffffffff ffffffff ff000000 ffffffff     ................
  40be28:	ffffffff ffffffff ffffffff ffffffff     ................
  40be38:	00000000 ffff0000 ffffffff ffffffff     ................
  40be48:	ffffffff ffffffff 00ffffff 00000000     ................
  40be58:	ffffff00 ffffffff ffffffff ffffffff     ................
  40be68:	00ffffff 00000000 ffffff00 ffffffff     ................
  40be78:	ffffffff ffffffff ffffffff 0000ffff     ................
  40be88:	00000000 ffffffff ffffffff ffffffff     ................
  40be98:	ffffffff ffffffff 000000ff ff000000     ................
  40bea8:	ffffffff ffffffff ffffffff ffffffff     ................
  40beb8:	000000ff ff000000 ffffffff ffffffff     ................
  40bec8:	ffffffff ffffffff ffffffff 00000000     ................
  40bed8:	ffff0000 ffffffff ffffffff ffffffff     ................
  40bee8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bef8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf08:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf18:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf28:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf38:	ffffffff ffffffff                       ........

0040bf40 <image_data_calibri_23_0x30>:
  40bf40:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf50:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf60:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf70:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf80:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf90:	ffffffff ffffffff ffffffff ffffffff     ................
  40bfa0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bfb0:	ffffffff ffffffff 00000000 00000000     ................
  40bfc0:	00000000 ffffffff ffffffff ffffffff     ................
  40bfd0:	ffffffff ffffffff 000000ff 00000000     ................
	...
  40bfec:	ffff0000 ffffffff ffffffff 0000ffff     ................
  40bffc:	00000000 ffffffff ffffffff ffffffff     ................
  40c00c:	00000000 ffff0000 ffffffff ffffffff     ................
  40c01c:	0000ffff 00000000 ffffffff ffffffff     ................
  40c02c:	ffffffff 00000000 00000000 ffffff00     ................
  40c03c:	00ffffff 00000000 ffffff00 ffffffff     ................
  40c04c:	ffffffff ffffffff 00ffffff 00000000     ................
  40c05c:	ffffff00 00ffffff 00000000 ffffff00     ................
  40c06c:	ffffffff ffffffff ffffffff 00ffffff     ................
  40c07c:	00000000 ffffff00 00ffffff 00000000     ................
  40c08c:	ffffff00 ffffffff ffffffff ffffffff     ................
  40c09c:	00ffffff 00000000 ffffff00 00ffffff     ................
  40c0ac:	00000000 ffffff00 ffffffff ffffffff     ................
  40c0bc:	ffffffff 00ffffff 00000000 ffffff00     ................
  40c0cc:	00ffffff 00000000 ffffff00 ffffffff     ................
  40c0dc:	ffffffff ffffffff 00ffffff 00000000     ................
  40c0ec:	ffffff00 00ffffff 00000000 ffffff00     ................
  40c0fc:	ffffffff ffffffff ffffffff 00ffffff     ................
  40c10c:	00000000 ffffff00 00ffffff 00000000     ................
  40c11c:	ffffff00 ffffffff ffffffff ffffffff     ................
  40c12c:	00ffffff 00000000 ffffff00 00ffffff     ................
	...
  40c144:	ffffffff ffffffff ffffffff 00000000     ................
  40c154:	ffff0000 ffffffff ffffffff 0000ffff     ................
  40c164:	00000000 ffffffff ffffffff ffffffff     ................
  40c174:	00000000 ffff0000 ffffffff ffffffff     ................
  40c184:	0000ffff 00000000 00000000 00000000     ................
  40c194:	00000000 ff000000 ffffffff ffffffff     ................
  40c1a4:	ffffffff ffffffff ffffffff 00000000     ................
	...
  40c1bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c1cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c1dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c1ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40c1fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c20c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c21c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c22c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c23c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c24c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c25c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c26c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c27c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c28c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c29c:	ffffffff                                ....

0040c2a0 <image_data_calibri_23_0x31>:
  40c2a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c300:	ffffffff ffffffff ffffffff ffffffff     ................
  40c310:	ffffffff ffffffff 00ffffff 00000000     ................
  40c320:	ffffff00 ffffffff ffffffff ffffffff     ................
  40c330:	ffffffff ffffffff 000000ff 00000000     ................
  40c340:	00000000 ffffff00 ffffffff ffffffff     ................
  40c350:	ffffffff 00ffffff 00000000 00000000     ................
  40c360:	00ffffff 00000000 ffffff00 ffffffff     ................
  40c370:	ffffffff ffffffff 00ffffff 00000000     ................
  40c380:	ffffff00 00ffffff 00000000 ffffff00     ................
  40c390:	ffffffff ffffffff ffffffff ffffffff     ................
  40c3a0:	ffffffff ffffffff 00ffffff 00000000     ................
  40c3b0:	ffffff00 ffffffff ffffffff ffffffff     ................
  40c3c0:	ffffffff ffffffff ffffffff 00ffffff     ................
  40c3d0:	00000000 ffffff00 ffffffff ffffffff     ................
  40c3e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c3f0:	00ffffff 00000000 ffffff00 ffffffff     ................
  40c400:	ffffffff ffffffff ffffffff ffffffff     ................
  40c410:	ffffffff 00ffffff 00000000 ffffff00     ................
  40c420:	ffffffff ffffffff ffffffff ffffffff     ................
  40c430:	ffffffff ffffffff 00ffffff 00000000     ................
  40c440:	ffffff00 ffffffff ffffffff ffffffff     ................
  40c450:	ffffffff ffffffff ffffffff 00ffffff     ................
  40c460:	00000000 ffffff00 ffffffff ffffffff     ................
  40c470:	ffffffff ffffffff ffffffff ffffffff     ................
  40c480:	00ffffff 00000000 ffffff00 ffffffff     ................
  40c490:	ffffffff ffffffff ffffffff ffffffff     ................
  40c4a0:	ffffffff 00ffffff 00000000 ffffff00     ................
  40c4b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c4c0:	ffffffff ffffffff 00ffffff 00000000     ................
  40c4d0:	ffffff00 ffffffff ffffffff ffffffff     ................
  40c4e0:	ffffffff 0000ffff 00000000 00000000     ................
	...
  40c4fc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
  40c520:	ffff0000 ffffffff ffffffff ffffffff     ................
  40c530:	ffffffff ffffffff ffffffff ffffffff     ................
  40c540:	ffffffff ffffffff ffffffff ffffffff     ................
  40c550:	ffffffff ffffffff ffffffff ffffffff     ................
  40c560:	ffffffff ffffffff ffffffff ffffffff     ................
  40c570:	ffffffff ffffffff ffffffff ffffffff     ................
  40c580:	ffffffff ffffffff ffffffff ffffffff     ................
  40c590:	ffffffff ffffffff ffffffff ffffffff     ................
  40c5a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c5b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c5c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c5d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c5e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c5f0:	ffffffff ffffffff ffffffff ffffffff     ................

0040c600 <image_data_calibri_23_0x32>:
  40c600:	ffffffff ffffffff ffffffff ffffffff     ................
  40c610:	ffffffff ffffffff ffffffff ffffffff     ................
  40c620:	ffffffff ffffffff ffffffff ffffffff     ................
  40c630:	ffffffff ffffffff ffffffff ffffffff     ................
  40c640:	ffffffff ffffffff ffffffff ffffffff     ................
  40c650:	ffffffff ffffffff ffffffff ffffffff     ................
  40c660:	ffffffff ffffffff ffffffff ffffffff     ................
  40c670:	ffffffff 000000ff 00000000 00000000     ................
  40c680:	ffffff00 ffffffff ffffffff ffffffff     ................
  40c690:	00ffffff 00000000 00000000 00000000     ................
	...
  40c6a8:	ffffffff ffffffff ffffffff 00ffffff     ................
  40c6b8:	ffff0000 ffffffff ffffffff 0000ffff     ................
  40c6c8:	00000000 ff000000 ffffffff ffffffff     ................
  40c6d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c6e8:	ffffffff 000000ff ff000000 ffffffff     ................
  40c6f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c708:	ffffffff ffffffff 000000ff ff000000     ................
  40c718:	ffffffff ffffffff ffffffff ffffffff     ................
  40c728:	ffffffff ffffffff ffffffff 000000ff     ................
  40c738:	ff000000 ffffffff ffffffff ffffffff     ................
  40c748:	ffffffff ffffffff ffffffff 0000ffff     ................
  40c758:	00000000 ffffffff ffffffff ffffffff     ................
  40c768:	ffffffff ffffffff ffffffff ffffffff     ................
  40c778:	0000ffff 00000000 ffffffff ffffffff     ................
  40c788:	ffffffff ffffffff ffffffff ffffffff     ................
  40c798:	00ffffff 00000000 ffffff00 ffffffff     ................
  40c7a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c7b8:	ffffffff 00000000 ffff0000 ffffffff     ................
  40c7c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c7d8:	ffffffff 000000ff ff000000 ffffffff     ................
  40c7e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c7f8:	ffffffff 0000ffff 00000000 ffffffff     ................
  40c808:	ffffffff ffffffff ffffffff ffffffff     ................
  40c818:	ffffffff ffffffff 0000ffff ffffff00     ................
  40c828:	ffffffff ffffffff ffffffff ffffffff     ................
  40c838:	ffffffff ffffffff 00ffffff 00000000     ................
	...
  40c85c:	ffff0000 ffffffff 00ffffff 00000000     ................
	...
  40c880:	ffff0000 ffffffff ffffffff ffffffff     ................
  40c890:	ffffffff ffffffff ffffffff ffffffff     ................
  40c8a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c8b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c8c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c8d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c8e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c8f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c900:	ffffffff ffffffff ffffffff ffffffff     ................
  40c910:	ffffffff ffffffff ffffffff ffffffff     ................
  40c920:	ffffffff ffffffff ffffffff ffffffff     ................
  40c930:	ffffffff ffffffff ffffffff ffffffff     ................
  40c940:	ffffffff ffffffff ffffffff ffffffff     ................
  40c950:	ffffffff ffffffff ffffffff ffffffff     ................

0040c960 <image_data_calibri_23_0x33>:
  40c960:	ffffffff ffffffff ffffffff ffffffff     ................
  40c970:	ffffffff ffffffff ffffffff ffffffff     ................
  40c980:	ffffffff ffffffff ffffffff ffffffff     ................
  40c990:	ffffffff ffffffff ffffffff ffffffff     ................
  40c9a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c9b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c9c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c9d0:	0000ffff 00000000 00000000 00000000     ................
  40c9e0:	ffffff00 ffffffff ffffffff ffffffff     ................
  40c9f0:	00ffffff 00000000 00000000 00000000     ................
	...
  40ca08:	ffffffff ffffffff ffffffff 00ffffff     ................
  40ca18:	ffff0000 ffffffff ffffffff 0000ffff     ................
  40ca28:	00000000 ff000000 ffffffff ffffffff     ................
  40ca38:	ffffffff ffffffff ffffffff ffffffff     ................
  40ca48:	ffffffff 000000ff ff000000 ffffffff     ................
  40ca58:	ffffffff ffffffff ffffffff ffffffff     ................
  40ca68:	ffffffff ffffffff 000000ff ff000000     ................
  40ca78:	ffffffff ffffffff ffffffff ffffffff     ................
  40ca88:	ffffffff ffffffff 0000ffff 00000000     ................
  40ca98:	ffffffff ffffffff ffffffff ffffffff     ................
  40caa8:	0000ffff 00000000 00000000 00000000     ................
  40cab8:	ffffff00 ffffffff ffffffff ffffffff     ................
  40cac8:	ffffffff 0000ffff 00000000 00000000     ................
	...
  40cae0:	ffffffff ffffffff ffffffff ffffffff     ................
  40caf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb00:	000000ff ff000000 ffffffff ffffffff     ................
  40cb10:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb20:	ffffffff ffffffff 00000000 ffff0000     ................
  40cb30:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb40:	ffffffff ffffffff ffffffff 00000000     ................
  40cb50:	ffff0000 ffffffff ffffffff ffffffff     ................
  40cb60:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb70:	00000000 ffff0000 ffffffff 00ffffff     ................
  40cb80:	ffff0000 ffffffff ffffffff ffffffff     ................
  40cb90:	000000ff 00000000 ffff0000 ffffffff     ................
  40cba0:	00ffffff 00000000 00000000 00000000     ................
	...
  40cbb8:	ff000000 ffffffff ffffffff ffffffff     ................
  40cbc8:	0000ffff 00000000 00000000 00000000     ................
  40cbd8:	00000000 ffffffff ffffffff ffffffff     ................
  40cbe8:	ffffffff ffffffff ffffffff ffffffff     ................
  40cbf8:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc08:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc18:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc28:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc38:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc48:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc58:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc68:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc78:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc88:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc98:	ffffffff ffffffff ffffffff ffffffff     ................
  40cca8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ccb8:	ffffffff ffffffff                       ........

0040ccc0 <image_data_calibri_23_0x34>:
  40ccc0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ccd0:	ffffffff ffffffff ffffffff ffffffff     ................
  40cce0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ccf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40cd00:	ffffffff ffffffff ffffffff ffffffff     ................
  40cd10:	ffffffff ffffffff ffffffff ffffffff     ................
  40cd20:	ffffffff ffffffff ffffffff ffffffff     ................
  40cd30:	ffffffff ffffffff ffffffff 0000ffff     ................
  40cd40:	00000000 ff000000 ffffffff ffffffff     ................
  40cd50:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  40cd68:	ff000000 ffffffff ffffffff ffffffff     ................
  40cd78:	ffffffff ffffffff 00ffffff 00000000     ................
  40cd88:	00000000 ff000000 ffffffff ffffffff     ................
  40cd98:	ffffffff ffffffff ffffffff 00000000     ................
  40cda8:	ffff0000 000000ff ff000000 ffffffff     ................
  40cdb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40cdc8:	00000000 ffff0000 000000ff ff000000     ................
  40cdd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40cde8:	000000ff ff000000 ffffffff 000000ff     ................
  40cdf8:	ff000000 ffffffff ffffffff ffffffff     ................
  40ce08:	ffffffff 000000ff ff000000 ffffffff     ................
  40ce18:	000000ff ff000000 ffffffff ffffffff     ................
  40ce28:	ffffffff 0000ffff 00000000 ffffffff     ................
  40ce38:	ffffffff 000000ff ff000000 ffffffff     ................
  40ce48:	ffffffff ffffffff 0000ffff 00000000     ................
  40ce58:	ffffffff ffffffff 000000ff ff000000     ................
  40ce68:	ffffffff ffffffff 00ffffff 00000000     ................
  40ce78:	ffffff00 ffffffff ffffffff 000000ff     ................
  40ce88:	ff000000 ffffffff ffffffff 00ffffff     ................
	...
  40ceb4:	ffffff00 00ffffff 00000000 00000000     ................
	...
  40ced8:	ffffff00 ffffffff ffffffff ffffffff     ................
  40cee8:	ffffffff ffffffff 000000ff ff000000     ................
  40cef8:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf08:	ffffffff ffffffff ffffffff 000000ff     ................
  40cf18:	ff000000 ffffffff ffffffff ffffffff     ................
  40cf28:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf38:	000000ff ff000000 ffffffff ffffffff     ................
  40cf48:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf58:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf68:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf78:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf88:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf98:	ffffffff ffffffff ffffffff ffffffff     ................
  40cfa8:	ffffffff ffffffff ffffffff ffffffff     ................
  40cfb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40cfc8:	ffffffff ffffffff ffffffff ffffffff     ................
  40cfd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40cfe8:	ffffffff ffffffff ffffffff ffffffff     ................
  40cff8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d008:	ffffffff ffffffff ffffffff ffffffff     ................
  40d018:	ffffffff ffffffff                       ........

0040d020 <image_data_calibri_23_0x35>:
  40d020:	ffffffff ffffffff ffffffff ffffffff     ................
  40d030:	ffffffff ffffffff ffffffff ffffffff     ................
  40d040:	ffffffff ffffffff ffffffff ffffffff     ................
  40d050:	ffffffff ffffffff ffffffff ffffffff     ................
  40d060:	ffffffff ffffffff ffffffff ffffffff     ................
  40d070:	ffffffff ffffffff ffffffff ffffffff     ................
  40d080:	ffffffff ffffffff ffffffff ffffffff     ................
  40d090:	ffffffff 000000ff 00000000 00000000     ................
	...
  40d0a8:	ffff0000 ffffffff ffffffff ffffffff     ................
  40d0b8:	000000ff 00000000 00000000 00000000     ................
  40d0c8:	00000000 ffff0000 ffffffff ffffffff     ................
  40d0d8:	ffffffff 000000ff ff000000 ffffffff     ................
  40d0e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d0f8:	ffffffff ffffffff 000000ff ff000000     ................
  40d108:	ffffffff ffffffff ffffffff ffffffff     ................
  40d118:	ffffffff ffffffff ffffffff 000000ff     ................
  40d128:	ff000000 ffffffff ffffffff ffffffff     ................
  40d138:	ffffffff ffffffff ffffffff ffffffff     ................
  40d148:	000000ff 00000000 00000000 00000000     ................
  40d158:	ff000000 ffffffff ffffffff ffffffff     ................
  40d168:	ffffffff 000000ff 00000000 00000000     ................
	...
  40d180:	ffff0000 ffffffff ffffffff ffffffff     ................
  40d190:	ffffffff ffffffff ffffffff ffffffff     ................
	...
  40d1a8:	ffffff00 ffffffff ffffffff ffffffff     ................
  40d1b8:	ffffffff ffffffff ffffffff 00ffffff     ................
  40d1c8:	00000000 ffffff00 ffffffff ffffffff     ................
  40d1d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d1e8:	00ffffff 00000000 ffffff00 ffffffff     ................
  40d1f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d208:	ffffffff 00ffffff 00000000 ffffff00     ................
  40d218:	ffffffff ffffffff ffffffff ffffffff     ................
  40d228:	ffffffff ffffffff 00ffffff 00000000     ................
  40d238:	ffffff00 ffffffff 0000ffff ffffff00     ................
  40d248:	ffffffff ffffffff ffffffff 00000000     ................
  40d258:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
  40d27c:	ffff0000 ffffffff ffffffff ffffffff     ................
  40d28c:	000000ff 00000000 00000000 00000000     ................
  40d29c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d30c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d31c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d32c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d33c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d34c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d35c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d36c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d37c:	ffffffff                                ....

0040d380 <image_data_calibri_23_0x36>:
  40d380:	ffffffff ffffffff ffffffff ffffffff     ................
  40d390:	ffffffff ffffffff ffffffff ffffffff     ................
  40d3a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d3b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d3c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d3d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d3e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d3f0:	ffffffff ffffffff 00ffffff 00000000     ................
  40d400:	00000000 ff000000 ffffffff ffffffff     ................
  40d410:	ffffffff ffffffff 000000ff 00000000     ................
	...
  40d42c:	ffff0000 ffffffff ffffffff 0000ffff     ................
  40d43c:	00000000 ff000000 ffffffff ffffffff     ................
  40d44c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d45c:	0000ffff 00000000 ffffffff ffffffff     ................
  40d46c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d47c:	00ffffff 00000000 ffffff00 ffffffff     ................
  40d48c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d49c:	ffffffff 00ffffff 00000000 ffffff00     ................
  40d4ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40d4bc:	ffffffff ffffffff 00ffffff 00000000     ................
  40d4cc:	ffffff00 00000000 00000000 00000000     ................
  40d4dc:	ff000000 ffffffff ffffffff 00ffffff     ................
	...
  40d504:	ffff0000 ffffffff 00ffffff 00000000     ................
  40d514:	00000000 ffffffff ffffffff ffffffff     ................
	...
  40d52c:	ffffff00 00ffffff 00000000 ffffff00     ................
  40d53c:	ffffffff ffffffff ffffffff 00ffffff     ................
  40d54c:	00000000 ffffff00 00ffffff 00000000     ................
  40d55c:	ffffff00 ffffffff ffffffff ffffffff     ................
  40d56c:	00ffffff 00000000 ffffff00 00ffffff     ................
  40d57c:	00000000 ffffff00 ffffffff ffffffff     ................
  40d58c:	ffffffff 00ffffff 00000000 ffffff00     ................
  40d59c:	ffffffff 0000ffff 00000000 ffffffff     ................
  40d5ac:	ffffffff ffffffff 00000000 ffff0000     ................
  40d5bc:	ffffffff ffffffff 0000ffff 00000000     ................
	...
  40d5dc:	ffff0000 ffffffff ffffffff ffffffff     ................
  40d5ec:	000000ff 00000000 00000000 00000000     ................
  40d5fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d60c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d61c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d62c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d63c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d64c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d65c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d66c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d67c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d68c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d69c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d6ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40d6bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d6cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d6dc:	ffffffff                                ....

0040d6e0 <image_data_calibri_23_0x37>:
  40d6e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d6f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d700:	ffffffff ffffffff ffffffff ffffffff     ................
  40d710:	ffffffff ffffffff ffffffff ffffffff     ................
  40d720:	ffffffff ffffffff ffffffff ffffffff     ................
  40d730:	ffffffff ffffffff ffffffff ffffffff     ................
  40d740:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  40d768:	ffff0000 ffffffff 00ffffff 00000000     ................
	...
  40d78c:	ffff0000 ffffffff ffffffff ffffffff     ................
  40d79c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7ac:	00000000 ffff0000 ffffffff ffffffff     ................
  40d7bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7cc:	000000ff ff000000 ffffffff ffffffff     ................
  40d7dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7ec:	ffffffff 000000ff ff000000 ffffffff     ................
  40d7fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d80c:	ffffffff ffffffff 000000ff ffffffff     ................
  40d81c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d82c:	ffffffff ffffffff 0000ffff 00000000     ................
  40d83c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d84c:	ffffffff ffffffff ffffffff 0000ffff     ................
  40d85c:	00000000 ffffffff ffffffff ffffffff     ................
  40d86c:	ffffffff ffffffff ffffffff 00ffffff     ................
  40d87c:	00000000 ffffff00 ffffffff ffffffff     ................
  40d88c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d89c:	00ffffff 00000000 ffffff00 ffffffff     ................
  40d8ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40d8bc:	ffffffff 00000000 ffff0000 ffffffff     ................
  40d8cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d8dc:	ffffffff ffffffff 00000000 ffff0000     ................
  40d8ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40d8fc:	ffffffff ffffffff ffffffff 00000000     ................
  40d90c:	ffff0000 ffffffff ffffffff ffffffff     ................
  40d91c:	ffffffff ffffffff ffffffff 000000ff     ................
  40d92c:	ff000000 ffffffff ffffffff ffffffff     ................
  40d93c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d94c:	000000ff ff000000 ffffffff ffffffff     ................
  40d95c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d96c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d97c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d98c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d99c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40da0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40da1c:	ffffffff ffffffff ffffffff ffffffff     ................
  40da2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40da3c:	ffffffff                                ....

0040da40 <image_data_calibri_23_0x38>:
  40da40:	ffffffff ffffffff ffffffff ffffffff     ................
  40da50:	ffffffff ffffffff ffffffff ffffffff     ................
  40da60:	ffffffff ffffffff ffffffff ffffffff     ................
  40da70:	ffffffff ffffffff ffffffff ffffffff     ................
  40da80:	ffffffff ffffffff ffffffff ffffffff     ................
  40da90:	ffffffff ffffffff ffffffff ffffffff     ................
  40daa0:	ffffffff ffffffff ffffffff ffffffff     ................
  40dab0:	ffffffff ffffffff 00000000 00000000     ................
  40dac0:	00000000 ffffffff ffffffff ffffffff     ................
  40dad0:	ffffffff ffffffff 000000ff 00000000     ................
	...
  40daec:	ffff0000 ffffffff ffffffff 0000ffff     ................
  40dafc:	00000000 ff000000 ffffffff 000000ff     ................
  40db0c:	00000000 ffff0000 ffffffff ffffffff     ................
  40db1c:	0000ffff 00000000 ffffffff ffffffff     ................
  40db2c:	ffffffff 00000000 ffff0000 ffffffff     ................
  40db3c:	ffffffff 0000ffff 00000000 ffffffff     ................
  40db4c:	ffffffff ffffffff 00000000 ffff0000     ................
  40db5c:	ffffffff ffffffff 0000ffff 00000000     ................
  40db6c:	ff000000 ffffffff 000000ff ff000000     ................
  40db7c:	ffffffff ffffffff ffffffff ffffffff     ................
  40db8c:	000000ff 00000000 00000000 00000000     ................
  40db9c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dbac:	ffffffff ffffffff 00000000 00000000     ................
  40dbbc:	00000000 ffffffff ffffffff ffffffff     ................
  40dbcc:	ffffffff ffffffff 000000ff ff000000     ................
  40dbdc:	ffffffff 000000ff 00000000 ffff0000     ................
  40dbec:	ffffffff ffffffff 0000ffff 00000000     ................
  40dbfc:	ffffffff ffffffff ffffffff 00000000     ................
  40dc0c:	00000000 ffffff00 00ffffff 00000000     ................
  40dc1c:	ffffff00 ffffffff ffffffff ffffffff     ................
  40dc2c:	00ffffff 00000000 ffffff00 00ffffff     ................
  40dc3c:	00000000 ffffff00 ffffffff ffffffff     ................
  40dc4c:	ffffffff 00ffffff 00000000 ffffff00     ................
  40dc5c:	00ffffff 00000000 00000000 ffffffff     ................
  40dc6c:	ffffffff ffffffff 00000000 00000000     ................
  40dc7c:	ffffff00 ffffffff 0000ffff 00000000     ................
	...
  40dc9c:	ffff0000 ffffffff ffffffff ffffffff     ................
  40dcac:	000000ff 00000000 00000000 00000000     ................
  40dcbc:	ff000000 ffffffff ffffffff ffffffff     ................
  40dccc:	ffffffff ffffffff ffffffff ffffffff     ................
  40dcdc:	ffffffff ffffffff ffffffff ffffffff     ................
  40dcec:	ffffffff ffffffff ffffffff ffffffff     ................
  40dcfc:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd1c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd3c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd4c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd7c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd8c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd9c:	ffffffff                                ....

0040dda0 <image_data_calibri_23_0x39>:
  40dda0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ddb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ddc0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ddd0:	ffffffff ffffffff ffffffff ffffffff     ................
  40dde0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ddf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40de00:	ffffffff ffffffff ffffffff ffffffff     ................
  40de10:	ffffffff ffffffff 00000000 00000000     ................
  40de20:	00000000 ffffffff ffffffff ffffffff     ................
  40de30:	ffffffff 0000ffff 00000000 00000000     ................
	...
  40de4c:	ffff0000 ffffffff 00ffffff 00000000     ................
  40de5c:	00000000 ffffffff ffffffff ffffffff     ................
  40de6c:	00000000 ffff0000 ffffffff 00ffffff     ................
  40de7c:	00000000 ffffff00 ffffffff ffffffff     ................
  40de8c:	ffffffff 00ffffff 00000000 ffffff00     ................
  40de9c:	00ffffff 00000000 ffffff00 ffffffff     ................
  40deac:	ffffffff ffffffff 00ffffff 00000000     ................
  40debc:	ffffff00 00ffffff 00000000 ffffff00     ................
  40decc:	ffffffff ffffffff ffffffff 00ffffff     ................
  40dedc:	00000000 ffffff00 00ffffff 00000000     ................
  40deec:	00000000 ffffffff ffffffff ffffffff     ................
	...
  40df04:	ffffff00 ffffffff 0000ffff 00000000     ................
	...
  40df28:	ffffff00 ffffffff ffffffff 000000ff     ................
	...
  40df44:	00ffffff 00000000 ffffff00 ffffffff     ................
  40df54:	ffffffff ffffffff ffffffff ffffffff     ................
  40df64:	ffffffff 00ffffff 00000000 ffffff00     ................
  40df74:	ffffffff ffffffff ffffffff ffffffff     ................
  40df84:	ffffffff ffffffff 00ffffff 00000000     ................
  40df94:	ffffff00 ffffffff ffffffff ffffffff     ................
  40dfa4:	ffffffff ffffffff ffffffff 00000000     ................
  40dfb4:	ffff0000 ffffffff 00ffffff ffff0000     ................
  40dfc4:	ffffffff ffffffff ffffffff 000000ff     ................
  40dfd4:	00000000 ffff0000 ffffffff 00ffffff     ................
	...
  40dff8:	ff000000 ffffffff ffffffff ffffffff     ................
  40e008:	0000ffff 00000000 00000000 00000000     ................
  40e018:	ffffff00 ffffffff ffffffff ffffffff     ................
  40e028:	ffffffff ffffffff ffffffff ffffffff     ................
  40e038:	ffffffff ffffffff ffffffff ffffffff     ................
  40e048:	ffffffff ffffffff ffffffff ffffffff     ................
  40e058:	ffffffff ffffffff ffffffff ffffffff     ................
  40e068:	ffffffff ffffffff ffffffff ffffffff     ................
  40e078:	ffffffff ffffffff ffffffff ffffffff     ................
  40e088:	ffffffff ffffffff ffffffff ffffffff     ................
  40e098:	ffffffff ffffffff ffffffff ffffffff     ................
  40e0a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e0b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e0c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e0d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e0e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e0f8:	ffffffff ffffffff                       ........

0040e100 <image_data_calibri_23_0x3a>:
  40e100:	ffffffff ffffffff ffffffff ffffffff     ................
  40e110:	ffffffff ffffffff ffffffff ffffffff     ................
  40e120:	ffffffff ffffffff ffffffff ffffffff     ................
  40e130:	ffffffff ffffffff ffffffff ffffffff     ................
  40e140:	ffffffff ffffffff ffffffff ffffffff     ................
  40e150:	ffffffff ffffffff ffffffff ffffffff     ................
  40e160:	ffffffff ffffffff ffffffff ffffffff     ................
  40e170:	ffffffff ffffffff ffffffff ffffffff     ................
  40e180:	ffffffff 00000000 ffff0000 ffffffff     ................
  40e190:	ffffffff 0000ffff 00000000 ffffffff     ................
  40e1a0:	ffffffff ffffffff 00000000 ffff0000     ................
  40e1b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e1c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e1d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e1e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e1f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e200:	ffffffff ffffffff ffffffff ffffffff     ................
  40e210:	ffffffff 00000000 ffff0000 ffffffff     ................
  40e220:	ffffffff 0000ffff 00000000 ffffffff     ................
  40e230:	ffffffff ffffffff 00000000 ffff0000     ................
  40e240:	ffffffff ffffffff ffffffff ffffffff     ................
  40e250:	ffffffff ffffffff ffffffff ffffffff     ................
  40e260:	ffffffff ffffffff ffffffff ffffffff     ................
  40e270:	ffffffff ffffffff ffffffff ffffffff     ................
  40e280:	ffffffff ffffffff ffffffff ffffffff     ................
  40e290:	ffffffff ffffffff ffffffff ffffffff     ................
  40e2a0:	ffffffff ffffffff ffffffff ffffffff     ................

0040e2b0 <image_data_calibri_23_0x3b>:
  40e2b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e2c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e2d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e2e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e2f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e300:	ffffffff ffffffff ffffffff ffffffff     ................
  40e310:	ffffffff ffffffff ffffffff ffffffff     ................
  40e320:	ffffffff ffffffff ffffffff ffffffff     ................
  40e330:	ffffffff ffffffff ffffffff ffffffff     ................
  40e340:	ffffffff 0000ffff 00000000 ffffffff     ................
  40e350:	ffffffff ffffffff 00000000 ffff0000     ................
  40e360:	ffffffff ffffffff 0000ffff 00000000     ................
  40e370:	ffffffff ffffffff ffffffff ffffffff     ................
  40e380:	ffffffff ffffffff ffffffff ffffffff     ................
  40e390:	ffffffff ffffffff ffffffff ffffffff     ................
  40e3a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e3b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e3c0:	ffffffff 00000000 ffff0000 ffffffff     ................
  40e3d0:	ffffffff 0000ffff 00000000 ffffffff     ................
  40e3e0:	ffffffff ffffffff 00000000 ffff0000     ................
  40e3f0:	ffffffff ffffffff 0000ffff ffffff00     ................
  40e400:	ffffffff ffffffff 000000ff ff000000     ................
  40e410:	ffffffff ffffffff 00ffffff ffff0000     ................
  40e420:	ffffffff ffffffff ffffffff ffffffff     ................
  40e430:	ffffffff ffffffff ffffffff ffffffff     ................
  40e440:	ffffffff ffffffff ffffffff ffffffff     ................
  40e450:	ffffffff ffffffff ffffffff ffffffff     ................

0040e460 <image_data_calibri_23_0x3c>:
  40e460:	ffffffff ffffffff ffffffff ffffffff     ................
  40e470:	ffffffff ffffffff ffffffff ffffffff     ................
  40e480:	ffffffff ffffffff ffffffff ffffffff     ................
  40e490:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e500:	ffffffff ffffffff ffffffff ffffffff     ................
  40e510:	ffffffff ffffffff ffffffff ffffffff     ................
  40e520:	ffffffff ffffffff ffffffff ffffffff     ................
  40e530:	ffffffff ffffffff ffffffff ffffffff     ................
  40e540:	000000ff ffffffff ffffffff ffffffff     ................
  40e550:	ffffffff ffffffff ffffffff 00000000     ................
  40e560:	00000000 ffffff00 ffffffff ffffffff     ................
  40e570:	ffffffff 00ffffff 00000000 00000000     ................
  40e580:	ff000000 ffffffff ffffffff ffffffff     ................
  40e590:	0000ffff 00000000 00000000 ffff0000     ................
  40e5a0:	ffffffff ffffffff ffffffff 000000ff     ................
	...
  40e5b8:	ffffff00 ffffffff ffffffff ffffffff     ................
  40e5c8:	ffffffff 0000ffff 00000000 ffffffff     ................
  40e5d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e5e8:	ffffffff 00ffffff 00000000 00000000     ................
  40e5f8:	ff000000 ffffffff ffffffff ffffffff     ................
  40e608:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
  40e620:	ffff0000 ffffffff ffffffff ffffffff     ................
  40e630:	ffffffff ffffffff ffffffff 000000ff     ................
	...
  40e648:	ffffff00 ffffffff ffffffff ffffffff     ................
  40e658:	ffffffff ffffffff ffffffff 00000000     ................
  40e668:	00000000 ffffff00 ffffffff ffffffff     ................
  40e678:	ffffffff ffffffff ffffffff ffffffff     ................
  40e688:	00ffffff ffff0000 ffffffff ffffffff     ................
  40e698:	ffffffff ffffffff ffffffff ffffffff     ................
  40e6a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e6b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e6c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e6d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e6e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e6f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e708:	ffffffff ffffffff ffffffff ffffffff     ................
  40e718:	ffffffff ffffffff ffffffff ffffffff     ................
  40e728:	ffffffff ffffffff ffffffff ffffffff     ................
  40e738:	ffffffff ffffffff ffffffff ffffffff     ................
  40e748:	ffffffff ffffffff ffffffff ffffffff     ................
  40e758:	ffffffff ffffffff ffffffff ffffffff     ................
  40e768:	ffffffff ffffffff ffffffff ffffffff     ................

0040e778 <image_data_calibri_23_0x3d>:
  40e778:	ffffffff ffffffff ffffffff ffffffff     ................
  40e788:	ffffffff ffffffff ffffffff ffffffff     ................
  40e798:	ffffffff ffffffff ffffffff ffffffff     ................
  40e7a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e7b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e7c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e7d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e7e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e7f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e808:	ffffffff ffffffff ffffffff ffffffff     ................
  40e818:	ffffffff ffffffff ffffffff ffffffff     ................
  40e828:	ffffffff ffffffff ffffffff ffffffff     ................
  40e838:	ffffffff ffffffff ffffffff ffffffff     ................
  40e848:	ffffffff ffffffff ffffffff ffffffff     ................
  40e858:	ffffffff ffffffff ffffffff ffffffff     ................
  40e868:	ffffffff ffffffff ffffffff ffffffff     ................
  40e878:	ffffffff ffffffff 00ffffff 00000000     ................
	...
  40e89c:	ffff0000 ffffffff 00000000 00000000     ................
	...
  40e8bc:	ff000000 ffffffff ffffffff ffffffff     ................
  40e8cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e90c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e91c:	ffffffff ffffffff ffffffff 00000000     ................
	...
  40e940:	ff000000 ffffffff 000000ff 00000000     ................
	...
  40e964:	ffffffff ffffffff ffffffff ffffffff     ................
  40e974:	ffffffff ffffffff ffffffff ffffffff     ................
  40e984:	ffffffff ffffffff ffffffff ffffffff     ................
  40e994:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea04:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea14:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea24:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea34:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea44:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea54:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea64:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea74:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea84:	ffffffff ffffffff ffffffff              ............

0040ea90 <image_data_calibri_23_0x3e>:
  40ea90:	ffffffff ffffffff ffffffff ffffffff     ................
  40eaa0:	ffffffff ffffffff ffffffff ffffffff     ................
  40eab0:	ffffffff ffffffff ffffffff ffffffff     ................
  40eac0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ead0:	ffffffff ffffffff ffffffff ffffffff     ................
  40eae0:	ffffffff ffffffff ffffffff ffffffff     ................
  40eaf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb00:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb10:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb20:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb30:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb40:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb50:	ffffffff ffffffff 000000ff ff000000     ................
  40eb60:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb70:	ffffffff ffffffff 0000ffff 00000000     ................
  40eb80:	ff000000 ffffffff ffffffff ffffffff     ................
  40eb90:	ffffffff ffffffff ffffffff ffffffff     ................
  40eba0:	000000ff 00000000 ffff0000 ffffffff     ................
  40ebb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ebc0:	ffffffff ffffffff 00000000 00000000     ................
  40ebd0:	ffffff00 ffffffff ffffffff ffffffff     ................
  40ebe0:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  40ebf8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ec08:	ffffffff ffffffff ffffffff 0000ffff     ................
  40ec18:	00000000 ffffffff ffffffff ffffffff     ................
  40ec28:	ffffffff ffffffff 000000ff 00000000     ................
  40ec38:	ffff0000 ffffffff ffffffff ffffffff     ................
  40ec48:	ffffffff 00000000 00000000 ffffff00     ................
  40ec58:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  40ec70:	ffffffff ffffffff ffffffff ffffffff     ................
  40ec80:	0000ffff 00000000 ff000000 ffffffff     ................
  40ec90:	ffffffff ffffffff ffffffff ffffffff     ................
  40eca0:	00ffffff 00000000 ffffff00 ffffffff     ................
  40ecb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ecc0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ecd0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ece0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ecf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed00:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed10:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed20:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed30:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed40:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed50:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed60:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed70:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed80:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed90:	ffffffff ffffffff ffffffff ffffffff     ................
  40eda0:	ffffffff ffffffff                       ........

0040eda8 <image_data_calibri_23_0x3f>:
  40eda8:	ffffffff ffffffff ffffffff ffffffff     ................
  40edb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40edc8:	ffffffff ffffffff ffffffff ffffffff     ................
  40edd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ede8:	ffffffff ffffffff 00ffffff 00000000     ................
	...
  40ee00:	ffff0000 ffffffff ffffffff ffffffff     ................
  40ee10:	000000ff 00000000 00000000 00000000     ................
  40ee20:	00000000 ffff0000 ffffffff ffffffff     ................
  40ee30:	0000ffff ffffff00 ffffffff ffffffff     ................
  40ee40:	000000ff 00000000 ffff0000 ffffffff     ................
  40ee50:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee60:	ffffffff 000000ff ff000000 ffffffff     ................
  40ee70:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee80:	ffffffff 0000ffff 00000000 ffffffff     ................
  40ee90:	ffffffff ffffffff ffffffff ffffffff     ................
  40eea0:	ffffffff 00ffffff 00000000 ffffff00     ................
  40eeb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40eec0:	ffffffff ffffffff 00000000 ffff0000     ................
  40eed0:	ffffffff ffffffff ffffffff ffffffff     ................
  40eee0:	ffffffff 0000ffff 00000000 ffffffff     ................
  40eef0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
  40ef08:	ffff0000 ffffffff ffffffff ffffffff     ................
  40ef18:	ffffffff 00ffffff 00000000 ffffff00     ................
  40ef28:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef38:	ffffffff ffffffff 00000000 ffff0000     ................
  40ef48:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef58:	ffffffff ffffffff 000000ff ff000000     ................
  40ef68:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef78:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef88:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef98:	ffffffff ffffffff 00ffffff 00000000     ................
  40efa8:	ffffff00 ffffffff ffffffff ffffffff     ................
  40efb8:	ffffffff ffffffff ffffffff 00000000     ................
  40efc8:	ffff0000 ffffffff ffffffff ffffffff     ................
  40efd8:	ffffffff ffffffff ffffffff 000000ff     ................
  40efe8:	ff000000 ffffffff ffffffff ffffffff     ................
  40eff8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f008:	ffffffff ffffffff ffffffff ffffffff     ................
  40f018:	ffffffff ffffffff ffffffff ffffffff     ................
  40f028:	ffffffff ffffffff ffffffff ffffffff     ................
  40f038:	ffffffff ffffffff ffffffff ffffffff     ................
  40f048:	ffffffff ffffffff ffffffff ffffffff     ................
  40f058:	ffffffff ffffffff ffffffff ffffffff     ................
  40f068:	ffffffff ffffffff ffffffff ffffffff     ................
  40f078:	ffffffff ffffffff ffffffff ffffffff     ................
  40f088:	ffffffff ffffffff ffffffff ffffffff     ................
  40f098:	ffffffff ffffffff ffffffff ffffffff     ................
  40f0a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f0b8:	ffffffff ffffffff                       ........

0040f0c0 <image_data_calibri_23_0x40>:
  40f0c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40f0d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40f0e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40f0f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40f100:	ffffffff ffffffff ffffffff ffffffff     ................
  40f110:	ffffffff ffffffff ffffffff ffffffff     ................
  40f120:	ffffffff ffffffff ffffffff ffffffff     ................
  40f130:	ffffffff ffffffff ffffffff ffffffff     ................
  40f140:	ffffffff ffffffff ffffffff ffffffff     ................
  40f150:	ffffffff ffffffff ffffffff ffffffff     ................
  40f160:	ffffffff ffffffff ffffffff ffffffff     ................
  40f170:	ffffffff ffffffff ffffffff ffffffff     ................
  40f180:	ffffffff ffffffff ffffffff ffffffff     ................
  40f190:	ffffffff 000000ff 00000000 00000000     ................
	...
  40f1a8:	ffff0000 ffffffff ffffffff ffffffff     ................
  40f1b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f1c8:	ffffffff 0000ffff 00000000 00000000     ................
	...
  40f1ec:	ff000000 ffffffff ffffffff ffffffff     ................
  40f1fc:	ffffffff ffffffff ffffffff 0000ffff     ................
  40f20c:	00000000 ff000000 ffffffff ffffffff     ................
  40f21c:	ffffffff ffffffff ffffffff 00000000     ................
  40f22c:	00000000 ffffff00 ffffffff ffffffff     ................
  40f23c:	ffffffff ffffffff 0000ffff 00000000     ................
  40f24c:	ff000000 ffffffff ffffffff ffffffff     ................
  40f25c:	ffffffff ffffffff ffffffff 0000ffff     ................
  40f26c:	00000000 ff000000 ffffffff ffffffff     ................
  40f27c:	ffffffff 0000ffff 00000000 ff000000     ................
  40f28c:	ffffffff ffffffff 00000000 00000000     ................
  40f29c:	ffffff00 ff000000 ffffffff ffffffff     ................
  40f2ac:	00000000 ffff0000 ffffffff ffffffff     ................
  40f2bc:	ffffffff 000000ff ff000000 ffffffff     ................
  40f2cc:	000000ff 00000000 00000000 00000000     ................
  40f2dc:	00000000 ffff0000 ffffffff 00ffffff     ................
  40f2ec:	00000000 ffffff00 ffffffff ffffffff     ................
  40f2fc:	ffffffff ff000000 ffffffff ffffffff     ................
  40f30c:	00000000 ffff0000 ffffffff 00ffffff     ................
  40f31c:	00000000 ffffff00 ffffffff 0000ffff     ................
  40f32c:	00000000 ffffffff ffffffff ffffffff     ................
  40f33c:	00000000 ffff0000 ffffffff 00000000     ................
  40f34c:	ffff0000 ffffffff ffffffff 0000ffff     ................
  40f35c:	00000000 ffffffff ffffffff 000000ff     ................
  40f36c:	ff000000 ffffffff ffffffff 00ffffff     ................
  40f37c:	00000000 ffffff00 00ffffff 00000000     ................
  40f38c:	ffffff00 ffffffff ffffffff 000000ff     ................
  40f39c:	ffffffff ffffffff ffffffff 00000000     ................
  40f3ac:	ffff0000 ffffffff ffffffff 0000ffff     ................
  40f3bc:	00000000 ffffffff 0000ffff 00000000     ................
  40f3cc:	ffffffff ffffffff ffffffff ff000000     ................
  40f3dc:	ffffffff ffffffff 00ffffff 00000000     ................
  40f3ec:	ffffff00 ffffffff ffffffff 000000ff     ................
  40f3fc:	ff000000 ffffffff 000000ff ff000000     ................
  40f40c:	ffffffff ffffffff 00000000 ffff0000     ................
  40f41c:	ffffffff 00ffffff 00000000 ffffff00     ................
  40f42c:	ffffffff ffffffff ffffffff 00000000     ................
  40f43c:	ffff0000 ffffffff 00000000 00000000     ................
	...
  40f464:	ffffff00 ffffffff ffffffff ffffffff     ................
  40f474:	00ffffff 00000000 ffffff00 ffffffff     ................
  40f484:	0000ffff 00000000 ff000000 ffffffff     ................
  40f494:	ffffffff 00000000 00000000 ffffff00     ................
  40f4a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f4b4:	0000ffff 00000000 ffffffff ffffffff     ................
  40f4c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f4d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f4e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f4f4:	ffffffff 00000000 ffff0000 ffffffff     ................
  40f504:	ffffffff ffffffff ffffffff ffffffff     ................
  40f514:	ffffffff ffffffff ffffffff ffffffff     ................
  40f524:	ffffffff ffffffff ffffffff ffffffff     ................
  40f534:	00ffffff 00000000 00000000 ff000000     ................
  40f544:	ffffffff ffffffff ffffffff ffffffff     ................
  40f554:	000000ff ffffffff ffffffff ffffffff     ................
  40f564:	ffffffff ffffffff ffffffff ffffffff     ................
  40f574:	ffffffff 000000ff 00000000 00000000     ................
	...
  40f594:	ff000000 ffffffff ffffffff ffffffff     ................
  40f5a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f5b4:	ffffffff ffffffff 0000ffff 00000000     ................
	...
  40f5d0:	ff000000 ffffffff ffffffff ffffffff     ................
  40f5e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40f5f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40f600:	ffffffff ffffffff ffffffff ffffffff     ................
  40f610:	ffffffff ffffffff ffffffff ffffffff     ................
  40f620:	ffffffff ffffffff ffffffff ffffffff     ................
  40f630:	ffffffff ffffffff ffffffff ffffffff     ................
  40f640:	ffffffff ffffffff ffffffff ffffffff     ................
  40f650:	ffffffff ffffffff ffffffff ffffffff     ................
  40f660:	ffffffff ffffffff ffffffff ffffffff     ................
  40f670:	ffffffff ffffffff ffffffff ffffffff     ................
  40f680:	ffffffff ffffffff ffffffff ffffffff     ................
  40f690:	ffffffff ffffffff ffffffff ffffffff     ................
  40f6a0:	ffffffff ffffffff                       ........

0040f6a8 <image_data_calibri_23_0x41>:
  40f6a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f6b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f6c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f6d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f6e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f6f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f708:	ffffffff ffffffff ffffffff ffffffff     ................
  40f718:	ffffffff ffffffff ffffffff ffffffff     ................
  40f728:	ffffffff 00000000 00000000 ffffff00     ................
  40f738:	ffffffff ffffffff ffffffff ffffffff     ................
  40f748:	ffffffff ffffffff 00ffffff 00000000     ................
  40f758:	00000000 ffffffff ffffffff ffffffff     ................
  40f768:	ffffffff ffffffff ffffffff ffffffff     ................
  40f778:	0000ffff ffffff00 00000000 ffff0000     ................
  40f788:	ffffffff ffffffff ffffffff ffffffff     ................
  40f798:	ffffffff 0000ffff 00000000 00ffffff     ................
  40f7a8:	00000000 ffffff00 ffffffff ffffffff     ................
  40f7b8:	ffffffff ffffffff ffffffff 000000ff     ................
  40f7c8:	ff000000 0000ffff 00000000 ffffffff     ................
  40f7d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f7e8:	ffffffff ff000000 ffffffff ffffffff     ................
  40f7f8:	00000000 ffff0000 ffffffff ffffffff     ................
  40f808:	ffffffff ffffffff 00000000 ffff0000     ................
  40f818:	ffffffff 00ffffff 00000000 ffffff00     ................
  40f828:	ffffffff ffffffff ffffffff 00ffffff     ................
  40f838:	00000000 ffffff00 ffffffff ffffffff     ................
  40f848:	000000ff ffffffff ffffffff ffffffff     ................
  40f858:	ffffffff 0000ffff ffffff00 ffffffff     ................
  40f868:	ffffffff ffffffff 00000000 ffff0000     ................
  40f878:	ffffffff ffffffff 0000ffff 00000000     ................
	...
  40f89c:	ffffff00 ffffffff ffffffff 000000ff     ................
	...
  40f8c4:	ffffffff ffffffff 000000ff ff000000     ................
  40f8d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f8e4:	ffffffff 00000000 ffff0000 ffffffff     ................
  40f8f4:	00000000 ffff0000 ffffffff ffffffff     ................
  40f904:	ffffffff ffffffff 00ffffff 00000000     ................
  40f914:	ffffff00 00ffffff 00000000 ffffff00     ................
  40f924:	ffffffff ffffffff ffffffff ffffffff     ................
  40f934:	0000ffff 00000000 00000000 00000000     ................
  40f944:	ffffff00 ffffffff ffffffff ffffffff     ................
  40f954:	ffffffff ffffffff ffffffff 00000000     ................
  40f964:	ffff0000 ffffffff ffffffff ffffffff     ................
  40f974:	ffffffff ffffffff ffffffff ffffffff     ................
  40f984:	ffffffff ffffffff ffffffff ffffffff     ................
  40f994:	ffffffff ffffffff ffffffff ffffffff     ................
  40f9a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f9b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f9c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f9d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f9e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f9f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa04:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa14:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa24:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa34:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa44:	ffffffff ffffffff ffffffff              ............

0040fa50 <image_data_calibri_23_0x42>:
  40fa50:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa60:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa70:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa80:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa90:	ffffffff ffffffff ffffffff ffffffff     ................
  40faa0:	ffffffff ffffffff ffffffff ffffffff     ................
  40fab0:	ffffffff ffffffff ffffffff ffffffff     ................
  40fac0:	ffffffff ffffffff 00ffffff 00000000     ................
	...
  40fae0:	ffffffff ffffffff ffffffff ffffffff     ................
  40faf0:	0000ffff 00000000 00000000 00000000     ................
	...
  40fb08:	ffff0000 ffffffff ffffffff ffffffff     ................
  40fb18:	000000ff ff000000 ffffffff ffffffff     ................
  40fb28:	00ffffff 00000000 00000000 ffffffff     ................
  40fb38:	ffffffff ffffffff 00000000 ffff0000     ................
  40fb48:	ffffffff ffffffff ffffffff 000000ff     ................
  40fb58:	ff000000 ffffffff ffffffff 00ffffff     ................
  40fb68:	00000000 ffffff00 ffffffff ffffffff     ................
  40fb78:	ffffffff 00000000 ffff0000 ffffffff     ................
  40fb88:	ffffffff 0000ffff 00000000 ffffffff     ................
  40fb98:	ffffffff ffffffff 00000000 ffff0000     ................
  40fba8:	ffffffff ffffffff ffffffff 000000ff     ................
	...
  40fbc8:	ffff0000 ffffffff ffffffff ffffffff     ................
  40fbd8:	ffffffff 00000000 00000000 00000000     ................
	...
  40fbf4:	ff000000 ffffffff ffffffff 00ffffff     ................
  40fc04:	00000000 ffffff00 ffffffff ffffffff     ................
  40fc14:	ffffffff 00000000 00000000 ffffff00     ................
  40fc24:	ffffffff 0000ffff 00000000 ffffffff     ................
  40fc34:	ffffffff ffffffff ffffffff 0000ffff     ................
  40fc44:	00000000 ffffffff ffffffff 000000ff     ................
  40fc54:	ff000000 ffffffff ffffffff ffffffff     ................
  40fc64:	ffffffff 000000ff ff000000 ffffffff     ................
  40fc74:	ffffffff 00000000 ffff0000 ffffffff     ................
  40fc84:	ffffffff ffffffff ffffffff 00000000     ................
  40fc94:	ffff0000 ffffffff 00ffffff 00000000     ................
  40fca4:	ffffff00 ffffffff ffffffff ffffffff     ................
	...
  40fcbc:	ffffff00 ffffffff 0000ffff 00000000     ................
	...
  40fce0:	ffffff00 ffffffff ffffffff 000000ff     ................
	...
  40fd00:	ffff0000 ffffffff ffffffff ffffffff     ................
  40fd10:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd20:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd30:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd40:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd50:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd60:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd70:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd80:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd90:	ffffffff ffffffff ffffffff ffffffff     ................
  40fda0:	ffffffff ffffffff ffffffff ffffffff     ................
  40fdb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40fdc0:	ffffffff ffffffff ffffffff ffffffff     ................
  40fdd0:	ffffffff ffffffff ffffffff ffffffff     ................
  40fde0:	ffffffff ffffffff ffffffff ffffffff     ................
  40fdf0:	ffffffff ffffffff                       ........

0040fdf8 <image_data_calibri_23_0x43>:
  40fdf8:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe08:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe18:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe28:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe38:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe48:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe58:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe68:	ffffffff ffffffff 00ffffff 00000000     ................
	...
  40fe80:	ffff0000 ffffffff ffffffff ffffffff     ................
  40fe90:	000000ff 00000000 00000000 00000000     ................
	...
  40fea8:	ffffff00 ffffffff 0000ffff 00000000     ................
  40feb8:	ff000000 ffffffff ffffffff ffffffff     ................
  40fec8:	0000ffff ffffff00 ffffffff 0000ffff     ................
  40fed8:	00000000 ffffffff ffffffff ffffffff     ................
  40fee8:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  40ff00:	ffffffff ffffffff ffffffff ffffffff     ................
  40ff10:	ffffffff ffffffff 00ffffff 00000000     ................
  40ff20:	ffffff00 ffffffff ffffffff ffffffff     ................
  40ff30:	ffffffff ffffffff ffffffff 00ffffff     ................
  40ff40:	00000000 ffffff00 ffffffff ffffffff     ................
  40ff50:	ffffffff ffffffff ffffffff ffffffff     ................
  40ff60:	00ffffff 00000000 ffffff00 ffffffff     ................
  40ff70:	ffffffff ffffffff ffffffff ffffffff     ................
  40ff80:	ffffffff 00ffffff 00000000 ffffff00     ................
  40ff90:	ffffffff ffffffff ffffffff ffffffff     ................
  40ffa0:	ffffffff ffffffff 00ffffff 00000000     ................
  40ffb0:	ffffff00 ffffffff ffffffff ffffffff     ................
  40ffc0:	ffffffff ffffffff ffffffff 00ffffff     ................
  40ffd0:	00000000 ffffff00 ffffffff ffffffff     ................
  40ffe0:	ffffffff ffffffff ffffffff ffffffff     ................
  40fff0:	ffffffff 0000ffff 00000000 ffffffff     ................
  410000:	ffffffff ffffffff ffffffff ffffffff     ................
  410010:	ffffffff ffffffff 0000ffff 00000000     ................
  410020:	ff000000 ffffffff ffffffff ffffffff     ................
  410030:	0000ffff ffffff00 ffffffff ffffffff     ................
  410040:	000000ff 00000000 00000000 00000000     ................
	...
  410058:	ffffff00 ffffffff ffffffff ffffffff     ................
	...
  410078:	ffff0000 ffffffff ffffffff ffffffff     ................
  410088:	ffffffff ffffffff ffffffff ffffffff     ................
  410098:	ffffffff ffffffff ffffffff ffffffff     ................
  4100a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4100b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4100c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4100d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4100e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4100f8:	ffffffff ffffffff ffffffff ffffffff     ................
  410108:	ffffffff ffffffff ffffffff ffffffff     ................
  410118:	ffffffff ffffffff ffffffff ffffffff     ................
  410128:	ffffffff ffffffff ffffffff ffffffff     ................
  410138:	ffffffff ffffffff ffffffff ffffffff     ................
  410148:	ffffffff ffffffff ffffffff ffffffff     ................

00410158 <image_data_calibri_23_0x44>:
  410158:	ffffffff ffffffff ffffffff ffffffff     ................
  410168:	ffffffff ffffffff ffffffff ffffffff     ................
  410178:	ffffffff ffffffff ffffffff ffffffff     ................
  410188:	ffffffff ffffffff ffffffff ffffffff     ................
  410198:	ffffffff ffffffff ffffffff ffffffff     ................
  4101a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4101b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4101c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4101d8:	ffffffff 00000000 00000000 00000000     ................
	...
  4101f0:	ffffff00 ffffffff ffffffff ffffffff     ................
  410200:	ffffffff 0000ffff 00000000 00000000     ................
	...
  410220:	ffffff00 ffffffff ffffffff ffffffff     ................
  410230:	00000000 ffff0000 ffffffff ffffffff     ................
  410240:	0000ffff 00000000 00000000 ffff0000     ................
  410250:	ffffffff ffffffff 0000ffff 00000000     ................
  410260:	ffffffff ffffffff ffffffff ffffffff     ................
  410270:	0000ffff 00000000 ffffffff ffffffff     ................
  410280:	ffffffff 00000000 ffff0000 ffffffff     ................
  410290:	ffffffff ffffffff ffffffff 00000000     ................
  4102a0:	00000000 ffffff00 ffffffff 0000ffff     ................
  4102b0:	00000000 ffffffff ffffffff ffffffff     ................
  4102c0:	ffffffff ffffffff 000000ff ff000000     ................
  4102d0:	ffffffff ffffffff 00000000 ffff0000     ................
  4102e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4102f0:	00ffffff 00000000 ffffff00 ffffffff     ................
  410300:	0000ffff 00000000 ffffffff ffffffff     ................
  410310:	ffffffff ffffffff ffffffff 000000ff     ................
  410320:	ff000000 ffffffff ffffffff 00000000     ................
  410330:	ffff0000 ffffffff ffffffff ffffffff     ................
  410340:	ffffffff 00ffffff 00000000 ffffff00     ................
  410350:	ffffffff 0000ffff 00000000 ffffffff     ................
  410360:	ffffffff ffffffff ffffffff ffffffff     ................
  410370:	000000ff ff000000 ffffffff ffffffff     ................
  410380:	00000000 ffff0000 ffffffff ffffffff     ................
  410390:	ffffffff ffffffff 00000000 00000000     ................
  4103a0:	ffffff00 ffffffff 0000ffff 00000000     ................
  4103b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4103c0:	0000ffff 00000000 ffffffff ffffffff     ................
  4103d0:	ffffffff 00000000 ffff0000 ffffffff     ................
  4103e0:	ffffffff ffffffff 000000ff 00000000     ................
  4103f0:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
  410418:	ffffff00 ffffffff ffffffff ffffffff     ................
	...
  41043c:	ffffff00 ffffffff ffffffff ffffffff     ................
  41044c:	ffffffff ffffffff ffffffff ffffffff     ................
  41045c:	ffffffff ffffffff ffffffff ffffffff     ................
  41046c:	ffffffff ffffffff ffffffff ffffffff     ................
  41047c:	ffffffff ffffffff ffffffff ffffffff     ................
  41048c:	ffffffff ffffffff ffffffff ffffffff     ................
  41049c:	ffffffff ffffffff ffffffff ffffffff     ................
  4104ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4104bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4104cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4104dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4104ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4104fc:	ffffffff ffffffff ffffffff ffffffff     ................
  41050c:	ffffffff ffffffff ffffffff ffffffff     ................
  41051c:	ffffffff ffffffff ffffffff ffffffff     ................
  41052c:	ffffffff ffffffff ffffffff ffffffff     ................
  41053c:	ffffffff ffffffff ffffffff              ............

00410548 <image_data_calibri_23_0x45>:
  410548:	ffffffff ffffffff ffffffff ffffffff     ................
  410558:	ffffffff ffffffff ffffffff ffffffff     ................
  410568:	ffffffff ffffffff ffffffff ffffffff     ................
  410578:	ffffffff ffffffff ffffffff ffffffff     ................
  410588:	ffffffff ffffffff ffffffff ffffffff     ................
  410598:	ffffffff ffffffff ffffffff ffffffff     ................
  4105a8:	ffffffff ffffffff 000000ff 00000000     ................
	...
  4105c8:	ffffff00 ffffffff 0000ffff 00000000     ................
	...
  4105e8:	ffff0000 ffffffff 00ffffff 00000000     ................
  4105f8:	ffffff00 ffffffff ffffffff ffffffff     ................
  410608:	ffffffff ffffffff ffffffff 00000000     ................
  410618:	ffff0000 ffffffff ffffffff ffffffff     ................
  410628:	ffffffff ffffffff ffffffff 000000ff     ................
  410638:	ff000000 ffffffff ffffffff ffffffff     ................
  410648:	ffffffff ffffffff ffffffff 0000ffff     ................
  410658:	00000000 ffffffff ffffffff ffffffff     ................
  410668:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  41068c:	ffffffff ffffffff ffffffff 00000000     ................
	...
  4106ac:	ffffff00 ffffffff ffffffff 000000ff     ................
  4106bc:	ff000000 ffffffff ffffffff ffffffff     ................
  4106cc:	ffffffff ffffffff ffffffff 0000ffff     ................
  4106dc:	00000000 ffffffff ffffffff ffffffff     ................
  4106ec:	ffffffff ffffffff ffffffff 00ffffff     ................
  4106fc:	00000000 ffffff00 ffffffff ffffffff     ................
  41070c:	ffffffff ffffffff ffffffff ffffffff     ................
  41071c:	00000000 ffff0000 ffffffff ffffffff     ................
  41072c:	ffffffff ffffffff ffffffff ffffffff     ................
  41073c:	000000ff ff000000 ffffffff ffffffff     ................
  41074c:	ffffffff ffffffff ffffffff ffffffff     ................
  41075c:	0000ffff 00000000 00000000 00000000     ................
	...
  410774:	ffff0000 ffffffff 00ffffff 00000000     ................
	...
  410794:	ff000000 ffffffff ffffffff ffffffff     ................
  4107a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4107b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4107c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4107d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4107e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4107f4:	ffffffff ffffffff ffffffff ffffffff     ................
  410804:	ffffffff ffffffff ffffffff ffffffff     ................
  410814:	ffffffff ffffffff ffffffff ffffffff     ................
  410824:	ffffffff ffffffff ffffffff ffffffff     ................
  410834:	ffffffff ffffffff ffffffff ffffffff     ................
  410844:	ffffffff ffffffff ffffffff ffffffff     ................
  410854:	ffffffff ffffffff ffffffff              ............

00410860 <image_data_calibri_23_0x46>:
  410860:	ffffffff ffffffff ffffffff ffffffff     ................
  410870:	ffffffff ffffffff ffffffff ffffffff     ................
  410880:	ffffffff ffffffff ffffffff ffffffff     ................
  410890:	ffffffff ffffffff ffffffff ffffffff     ................
  4108a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4108b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4108c0:	ffffffff ffffffff 000000ff 00000000     ................
	...
  4108e0:	ffffff00 ffffffff 0000ffff 00000000     ................
	...
  410900:	ffff0000 ffffffff 00ffffff 00000000     ................
  410910:	ffffff00 ffffffff ffffffff ffffffff     ................
  410920:	ffffffff ffffffff ffffffff 00000000     ................
  410930:	ffff0000 ffffffff ffffffff ffffffff     ................
  410940:	ffffffff ffffffff ffffffff 000000ff     ................
  410950:	ff000000 ffffffff ffffffff ffffffff     ................
  410960:	ffffffff ffffffff ffffffff 0000ffff     ................
  410970:	00000000 ffffffff ffffffff ffffffff     ................
  410980:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  4109a4:	ff000000 ffffffff ffffffff 00000000     ................
	...
  4109c8:	ffffffff ffffffff 000000ff ff000000     ................
  4109d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4109e8:	ffffffff ffffffff 0000ffff 00000000     ................
  4109f8:	ffffffff ffffffff ffffffff ffffffff     ................
  410a08:	ffffffff ffffffff 00ffffff 00000000     ................
  410a18:	ffffff00 ffffffff ffffffff ffffffff     ................
  410a28:	ffffffff ffffffff ffffffff 00000000     ................
  410a38:	ffff0000 ffffffff ffffffff ffffffff     ................
  410a48:	ffffffff ffffffff ffffffff 000000ff     ................
  410a58:	ff000000 ffffffff ffffffff ffffffff     ................
  410a68:	ffffffff ffffffff ffffffff 0000ffff     ................
  410a78:	00000000 ffffffff ffffffff ffffffff     ................
  410a88:	ffffffff ffffffff ffffffff 00ffffff     ................
  410a98:	00000000 ffffff00 ffffffff ffffffff     ................
  410aa8:	ffffffff ffffffff ffffffff ffffffff     ................
  410ab8:	ffffffff ffffffff ffffffff ffffffff     ................
  410ac8:	ffffffff ffffffff ffffffff ffffffff     ................
  410ad8:	ffffffff ffffffff ffffffff ffffffff     ................
  410ae8:	ffffffff ffffffff ffffffff ffffffff     ................
  410af8:	ffffffff ffffffff ffffffff ffffffff     ................
  410b08:	ffffffff ffffffff ffffffff ffffffff     ................
  410b18:	ffffffff ffffffff ffffffff ffffffff     ................
  410b28:	ffffffff ffffffff ffffffff ffffffff     ................
  410b38:	ffffffff ffffffff ffffffff ffffffff     ................
  410b48:	ffffffff ffffffff ffffffff ffffffff     ................
  410b58:	ffffffff ffffffff ffffffff ffffffff     ................
  410b68:	ffffffff ffffffff ffffffff ffffffff     ................

00410b78 <image_data_calibri_23_0x47>:
  410b78:	ffffffff ffffffff ffffffff ffffffff     ................
  410b88:	ffffffff ffffffff ffffffff ffffffff     ................
  410b98:	ffffffff ffffffff ffffffff ffffffff     ................
  410ba8:	ffffffff ffffffff ffffffff ffffffff     ................
  410bb8:	ffffffff ffffffff ffffffff ffffffff     ................
  410bc8:	ffffffff ffffffff ffffffff ffffffff     ................
  410bd8:	ffffffff ffffffff ffffffff ffffffff     ................
  410be8:	ffffffff ffffffff ffffffff ffffffff     ................
  410bf8:	ffffffff ffffffff ffffffff ffffffff     ................
  410c08:	ffffffff 0000ffff 00000000 00000000     ................
	...
  410c20:	ff000000 ffffffff ffffffff ffffffff     ................
  410c30:	ffffffff ffffffff 00000000 00000000     ................
	...
  410c50:	ff000000 ffffffff ffffffff ffffffff     ................
  410c60:	0000ffff 00000000 ff000000 ffffffff     ................
  410c70:	ffffffff ffffffff 0000ffff 00000000     ................
  410c80:	ffffffff ffffffff ffffffff 00000000     ................
  410c90:	ffff0000 ffffffff ffffffff ffffffff     ................
  410ca0:	ffffffff ffffffff ffffffff ffffffff     ................
  410cb0:	ffffffff ffffffff 000000ff ff000000     ................
  410cc0:	ffffffff ffffffff ffffffff ffffffff     ................
  410cd0:	ffffffff ffffffff ffffffff ffffffff     ................
  410ce0:	00ffffff 00000000 ffffff00 ffffffff     ................
  410cf0:	ffffffff ffffffff ffffffff ffffffff     ................
  410d00:	ffffffff ffffffff ffffffff ffffffff     ................
  410d10:	00000000 ffff0000 ffffffff ffffffff     ................
  410d20:	ffffffff ffffffff ffffffff ffffffff     ................
  410d30:	ffffffff ffffffff ffffffff 000000ff     ................
  410d40:	ff000000 ffffffff ffffffff 00ffffff     ................
	...
  410d60:	ffffff00 ffffffff 0000ffff 00000000     ................
  410d70:	ffffffff ffffffff ffffffff 00000000     ................
	...
  410d8c:	ffff0000 ffffffff 00ffffff 00000000     ................
  410d9c:	ffffff00 ffffffff ffffffff ffffffff     ................
  410dac:	ffffffff ffffffff 000000ff ff000000     ................
  410dbc:	ffffffff ffffffff 00000000 00000000     ................
  410dcc:	ffffff00 ffffffff ffffffff ffffffff     ................
  410ddc:	ffffffff 0000ffff 00000000 ffffffff     ................
  410dec:	ffffffff ffffffff 00000000 ffff0000     ................
  410dfc:	ffffffff ffffffff ffffffff ffffffff     ................
  410e0c:	00ffffff 00000000 ffffff00 ffffffff     ................
  410e1c:	ffffffff ffffffff 00000000 00000000     ................
  410e2c:	ffffff00 ffffffff ffffffff ffffffff     ................
  410e3c:	00000000 ffff0000 ffffffff ffffffff     ................
  410e4c:	ffffffff 000000ff 00000000 00000000     ................
	...
  410e6c:	ff000000 ffffffff ffffffff ffffffff     ................
  410e7c:	ffffffff ffffffff 00000000 00000000     ................
	...
  410e94:	ffff0000 ffffffff ffffffff ffffffff     ................
  410ea4:	ffffffff ffffffff ffffffff ffffffff     ................
  410eb4:	ffffffff ffffffff ffffffff ffffffff     ................
  410ec4:	ffffffff ffffffff ffffffff ffffffff     ................
  410ed4:	ffffffff ffffffff ffffffff ffffffff     ................
  410ee4:	ffffffff ffffffff ffffffff ffffffff     ................
  410ef4:	ffffffff ffffffff ffffffff ffffffff     ................
  410f04:	ffffffff ffffffff ffffffff ffffffff     ................
  410f14:	ffffffff ffffffff ffffffff ffffffff     ................
  410f24:	ffffffff ffffffff ffffffff ffffffff     ................
  410f34:	ffffffff ffffffff ffffffff ffffffff     ................
  410f44:	ffffffff ffffffff ffffffff ffffffff     ................
  410f54:	ffffffff ffffffff ffffffff ffffffff     ................
  410f64:	ffffffff ffffffff ffffffff ffffffff     ................
  410f74:	ffffffff ffffffff ffffffff ffffffff     ................
  410f84:	ffffffff ffffffff ffffffff ffffffff     ................
  410f94:	ffffffff ffffffff ffffffff ffffffff     ................
  410fa4:	ffffffff ffffffff ffffffff              ............

00410fb0 <image_data_calibri_23_0x48>:
  410fb0:	ffffffff ffffffff ffffffff ffffffff     ................
  410fc0:	ffffffff ffffffff ffffffff ffffffff     ................
  410fd0:	ffffffff ffffffff ffffffff ffffffff     ................
  410fe0:	ffffffff ffffffff ffffffff ffffffff     ................
  410ff0:	ffffffff ffffffff ffffffff ffffffff     ................
  411000:	ffffffff ffffffff ffffffff ffffffff     ................
  411010:	ffffffff ffffffff ffffffff ffffffff     ................
  411020:	ffffffff ffffffff ffffffff ffffffff     ................
  411030:	ffffffff 00000000 ffff0000 ffffffff     ................
  411040:	ffffffff ffffffff ffffffff 00000000     ................
  411050:	ffff0000 ffffffff ffffffff 0000ffff     ................
  411060:	00000000 ffffffff ffffffff ffffffff     ................
  411070:	ffffffff 0000ffff 00000000 ffffffff     ................
  411080:	ffffffff ffffffff 00000000 ffff0000     ................
  411090:	ffffffff ffffffff ffffffff ffffffff     ................
  4110a0:	00000000 ffff0000 ffffffff ffffffff     ................
  4110b0:	0000ffff 00000000 ffffffff ffffffff     ................
  4110c0:	ffffffff ffffffff 0000ffff 00000000     ................
  4110d0:	ffffffff ffffffff ffffffff 00000000     ................
  4110e0:	ffff0000 ffffffff ffffffff ffffffff     ................
  4110f0:	ffffffff 00000000 ffff0000 ffffffff     ................
  411100:	ffffffff 0000ffff 00000000 ffffffff     ................
  411110:	ffffffff ffffffff ffffffff 0000ffff     ................
  411120:	00000000 ffffffff ffffffff ffffffff     ................
	...
  41114c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
  411178:	ffffffff ffffffff ffffffff 00000000     ................
  411188:	ffff0000 ffffffff ffffffff ffffffff     ................
  411198:	ffffffff 00000000 ffff0000 ffffffff     ................
  4111a8:	ffffffff 0000ffff 00000000 ffffffff     ................
  4111b8:	ffffffff ffffffff ffffffff 0000ffff     ................
  4111c8:	00000000 ffffffff ffffffff ffffffff     ................
  4111d8:	00000000 ffff0000 ffffffff ffffffff     ................
  4111e8:	ffffffff ffffffff 00000000 ffff0000     ................
  4111f8:	ffffffff ffffffff 0000ffff 00000000     ................
  411208:	ffffffff ffffffff ffffffff ffffffff     ................
  411218:	0000ffff 00000000 ffffffff ffffffff     ................
  411228:	ffffffff 00000000 ffff0000 ffffffff     ................
  411238:	ffffffff ffffffff ffffffff 00000000     ................
  411248:	ffff0000 ffffffff ffffffff 0000ffff     ................
  411258:	00000000 ffffffff ffffffff ffffffff     ................
  411268:	ffffffff 0000ffff 00000000 ffffffff     ................
  411278:	ffffffff ffffffff 00000000 ffff0000     ................
  411288:	ffffffff ffffffff ffffffff ffffffff     ................
  411298:	00000000 ffff0000 ffffffff ffffffff     ................
  4112a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4112b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4112c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4112d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4112e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4112f8:	ffffffff ffffffff ffffffff ffffffff     ................
  411308:	ffffffff ffffffff ffffffff ffffffff     ................
  411318:	ffffffff ffffffff ffffffff ffffffff     ................
  411328:	ffffffff ffffffff ffffffff ffffffff     ................
  411338:	ffffffff ffffffff ffffffff ffffffff     ................
  411348:	ffffffff ffffffff ffffffff ffffffff     ................
  411358:	ffffffff ffffffff ffffffff ffffffff     ................
  411368:	ffffffff ffffffff ffffffff ffffffff     ................
  411378:	ffffffff ffffffff ffffffff ffffffff     ................
  411388:	ffffffff ffffffff ffffffff ffffffff     ................
  411398:	ffffffff ffffffff                       ........

004113a0 <image_data_calibri_23_0x49>:
  4113a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4113b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4113c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4113d0:	ffffffff ffffffff ffffffff 00000000     ................
  4113e0:	ffff0000 ffffffff ffffffff 0000ffff     ................
  4113f0:	00000000 ffffffff ffffffff ffffffff     ................
  411400:	00000000 ffff0000 ffffffff ffffffff     ................
  411410:	0000ffff 00000000 ffffffff ffffffff     ................
  411420:	ffffffff 00000000 ffff0000 ffffffff     ................
  411430:	ffffffff 0000ffff 00000000 ffffffff     ................
  411440:	ffffffff ffffffff 00000000 ffff0000     ................
  411450:	ffffffff ffffffff 0000ffff 00000000     ................
  411460:	ffffffff ffffffff ffffffff 00000000     ................
  411470:	ffff0000 ffffffff ffffffff 0000ffff     ................
  411480:	00000000 ffffffff ffffffff ffffffff     ................
  411490:	00000000 ffff0000 ffffffff ffffffff     ................
  4114a0:	0000ffff 00000000 ffffffff ffffffff     ................
  4114b0:	ffffffff 00000000 ffff0000 ffffffff     ................
  4114c0:	ffffffff 0000ffff 00000000 ffffffff     ................
  4114d0:	ffffffff ffffffff 00000000 ffff0000     ................
  4114e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4114f0:	ffffffff ffffffff ffffffff ffffffff     ................
  411500:	ffffffff ffffffff ffffffff ffffffff     ................
  411510:	ffffffff ffffffff ffffffff ffffffff     ................
  411520:	ffffffff ffffffff ffffffff ffffffff     ................
  411530:	ffffffff ffffffff ffffffff ffffffff     ................
  411540:	ffffffff ffffffff ffffffff ffffffff     ................

00411550 <image_data_calibri_23_0x4a>:
  411550:	ffffffff ffffffff ffffffff ffffffff     ................
  411560:	ffffffff ffffffff ffffffff ffffffff     ................
  411570:	ffffffff ffffffff ffffffff ffffffff     ................
  411580:	ffffffff ffffffff ffffffff ffffffff     ................
  411590:	ffffffff ffffffff 00ffffff 00000000     ................
  4115a0:	ffffff00 ffffffff ffffffff ffffffff     ................
  4115b0:	00000000 ffff0000 ffffffff ffffffff     ................
  4115c0:	ffffffff 000000ff ff000000 ffffffff     ................
  4115d0:	ffffffff ffffffff 0000ffff 00000000     ................
  4115e0:	ffffffff ffffffff ffffffff 00ffffff     ................
  4115f0:	00000000 ffffff00 ffffffff ffffffff     ................
  411600:	ffffffff 00000000 ffff0000 ffffffff     ................
  411610:	ffffffff ffffffff 000000ff ff000000     ................
  411620:	ffffffff ffffffff ffffffff 0000ffff     ................
  411630:	00000000 ffffffff ffffffff ffffffff     ................
  411640:	00ffffff 00000000 ffffff00 ffffffff     ................
  411650:	ffffffff ffffffff 00000000 ffff0000     ................
  411660:	ffffffff ffffffff ffffffff 000000ff     ................
  411670:	ff000000 ffffffff ffffffff ffffffff     ................
  411680:	0000ffff 00000000 00ffffff ffff0000     ................
  411690:	ffffffff 00ffffff 00000000 ffffff00     ................
	...
  4116b0:	ffff0000 ffffffff 00000000 00000000     ................
  4116c0:	00000000 ffffffff ffffffff ffffffff     ................
  4116d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4116e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4116f0:	ffffffff ffffffff ffffffff ffffffff     ................
  411700:	ffffffff ffffffff ffffffff ffffffff     ................
  411710:	ffffffff ffffffff ffffffff ffffffff     ................
  411720:	ffffffff ffffffff ffffffff ffffffff     ................
  411730:	ffffffff ffffffff ffffffff ffffffff     ................
  411740:	ffffffff ffffffff                       ........

00411748 <image_data_calibri_23_0x4b>:
  411748:	ffffffff ffffffff ffffffff ffffffff     ................
  411758:	ffffffff ffffffff ffffffff ffffffff     ................
  411768:	ffffffff ffffffff ffffffff ffffffff     ................
  411778:	ffffffff ffffffff ffffffff ffffffff     ................
  411788:	ffffffff ffffffff ffffffff ffffffff     ................
  411798:	ffffffff ffffffff ffffffff ffffffff     ................
  4117a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4117b8:	0000ffff 00000000 ffffffff ffffffff     ................
  4117c8:	ffffffff 00ffffff 00000000 ffffff00     ................
  4117d8:	ffffffff 0000ffff 00000000 ffffffff     ................
  4117e8:	ffffffff ffffffff 00000000 00000000     ................
  4117f8:	ffffff00 ffffffff 0000ffff 00000000     ................
  411808:	ffffffff ffffffff 000000ff 00000000     ................
  411818:	ffff0000 ffffffff ffffffff 0000ffff     ................
  411828:	00000000 ffffffff ffffffff 000000ff     ................
  411838:	ff000000 ffffffff ffffffff ffffffff     ................
  411848:	0000ffff 00000000 ffffffff 0000ffff     ................
  411858:	00000000 ffffffff ffffffff ffffffff     ................
  411868:	ffffffff 0000ffff 00000000 00ffffff     ................
  411878:	00000000 ffffff00 ffffffff ffffffff     ................
  411888:	ffffffff ffffffff 0000ffff 00000000     ................
  411898:	00000000 ffff0000 ffffffff ffffffff     ................
  4118a8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
  4118c0:	ffff0000 ffffffff ffffffff ffffffff     ................
  4118d0:	ffffffff ffffffff 0000ffff 00000000     ................
  4118e0:	00ffffff 00000000 ffffff00 ffffffff     ................
  4118f0:	ffffffff ffffffff ffffffff 0000ffff     ................
  411900:	00000000 ffffffff 0000ffff 00000000     ................
  411910:	ffffffff ffffffff ffffffff ffffffff     ................
  411920:	0000ffff 00000000 ffffffff 0000ffff     ................
  411930:	00000000 ff000000 ffffffff ffffffff     ................
  411940:	ffffffff 0000ffff 00000000 ffffffff     ................
  411950:	ffffffff 000000ff ff000000 ffffffff     ................
  411960:	ffffffff ffffffff 0000ffff 00000000     ................
  411970:	ffffffff ffffffff ffffffff 00000000     ................
  411980:	ffff0000 ffffffff ffffffff 0000ffff     ................
  411990:	00000000 ffffffff ffffffff ffffffff     ................
  4119a0:	00ffffff 00000000 ffffff00 ffffffff     ................
  4119b0:	0000ffff 00000000 ffffffff ffffffff     ................
  4119c0:	ffffffff 00ffffff 00000000 00000000     ................
  4119d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4119e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4119f0:	ffffffff ffffffff ffffffff ffffffff     ................
  411a00:	ffffffff ffffffff ffffffff ffffffff     ................
  411a10:	ffffffff ffffffff ffffffff ffffffff     ................
  411a20:	ffffffff ffffffff ffffffff ffffffff     ................
  411a30:	ffffffff ffffffff ffffffff ffffffff     ................
  411a40:	ffffffff ffffffff ffffffff ffffffff     ................
  411a50:	ffffffff ffffffff ffffffff ffffffff     ................
  411a60:	ffffffff ffffffff ffffffff ffffffff     ................
  411a70:	ffffffff ffffffff ffffffff ffffffff     ................
  411a80:	ffffffff ffffffff ffffffff ffffffff     ................
  411a90:	ffffffff ffffffff ffffffff ffffffff     ................
  411aa0:	ffffffff ffffffff                       ........

00411aa8 <image_data_calibri_23_0x4c>:
  411aa8:	ffffffff ffffffff ffffffff ffffffff     ................
  411ab8:	ffffffff ffffffff ffffffff ffffffff     ................
  411ac8:	ffffffff ffffffff ffffffff ffffffff     ................
  411ad8:	ffffffff ffffffff ffffffff ffffffff     ................
  411ae8:	ffffffff ffffffff ffffffff ffffffff     ................
  411af8:	ffffffff ffffffff ffffffff ffffffff     ................
  411b08:	00000000 ffff0000 ffffffff ffffffff     ................
  411b18:	ffffffff ffffffff ffffffff 0000ffff     ................
  411b28:	00000000 ffffffff ffffffff ffffffff     ................
  411b38:	ffffffff ffffffff ffffffff 00000000     ................
  411b48:	ffff0000 ffffffff ffffffff ffffffff     ................
  411b58:	ffffffff ffffffff 0000ffff 00000000     ................
  411b68:	ffffffff ffffffff ffffffff ffffffff     ................
  411b78:	ffffffff ffffffff 00000000 ffff0000     ................
  411b88:	ffffffff ffffffff ffffffff ffffffff     ................
  411b98:	ffffffff 0000ffff 00000000 ffffffff     ................
  411ba8:	ffffffff ffffffff ffffffff ffffffff     ................
  411bb8:	ffffffff 00000000 ffff0000 ffffffff     ................
  411bc8:	ffffffff ffffffff ffffffff ffffffff     ................
  411bd8:	0000ffff 00000000 ffffffff ffffffff     ................
  411be8:	ffffffff ffffffff ffffffff ffffffff     ................
  411bf8:	00000000 ffff0000 ffffffff ffffffff     ................
  411c08:	ffffffff ffffffff ffffffff 0000ffff     ................
  411c18:	00000000 ffffffff ffffffff ffffffff     ................
  411c28:	ffffffff ffffffff ffffffff 00000000     ................
  411c38:	ffff0000 ffffffff ffffffff ffffffff     ................
  411c48:	ffffffff ffffffff 0000ffff 00000000     ................
  411c58:	ffffffff ffffffff ffffffff ffffffff     ................
  411c68:	ffffffff ffffffff 00000000 ffff0000     ................
  411c78:	ffffffff ffffffff ffffffff ffffffff     ................
  411c88:	ffffffff 0000ffff 00000000 00000000     ................
	...
  411ca4:	ffff0000 ffffffff 00000000 00000000     ................
	...
  411cc4:	ffffffff ffffffff ffffffff ffffffff     ................
  411cd4:	ffffffff ffffffff ffffffff ffffffff     ................
  411ce4:	ffffffff ffffffff ffffffff ffffffff     ................
  411cf4:	ffffffff ffffffff ffffffff ffffffff     ................
  411d04:	ffffffff ffffffff ffffffff ffffffff     ................
  411d14:	ffffffff ffffffff ffffffff ffffffff     ................
  411d24:	ffffffff ffffffff ffffffff ffffffff     ................
  411d34:	ffffffff ffffffff ffffffff ffffffff     ................
  411d44:	ffffffff ffffffff ffffffff ffffffff     ................
  411d54:	ffffffff ffffffff ffffffff ffffffff     ................
  411d64:	ffffffff ffffffff ffffffff ffffffff     ................
  411d74:	ffffffff                                ....

00411d78 <image_data_calibri_23_0x4d>:
  411d78:	ffffffff ffffffff ffffffff ffffffff     ................
  411d88:	ffffffff ffffffff ffffffff ffffffff     ................
  411d98:	ffffffff ffffffff ffffffff ffffffff     ................
  411da8:	ffffffff ffffffff ffffffff ffffffff     ................
  411db8:	ffffffff ffffffff ffffffff ffffffff     ................
  411dc8:	ffffffff ffffffff ffffffff ffffffff     ................
  411dd8:	ffffffff ffffffff ffffffff ffffffff     ................
  411de8:	ffffffff ffffffff ffffffff ffffffff     ................
  411df8:	ffffffff ffffffff ffffffff ffffffff     ................
  411e08:	ffffffff ffffffff ffffffff ffffffff     ................
  411e18:	ffffffff ffffffff ffffffff ffffffff     ................
  411e28:	ffffffff ffffffff 0000ffff 00000000     ................
  411e38:	ff000000 ffffffff ffffffff ffffffff     ................
  411e48:	ffffffff ffffffff ffffffff ffffffff     ................
  411e58:	000000ff 00000000 ffff0000 ffffffff     ................
  411e68:	ffffffff 0000ffff 00000000 00000000     ................
  411e78:	ffff0000 ffffffff ffffffff ffffffff     ................
  411e88:	ffffffff ffffffff 0000ffff 00000000     ................
  411e98:	00000000 ffff0000 ffffffff ffffffff     ................
  411ea8:	0000ffff 00000000 00000000 ffff0000     ................
  411eb8:	ffffffff ffffffff ffffffff ffffffff     ................
  411ec8:	ffffffff 0000ffff 00000000 00000000     ................
  411ed8:	ffff0000 ffffffff ffffffff 0000ffff     ................
  411ee8:	00000000 00ffffff 00000000 ffffff00     ................
  411ef8:	ffffffff ffffffff ffffffff 00ffffff     ................
  411f08:	00000000 ffffff00 00000000 ffff0000     ................
  411f18:	ffffffff ffffffff 0000ffff 00000000     ................
  411f28:	00ffffff 00000000 ffffff00 ffffffff     ................
  411f38:	ffffffff ffffffff 00ffffff 00000000     ................
  411f48:	ffffff00 00000000 ffff0000 ffffffff     ................
  411f58:	ffffffff 0000ffff 00000000 00ffffff     ................
  411f68:	00000000 ffffff00 ffffffff ffffffff     ................
  411f78:	ffffffff 00ffffff ffff0000 ffffffff     ................
  411f88:	00000000 ffff0000 ffffffff ffffffff     ................
  411f98:	0000ffff 00000000 ffffffff 0000ffff     ................
  411fa8:	00000000 ffffffff ffffffff ffffffff     ................
  411fb8:	00000000 ffff0000 ffffffff 00000000     ................
  411fc8:	ffff0000 ffffffff ffffffff 0000ffff     ................
  411fd8:	00000000 ffffffff 0000ffff 00000000     ................
  411fe8:	ffffffff ffffffff ffffffff 00000000     ................
  411ff8:	ffff0000 ffffffff 00000000 ffff0000     ................
  412008:	ffffffff ffffffff 0000ffff 00000000     ................
  412018:	ffffffff ffffffff 000000ff ff000000     ................
  412028:	ffffffff 000000ff ff000000 ffffffff     ................
  412038:	ffffffff 00000000 ffff0000 ffffffff     ................
  412048:	ffffffff 0000ffff 00000000 ffffffff     ................
  412058:	ffffffff 000000ff ff000000 ffffffff     ................
  412068:	000000ff ff000000 ffffffff ffffffff     ................
  412078:	00000000 ffff0000 ffffffff ffffffff     ................
  412088:	0000ffff 00000000 ffffffff ffffffff     ................
  412098:	000000ff ff000000 ffffffff 000000ff     ................
  4120a8:	ff000000 ffffffff ffffffff 00000000     ................
  4120b8:	ffff0000 ffffffff ffffffff 0000ffff     ................
  4120c8:	00000000 ffffffff ffffffff ffffffff     ................
	...
  4120e4:	ffffffff ffffffff ffffffff 00000000     ................
  4120f4:	ffff0000 ffffffff ffffffff 0000ffff     ................
  412104:	00000000 ffffffff ffffffff ffffffff     ................
	...
  412120:	ffffffff ffffffff ffffffff 00000000     ................
  412130:	ffff0000 ffffffff ffffffff 0000ffff     ................
  412140:	00000000 ffffffff ffffffff ffffffff     ................
  412150:	00ffffff 00000000 ffffff00 ffffffff     ................
  412160:	ffffffff ffffffff 00000000 ffff0000     ................
  412170:	ffffffff ffffffff 0000ffff 00000000     ................
  412180:	ffffffff ffffffff ffffffff 00ffffff     ................
  412190:	00000000 ffffff00 ffffffff ffffffff     ................
  4121a0:	ffffffff 00000000 ffff0000 ffffffff     ................
  4121b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4121c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4121d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4121e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4121f0:	ffffffff ffffffff ffffffff ffffffff     ................
  412200:	ffffffff ffffffff ffffffff ffffffff     ................
  412210:	ffffffff ffffffff ffffffff ffffffff     ................
  412220:	ffffffff ffffffff ffffffff ffffffff     ................
  412230:	ffffffff ffffffff ffffffff ffffffff     ................
  412240:	ffffffff ffffffff ffffffff ffffffff     ................
  412250:	ffffffff ffffffff ffffffff ffffffff     ................
  412260:	ffffffff ffffffff ffffffff ffffffff     ................
  412270:	ffffffff ffffffff ffffffff ffffffff     ................
  412280:	ffffffff ffffffff ffffffff ffffffff     ................
  412290:	ffffffff ffffffff ffffffff ffffffff     ................
  4122a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4122b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4122c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4122d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4122e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4122f0:	ffffffff ffffffff ffffffff ffffffff     ................
  412300:	ffffffff ffffffff ffffffff ffffffff     ................
  412310:	ffffffff ffffffff                       ........

00412318 <image_data_calibri_23_0x4e>:
  412318:	ffffffff ffffffff ffffffff ffffffff     ................
  412328:	ffffffff ffffffff ffffffff ffffffff     ................
  412338:	ffffffff ffffffff ffffffff ffffffff     ................
  412348:	ffffffff ffffffff ffffffff ffffffff     ................
  412358:	ffffffff ffffffff ffffffff ffffffff     ................
  412368:	ffffffff ffffffff ffffffff ffffffff     ................
  412378:	ffffffff ffffffff ffffffff ffffffff     ................
  412388:	ffffffff ffffffff ffffffff ffffffff     ................
  412398:	ffffffff ffffffff ffffffff 000000ff     ................
  4123a8:	00000000 ffff0000 ffffffff ffffffff     ................
  4123b8:	ffffffff ffffffff 00000000 ffff0000     ................
  4123c8:	ffffffff ffffffff 0000ffff 00000000     ................
  4123d8:	00000000 ffff0000 ffffffff ffffffff     ................
  4123e8:	ffffffff 000000ff ff000000 ffffffff     ................
  4123f8:	ffffffff 00ffffff 00000000 00000000     ................
  412408:	ff000000 ffffffff ffffffff ffffffff     ................
  412418:	0000ffff 00000000 ffffffff ffffffff     ................
  412428:	ffffffff 00000000 ffff0000 000000ff     ................
  412438:	ff000000 ffffffff ffffffff 00ffffff     ................
  412448:	00000000 ffffff00 ffffffff ffffffff     ................
  412458:	000000ff ff000000 0000ffff 00000000     ................
  412468:	ffffffff ffffffff ffffffff 00000000     ................
  412478:	ffff0000 ffffffff ffffffff 0000ffff     ................
  412488:	00000000 ffffffff 0000ffff 00000000     ................
  412498:	ffffffff ffffffff 000000ff ff000000     ................
  4124a8:	ffffffff ffffffff 00ffffff 00000000     ................
  4124b8:	ffffff00 00ffffff 00000000 ffffff00     ................
  4124c8:	ffffffff 0000ffff 00000000 ffffffff     ................
  4124d8:	ffffffff ffffffff 00000000 ffff0000     ................
  4124e8:	ffffffff 00ffffff 00000000 ffffff00     ................
  4124f8:	00ffffff 00000000 ffffff00 ffffffff     ................
  412508:	ffffffff 000000ff ff000000 ffffffff     ................
  412518:	ffffffff 00000000 ffff0000 ffffffff     ................
  412528:	00000000 ffff0000 ffffffff ffffffff     ................
  412538:	0000ffff 00000000 ffffffff ffffffff     ................
  412548:	ffffffff 00000000 ffff0000 000000ff     ................
  412558:	ff000000 ffffffff ffffffff 00ffffff     ................
  412568:	00000000 ffffff00 ffffffff ffffffff     ................
  412578:	000000ff ff000000 0000ffff 00000000     ................
  412588:	ffffffff ffffffff ffffffff 00000000     ................
  412598:	ffff0000 ffffffff ffffffff ffffffff     ................
  4125a8:	000000ff 00000000 00000000 ffffff00     ................
  4125b8:	ffffffff ffffffff 000000ff ff000000     ................
  4125c8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
  4125e0:	ffff0000 ffffffff ffffffff 0000ffff     ................
  4125f0:	00000000 ffffffff ffffffff ffffffff     ................
  412600:	ffffffff 0000ffff 00000000 ff000000     ................
  412610:	ffffffff ffffffff 00ffffff 00000000     ................
  412620:	ffffff00 ffffffff ffffffff ffffffff     ................
  412630:	00ffffff 00000000 00000000 ffffffff     ................
  412640:	ffffffff ffffffff ffffffff ffffffff     ................
  412650:	ffffffff ffffffff ffffffff ffffffff     ................
  412660:	ffffffff ffffffff ffffffff ffffffff     ................
  412670:	ffffffff ffffffff ffffffff ffffffff     ................
  412680:	ffffffff ffffffff ffffffff ffffffff     ................
  412690:	ffffffff ffffffff ffffffff ffffffff     ................
  4126a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4126b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4126c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4126d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4126e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4126f0:	ffffffff ffffffff ffffffff ffffffff     ................
  412700:	ffffffff ffffffff ffffffff ffffffff     ................
  412710:	ffffffff ffffffff ffffffff ffffffff     ................
  412720:	ffffffff ffffffff ffffffff ffffffff     ................
  412730:	ffffffff ffffffff ffffffff ffffffff     ................
  412740:	ffffffff ffffffff ffffffff ffffffff     ................

00412750 <image_data_calibri_23_0x4f>:
  412750:	ffffffff ffffffff ffffffff ffffffff     ................
  412760:	ffffffff ffffffff ffffffff ffffffff     ................
  412770:	ffffffff ffffffff ffffffff ffffffff     ................
  412780:	ffffffff ffffffff ffffffff ffffffff     ................
  412790:	ffffffff ffffffff ffffffff ffffffff     ................
  4127a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4127b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4127c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4127d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4127e0:	ffffffff 0000ffff 00000000 00000000     ................
  4127f0:	00000000 ffffff00 ffffffff ffffffff     ................
  412800:	ffffffff ffffffff ffffffff 000000ff     ................
	...
  412828:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  412840:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  412858:	ffffffff ffffffff ffffffff 00000000     ................
  412868:	ffff0000 ffffffff ffffffff ffffffff     ................
  412878:	ffffffff 00ffffff 00000000 ffffff00     ................
  412888:	ffffffff 0000ffff 00000000 ff000000     ................
  412898:	ffffffff ffffffff ffffffff ffffffff     ................
  4128a8:	ffffffff 00ffffff 00000000 ffffff00     ................
  4128b8:	00ffffff 00000000 ffffff00 ffffffff     ................
  4128c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4128d8:	ffffffff 00000000 ffff0000 ffffffff     ................
  4128e8:	00000000 ffff0000 ffffffff ffffffff     ................
  4128f8:	ffffffff ffffffff ffffffff ffffffff     ................
  412908:	000000ff ff000000 ffffffff 000000ff     ................
  412918:	ff000000 ffffffff ffffffff ffffffff     ................
  412928:	ffffffff ffffffff ffffffff 0000ffff     ................
  412938:	00000000 ffffffff 0000ffff 00000000     ................
  412948:	ffffffff ffffffff ffffffff ffffffff     ................
  412958:	ffffffff ffffffff 00ffffff 00000000     ................
  412968:	ffffff00 00ffffff 00000000 ffffff00     ................
  412978:	ffffffff ffffffff ffffffff ffffffff     ................
  412988:	ffffffff ffffffff 00000000 ffff0000     ................
  412998:	ffffffff 00000000 ffff0000 ffffffff     ................
  4129a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4129b8:	0000ffff 00000000 ff000000 ffffffff     ................
  4129c8:	ffffffff 00000000 ffff0000 ffffffff     ................
  4129d8:	ffffffff ffffffff ffffffff 00ffffff     ................
  4129e8:	00000000 ffffff00 ffffffff ffffffff     ................
  4129f8:	000000ff 00000000 ffff0000 ffffffff     ................
  412a08:	ffffffff ffffffff 000000ff 00000000     ................
  412a18:	ffff0000 ffffffff ffffffff ffffffff     ................
  412a28:	000000ff 00000000 00000000 00000000     ................
	...
  412a44:	ffffffff ffffffff ffffffff ffffffff     ................
  412a54:	ffffffff ffffffff 00000000 00000000     ................
  412a64:	00000000 ff000000 ffffffff ffffffff     ................
  412a74:	ffffffff ffffffff ffffffff ffffffff     ................
  412a84:	ffffffff ffffffff ffffffff ffffffff     ................
  412a94:	ffffffff ffffffff ffffffff ffffffff     ................
  412aa4:	ffffffff ffffffff ffffffff ffffffff     ................
  412ab4:	ffffffff ffffffff ffffffff ffffffff     ................
  412ac4:	ffffffff ffffffff ffffffff ffffffff     ................
  412ad4:	ffffffff ffffffff ffffffff ffffffff     ................
  412ae4:	ffffffff ffffffff ffffffff ffffffff     ................
  412af4:	ffffffff ffffffff ffffffff ffffffff     ................
  412b04:	ffffffff ffffffff ffffffff ffffffff     ................
  412b14:	ffffffff ffffffff ffffffff ffffffff     ................
  412b24:	ffffffff ffffffff ffffffff ffffffff     ................
  412b34:	ffffffff ffffffff ffffffff ffffffff     ................
  412b44:	ffffffff ffffffff ffffffff ffffffff     ................
  412b54:	ffffffff ffffffff ffffffff ffffffff     ................
  412b64:	ffffffff ffffffff ffffffff ffffffff     ................
  412b74:	ffffffff ffffffff ffffffff ffffffff     ................
  412b84:	ffffffff                                ....

00412b88 <image_data_calibri_23_0x50>:
  412b88:	ffffffff ffffffff ffffffff ffffffff     ................
  412b98:	ffffffff ffffffff ffffffff ffffffff     ................
  412ba8:	ffffffff ffffffff ffffffff ffffffff     ................
  412bb8:	ffffffff ffffffff ffffffff ffffffff     ................
  412bc8:	ffffffff ffffffff ffffffff ffffffff     ................
  412bd8:	ffffffff ffffffff ffffffff ffffffff     ................
  412be8:	ffffffff ffffffff ffffffff ffffffff     ................
  412bf8:	0000ffff 00000000 00000000 00000000     ................
  412c08:	00000000 ff000000 ffffffff ffffffff     ................
  412c18:	ffffffff 0000ffff 00000000 00000000     ................
	...
  412c34:	ffff0000 ffffffff ffffffff 0000ffff     ................
  412c44:	00000000 ffffffff ffffffff ffffffff     ................
	...
  412c5c:	ffffff00 ffffffff 0000ffff 00000000     ................
  412c6c:	ffffffff ffffffff ffffffff 00ffffff     ................
  412c7c:	00000000 ffffff00 ffffffff 0000ffff     ................
  412c8c:	00000000 ffffffff ffffffff ffffffff     ................
  412c9c:	00ffffff 00000000 ffffff00 ffffffff     ................
  412cac:	0000ffff 00000000 ffffffff ffffffff     ................
  412cbc:	ffffffff 00ffffff 00000000 ffffff00     ................
  412ccc:	ffffffff 0000ffff 00000000 ffffffff     ................
  412cdc:	ffffffff ffffffff 00000000 00000000     ................
  412cec:	ffffff00 ffffffff 0000ffff 00000000     ................
	...
  412d0c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
  412d2c:	ffffffff ffffffff ffffffff ffffffff     ................
  412d3c:	0000ffff 00000000 ffffffff ffffffff     ................
  412d4c:	ffffffff ffffffff ffffffff ffffffff     ................
  412d5c:	ffffffff 0000ffff 00000000 ffffffff     ................
  412d6c:	ffffffff ffffffff ffffffff ffffffff     ................
  412d7c:	ffffffff ffffffff 0000ffff 00000000     ................
  412d8c:	ffffffff ffffffff ffffffff ffffffff     ................
  412d9c:	ffffffff ffffffff ffffffff 0000ffff     ................
  412dac:	00000000 ffffffff ffffffff ffffffff     ................
  412dbc:	ffffffff ffffffff ffffffff ffffffff     ................
  412dcc:	0000ffff 00000000 ffffffff ffffffff     ................
  412ddc:	ffffffff ffffffff ffffffff ffffffff     ................
  412dec:	ffffffff 0000ffff 00000000 ffffffff     ................
  412dfc:	ffffffff ffffffff ffffffff ffffffff     ................
  412e0c:	ffffffff ffffffff ffffffff ffffffff     ................
  412e1c:	ffffffff ffffffff ffffffff ffffffff     ................
  412e2c:	ffffffff ffffffff ffffffff ffffffff     ................
  412e3c:	ffffffff ffffffff ffffffff ffffffff     ................
  412e4c:	ffffffff ffffffff ffffffff ffffffff     ................
  412e5c:	ffffffff ffffffff ffffffff ffffffff     ................
  412e6c:	ffffffff ffffffff ffffffff ffffffff     ................
  412e7c:	ffffffff ffffffff ffffffff ffffffff     ................
  412e8c:	ffffffff ffffffff ffffffff ffffffff     ................
  412e9c:	ffffffff ffffffff ffffffff ffffffff     ................
  412eac:	ffffffff ffffffff ffffffff ffffffff     ................
  412ebc:	ffffffff ffffffff ffffffff ffffffff     ................
  412ecc:	ffffffff ffffffff ffffffff ffffffff     ................
  412edc:	ffffffff ffffffff ffffffff              ............

00412ee8 <image_data_calibri_23_0x51>:
  412ee8:	ffffffff ffffffff ffffffff ffffffff     ................
  412ef8:	ffffffff ffffffff ffffffff ffffffff     ................
  412f08:	ffffffff ffffffff ffffffff ffffffff     ................
  412f18:	ffffffff ffffffff ffffffff ffffffff     ................
  412f28:	ffffffff ffffffff ffffffff ffffffff     ................
  412f38:	ffffffff ffffffff ffffffff ffffffff     ................
  412f48:	ffffffff ffffffff ffffffff ffffffff     ................
  412f58:	ffffffff ffffffff ffffffff ffffffff     ................
  412f68:	ffffffff ffffffff ffffffff ffffffff     ................
  412f78:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  412f94:	ffff0000 ffffffff ffffffff ffffffff     ................
  412fa4:	ffffffff ffffffff ffffffff 000000ff     ................
	...
  412fcc:	ffffffff ffffffff ffffffff ffffffff     ................
  412fdc:	0000ffff 00000000 ff000000 ffffffff     ................
  412fec:	ffffffff ffffffff 0000ffff 00000000     ................
  412ffc:	ff000000 ffffffff ffffffff ffffffff     ................
  41300c:	0000ffff 00000000 ffffffff ffffffff     ................
  41301c:	ffffffff ffffffff ffffffff 000000ff     ................
  41302c:	ff000000 ffffffff ffffffff 00ffffff     ................
	...
  413044:	ffffffff ffffffff ffffffff ffffffff     ................
  413054:	ffffffff ffffffff 00000000 ffff0000     ................
  413064:	ffffffff 00ffffff 00000000 ffffff00     ................
  413074:	ffffffff ffffffff ffffffff ffffffff     ................
  413084:	ffffffff ffffffff 00000000 ffff0000     ................
  413094:	ffffffff 00ffffff 00000000 ffffff00     ................
  4130a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4130b4:	ffffffff ffffffff 00000000 ffff0000     ................
  4130c4:	ffffffff 00ffffff 00000000 ffffff00     ................
  4130d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4130e4:	ffffffff ffffffff 00000000 ffff0000     ................
  4130f4:	ffffffff 00ffffff 00000000 ffffff00     ................
  413104:	ffffffff ffffffff ffffffff ffffffff     ................
  413114:	ffffffff ffffffff 00000000 ffff0000     ................
  413124:	ffffffff 00ffffff 00000000 ffffff00     ................
  413134:	ffffffff ffffffff ffffffff ffffffff     ................
  413144:	ffffffff ffffffff 00000000 ffff0000     ................
  413154:	ffffffff 00ffffff 00000000 ffffff00     ................
  413164:	ffffffff ffffffff ffffffff ffffffff     ................
  413174:	ffffffff 000000ff 00000000 ffff0000     ................
  413184:	ffffffff ffffffff 0000ffff 00000000     ................
  413194:	ffffffff ffffffff ffffffff ffffffff     ................
  4131a4:	ffffffff 000000ff ff000000 ffffffff     ................
  4131b4:	ffffffff ffffffff 0000ffff 00000000     ................
  4131c4:	ff000000 ffffffff ffffffff ffffffff     ................
  4131d4:	0000ffff 00000000 ff000000 ffffffff     ................
  4131e4:	ffffffff ffffffff ffffffff 000000ff     ................
	...
  41320c:	ff000000 ffffffff ffffffff ffffffff     ................
  41321c:	ffffffff ffffffff 00000000 00000000     ................
	...
  413234:	ffff0000 000000ff 00000000 ffff0000     ................
  413244:	ffffffff ffffffff ffffffff ffffffff     ................
  413254:	ffffffff ffffffff ffffffff ffffffff     ................
  413264:	ffffffff ffffffff 00000000 00000000     ................
  413274:	00000000 ffffffff ffffffff ffffffff     ................
  413284:	ffffffff ffffffff ffffffff ffffffff     ................
  413294:	ffffffff ffffffff ffffffff 0000ffff     ................
  4132a4:	00000000 ffffffff ffffffff ffffffff     ................
  4132b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4132c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4132d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4132e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4132f4:	ffffffff ffffffff ffffffff ffffffff     ................
  413304:	ffffffff ffffffff ffffffff ffffffff     ................
  413314:	ffffffff ffffffff ffffffff ffffffff     ................
  413324:	ffffffff ffffffff ffffffff ffffffff     ................
  413334:	ffffffff ffffffff ffffffff ffffffff     ................
  413344:	ffffffff ffffffff ffffffff ffffffff     ................
  413354:	ffffffff ffffffff ffffffff ffffffff     ................
  413364:	ffffffff                                ....

00413368 <image_data_calibri_23_0x52>:
  413368:	ffffffff ffffffff ffffffff ffffffff     ................
  413378:	ffffffff ffffffff ffffffff ffffffff     ................
  413388:	ffffffff ffffffff ffffffff ffffffff     ................
  413398:	ffffffff ffffffff ffffffff ffffffff     ................
  4133a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4133b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4133c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4133d8:	0000ffff 00000000 00000000 00000000     ................
  4133e8:	00000000 ff000000 ffffffff ffffffff     ................
  4133f8:	ffffffff 0000ffff 00000000 00000000     ................
	...
  413414:	ffff0000 ffffffff ffffffff 0000ffff     ................
  413424:	00000000 ffffffff ffffffff ffffffff     ................
	...
  41343c:	ffffff00 ffffffff 0000ffff 00000000     ................
  41344c:	ffffffff ffffffff ffffffff 00ffffff     ................
  41345c:	00000000 ffffff00 ffffffff 0000ffff     ................
  41346c:	00000000 ffffffff ffffffff ffffffff     ................
  41347c:	00ffffff 00000000 ffffff00 ffffffff     ................
  41348c:	0000ffff 00000000 ffffffff ffffffff     ................
  41349c:	ffffffff 00ffffff 00000000 ffffff00     ................
  4134ac:	ffffffff 0000ffff 00000000 ffffffff     ................
  4134bc:	ffffffff ffffffff 00000000 ffff0000     ................
  4134cc:	ffffffff ffffffff 0000ffff 00000000     ................
	...
  4134ec:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
  41350c:	ff000000 ffffffff ffffffff ffffffff     ................
  41351c:	0000ffff 00000000 ffffffff ffffffff     ................
  41352c:	000000ff 00000000 ffff0000 ffffffff     ................
  41353c:	ffffffff 0000ffff 00000000 ffffffff     ................
  41354c:	ffffffff ffffffff 00000000 ffff0000     ................
  41355c:	ffffffff ffffffff 0000ffff 00000000     ................
  41356c:	ffffffff ffffffff ffffffff 00000000     ................
  41357c:	00000000 ffffff00 ffffffff 0000ffff     ................
  41358c:	00000000 ffffffff ffffffff ffffffff     ................
  41359c:	00ffffff 00000000 ffffff00 ffffffff     ................
  4135ac:	0000ffff 00000000 ffffffff ffffffff     ................
  4135bc:	ffffffff 00ffffff 00000000 ffffff00     ................
  4135cc:	ffffffff 0000ffff 00000000 ffffffff     ................
  4135dc:	ffffffff ffffffff ffffffff 0000ffff     ................
  4135ec:	00000000 ffffffff ffffffff ffffffff     ................
  4135fc:	ffffffff ffffffff ffffffff ffffffff     ................
  41360c:	ffffffff ffffffff ffffffff ffffffff     ................
  41361c:	ffffffff ffffffff ffffffff ffffffff     ................
  41362c:	ffffffff ffffffff ffffffff ffffffff     ................
  41363c:	ffffffff ffffffff ffffffff ffffffff     ................
  41364c:	ffffffff ffffffff ffffffff ffffffff     ................
  41365c:	ffffffff ffffffff ffffffff ffffffff     ................
  41366c:	ffffffff ffffffff ffffffff ffffffff     ................
  41367c:	ffffffff ffffffff ffffffff ffffffff     ................
  41368c:	ffffffff ffffffff ffffffff ffffffff     ................
  41369c:	ffffffff ffffffff ffffffff ffffffff     ................
  4136ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4136bc:	ffffffff ffffffff ffffffff              ............

004136c8 <image_data_calibri_23_0x53>:
  4136c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4136d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4136e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4136f8:	ffffffff ffffffff ffffffff ffffffff     ................
  413708:	ffffffff ffffffff ffffffff ffffffff     ................
  413718:	ffffffff ffffffff ffffffff ffffffff     ................
  413728:	ffffffff ffffffff ffffffff 00000000     ................
	...
  413740:	ff000000 ffffffff ffffffff ffffffff     ................
  413750:	0000ffff 00000000 00000000 00000000     ................
  413760:	00000000 ff000000 ffffffff ffffffff     ................
	...
  413778:	ffffff00 ffffffff ffffffff 000000ff     ................
  413788:	ffffffff ffffffff 000000ff ff000000     ................
  413798:	ffffffff ffffffff ffffffff ffffffff     ................
  4137a8:	ffffffff ffffffff 0000ffff 00000000     ................
  4137b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4137c8:	ffffffff ffffffff 00ffffff 00000000     ................
  4137d8:	00000000 ffffffff ffffffff ffffffff     ................
  4137e8:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  413800:	ff000000 ffffffff ffffffff ffffffff     ................
  413810:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
  413828:	ffff0000 ffffffff ffffffff ffffffff     ................
  413838:	ffffffff ffffffff ffffffff 000000ff     ................
  413848:	00000000 ffff0000 ffffffff ffffffff     ................
  413858:	ffffffff ffffffff ffffffff ffffffff     ................
  413868:	000000ff 00000000 ffff0000 ffffffff     ................
  413878:	ffffffff ffffffff ffffffff ffffffff     ................
  413888:	ffffffff 000000ff ff000000 ffffffff     ................
  413898:	ffffffff ffffffff ffffffff ffffffff     ................
  4138a8:	ffffffff 0000ffff 00000000 ffffffff     ................
  4138b8:	0000ffff 00000000 ffffffff ffffffff     ................
  4138c8:	ffffffff 00000000 00000000 ffffff00     ................
  4138d8:	00ffffff 00000000 00000000 00000000     ................
	...
  4138f0:	ff000000 ffffffff ffffffff 00ffffff     ................
	...
  413910:	ffffff00 ffffffff ffffffff ffffffff     ................
  413920:	ffffffff ffffffff ffffffff ffffffff     ................
  413930:	ffffffff ffffffff ffffffff ffffffff     ................
  413940:	ffffffff ffffffff ffffffff ffffffff     ................
  413950:	ffffffff ffffffff ffffffff ffffffff     ................
  413960:	ffffffff ffffffff ffffffff ffffffff     ................
  413970:	ffffffff ffffffff ffffffff ffffffff     ................
  413980:	ffffffff ffffffff ffffffff ffffffff     ................
  413990:	ffffffff ffffffff ffffffff ffffffff     ................
  4139a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4139b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4139c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4139d0:	ffffffff ffffffff ffffffff ffffffff     ................

004139e0 <image_data_calibri_23_0x54>:
  4139e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4139f0:	ffffffff ffffffff ffffffff ffffffff     ................
  413a00:	ffffffff ffffffff ffffffff ffffffff     ................
  413a10:	ffffffff ffffffff ffffffff ffffffff     ................
  413a20:	ffffffff ffffffff ffffffff ffffffff     ................
  413a30:	ffffffff ffffffff ffffffff ffffffff     ................
  413a40:	ffffffff 0000ffff 00000000 00000000     ................
	...
  413a64:	00ffffff 00000000 00000000 00000000     ................
	...
  413a84:	ffffff00 ffffffff ffffffff ffffffff     ................
  413a94:	00000000 ffff0000 ffffffff ffffffff     ................
  413aa4:	ffffffff ffffffff ffffffff ffffffff     ................
  413ab4:	000000ff ff000000 ffffffff ffffffff     ................
  413ac4:	ffffffff ffffffff ffffffff ffffffff     ................
  413ad4:	0000ffff 00000000 ffffffff ffffffff     ................
  413ae4:	ffffffff ffffffff ffffffff ffffffff     ................
  413af4:	00ffffff 00000000 ffffff00 ffffffff     ................
  413b04:	ffffffff ffffffff ffffffff ffffffff     ................
  413b14:	ffffffff 00000000 ffff0000 ffffffff     ................
  413b24:	ffffffff ffffffff ffffffff ffffffff     ................
  413b34:	ffffffff 000000ff ff000000 ffffffff     ................
  413b44:	ffffffff ffffffff ffffffff ffffffff     ................
  413b54:	ffffffff 0000ffff 00000000 ffffffff     ................
  413b64:	ffffffff ffffffff ffffffff ffffffff     ................
  413b74:	ffffffff 00ffffff 00000000 ffffff00     ................
  413b84:	ffffffff ffffffff ffffffff ffffffff     ................
  413b94:	ffffffff ffffffff 00000000 ffff0000     ................
  413ba4:	ffffffff ffffffff ffffffff ffffffff     ................
  413bb4:	ffffffff ffffffff 000000ff ff000000     ................
  413bc4:	ffffffff ffffffff ffffffff ffffffff     ................
  413bd4:	ffffffff ffffffff 0000ffff 00000000     ................
  413be4:	ffffffff ffffffff ffffffff ffffffff     ................
  413bf4:	ffffffff ffffffff 00ffffff 00000000     ................
  413c04:	ffffff00 ffffffff ffffffff ffffffff     ................
  413c14:	ffffffff ffffffff ffffffff 00000000     ................
  413c24:	ffff0000 ffffffff ffffffff ffffffff     ................
  413c34:	ffffffff ffffffff ffffffff ffffffff     ................
  413c44:	ffffffff ffffffff ffffffff ffffffff     ................
  413c54:	ffffffff ffffffff ffffffff ffffffff     ................
  413c64:	ffffffff ffffffff ffffffff ffffffff     ................
  413c74:	ffffffff ffffffff ffffffff ffffffff     ................
  413c84:	ffffffff ffffffff ffffffff ffffffff     ................
  413c94:	ffffffff ffffffff ffffffff ffffffff     ................
  413ca4:	ffffffff ffffffff ffffffff ffffffff     ................
  413cb4:	ffffffff ffffffff ffffffff ffffffff     ................
  413cc4:	ffffffff ffffffff ffffffff ffffffff     ................
  413cd4:	ffffffff ffffffff ffffffff ffffffff     ................
  413ce4:	ffffffff ffffffff ffffffff ffffffff     ................
  413cf4:	ffffffff                                ....

00413cf8 <image_data_calibri_23_0x55>:
  413cf8:	ffffffff ffffffff ffffffff ffffffff     ................
  413d08:	ffffffff ffffffff ffffffff ffffffff     ................
  413d18:	ffffffff ffffffff ffffffff ffffffff     ................
  413d28:	ffffffff ffffffff ffffffff ffffffff     ................
  413d38:	ffffffff ffffffff ffffffff ffffffff     ................
  413d48:	ffffffff ffffffff ffffffff ffffffff     ................
  413d58:	ffffffff ffffffff ffffffff ffffffff     ................
  413d68:	ffffffff ffffffff ffffffff ffffffff     ................
  413d78:	ffffffff ffffffff ffffffff 000000ff     ................
  413d88:	ff000000 ffffffff ffffffff ffffffff     ................
  413d98:	ffffffff ffffffff 00000000 ffff0000     ................
  413da8:	ffffffff ffffffff 0000ffff 00000000     ................
  413db8:	ffffffff ffffffff ffffffff ffffffff     ................
  413dc8:	ffffffff 000000ff ff000000 ffffffff     ................
  413dd8:	ffffffff 00ffffff 00000000 ffffff00     ................
  413de8:	ffffffff ffffffff ffffffff ffffffff     ................
  413df8:	0000ffff 00000000 ffffffff ffffffff     ................
  413e08:	ffffffff 00000000 ffff0000 ffffffff     ................
  413e18:	ffffffff ffffffff ffffffff 00ffffff     ................
  413e28:	00000000 ffffff00 ffffffff ffffffff     ................
  413e38:	000000ff ff000000 ffffffff ffffffff     ................
  413e48:	ffffffff ffffffff ffffffff 00000000     ................
  413e58:	ffff0000 ffffffff ffffffff 0000ffff     ................
  413e68:	00000000 ffffffff ffffffff ffffffff     ................
  413e78:	ffffffff ffffffff 000000ff ff000000     ................
  413e88:	ffffffff ffffffff 00ffffff 00000000     ................
  413e98:	ffffff00 ffffffff ffffffff ffffffff     ................
  413ea8:	ffffffff 0000ffff 00000000 ffffffff     ................
  413eb8:	ffffffff ffffffff 00000000 ffff0000     ................
  413ec8:	ffffffff ffffffff ffffffff ffffffff     ................
  413ed8:	00ffffff 00000000 ffffff00 ffffffff     ................
  413ee8:	ffffffff 000000ff ff000000 ffffffff     ................
  413ef8:	ffffffff ffffffff ffffffff ffffffff     ................
  413f08:	00000000 ffff0000 ffffffff ffffffff     ................
  413f18:	0000ffff 00000000 ffffffff ffffffff     ................
  413f28:	ffffffff ffffffff ffffffff 000000ff     ................
  413f38:	ff000000 ffffffff ffffffff 00ffffff     ................
  413f48:	00000000 ffffff00 ffffffff ffffffff     ................
  413f58:	ffffffff ffffffff 0000ffff 00000000     ................
  413f68:	ffffffff ffffffff ffffffff 00000000     ................
  413f78:	00000000 ffffff00 ffffffff ffffffff     ................
  413f88:	ffffffff 00000000 00000000 ffffff00     ................
  413f98:	ffffffff ffffffff ffffffff 00000000     ................
  413fa8:	00000000 ffffff00 ffffffff 0000ffff     ................
  413fb8:	00000000 ff000000 ffffffff ffffffff     ................
  413fc8:	ffffffff ffffffff 000000ff 00000000     ................
	...
  413fec:	ffffffff ffffffff ffffffff ffffffff     ................
  413ffc:	ffffffff ffffffff 00000000 00000000     ................
  41400c:	00000000 ff000000 ffffffff ffffffff     ................
  41401c:	ffffffff ffffffff ffffffff ffffffff     ................
  41402c:	ffffffff ffffffff ffffffff ffffffff     ................
  41403c:	ffffffff ffffffff ffffffff ffffffff     ................
  41404c:	ffffffff ffffffff ffffffff ffffffff     ................
  41405c:	ffffffff ffffffff ffffffff ffffffff     ................
  41406c:	ffffffff ffffffff ffffffff ffffffff     ................
  41407c:	ffffffff ffffffff ffffffff ffffffff     ................
  41408c:	ffffffff ffffffff ffffffff ffffffff     ................
  41409c:	ffffffff ffffffff ffffffff ffffffff     ................
  4140ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4140bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4140cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4140dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4140ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4140fc:	ffffffff ffffffff ffffffff ffffffff     ................
  41410c:	ffffffff ffffffff ffffffff ffffffff     ................
  41411c:	ffffffff ffffffff ffffffff ffffffff     ................
  41412c:	ffffffff                                ....

00414130 <image_data_calibri_23_0x56>:
  414130:	ffffffff ffffffff ffffffff ffffffff     ................
  414140:	ffffffff ffffffff ffffffff ffffffff     ................
  414150:	ffffffff ffffffff ffffffff ffffffff     ................
  414160:	ffffffff ffffffff ffffffff ffffffff     ................
  414170:	ffffffff ffffffff ffffffff ffffffff     ................
  414180:	ffffffff ffffffff ffffffff ffffffff     ................
  414190:	ffffffff ffffffff ffffffff ffffffff     ................
  4141a0:	ffffffff ffffffff 00000000 ffff0000     ................
  4141b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4141c0:	ffffffff 0000ffff 00000000 00ffffff     ................
  4141d0:	00000000 ffffff00 ffffffff ffffffff     ................
  4141e0:	ffffffff ffffffff ffffffff 000000ff     ................
  4141f0:	ff000000 0000ffff 00000000 ff000000     ................
  414200:	ffffffff ffffffff ffffffff ffffffff     ................
  414210:	000000ff ff000000 ffffffff ffffffff     ................
  414220:	00000000 ffff0000 ffffffff ffffffff     ................
  414230:	ffffffff ffffffff 00000000 ffff0000     ................
  414240:	ffffffff 00ffffff 00000000 ffffff00     ................
  414250:	ffffffff ffffffff ffffffff 00ffffff     ................
  414260:	00000000 ffffff00 ffffffff ffffffff     ................
  414270:	000000ff ff000000 ffffffff ffffffff     ................
  414280:	00ffffff 00000000 ffffff00 ffffffff     ................
  414290:	ffffffff ffffffff 00000000 ffff0000     ................
  4142a0:	ffffffff ffffffff 0000ffff 00000000     ................
  4142b0:	ffffffff ffffffff ffffffff 00ffffff     ................
  4142c0:	00000000 ffffff00 ffffffff ffffffff     ................
  4142d0:	000000ff ff000000 ffffffff ffffffff     ................
  4142e0:	ffffffff ffffffff 000000ff ff000000     ................
  4142f0:	ffffffff 000000ff ff000000 ffffffff     ................
  414300:	ffffffff ffffffff ffffffff ffffffff     ................
  414310:	00000000 ffff0000 ffffffff 00000000     ................
  414320:	ffff0000 ffffffff ffffffff ffffffff     ................
  414330:	ffffffff 00ffffff 00000000 ffffff00     ................
  414340:	00ffffff 00000000 ffffff00 ffffffff     ................
  414350:	ffffffff ffffffff ffffffff ffffffff     ................
  414360:	000000ff 00000000 00000000 ffffff00     ................
  414370:	ffffffff ffffffff ffffffff ffffffff     ................
  414380:	ffffffff ffffffff 00000000 00000000     ................
  414390:	00000000 ffffffff ffffffff ffffffff     ................
  4143a0:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  4143b8:	ff000000 ffffffff ffffffff ffffffff     ................
  4143c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4143d8:	000000ff ff000000 ffffffff ffffffff     ................
  4143e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4143f8:	ffffffff ffffffff ffffffff ffffffff     ................
  414408:	ffffffff ffffffff ffffffff ffffffff     ................
  414418:	ffffffff ffffffff ffffffff ffffffff     ................
  414428:	ffffffff ffffffff ffffffff ffffffff     ................
  414438:	ffffffff ffffffff ffffffff ffffffff     ................
  414448:	ffffffff ffffffff ffffffff ffffffff     ................
  414458:	ffffffff ffffffff ffffffff ffffffff     ................
  414468:	ffffffff ffffffff ffffffff ffffffff     ................
  414478:	ffffffff ffffffff ffffffff ffffffff     ................
  414488:	ffffffff ffffffff ffffffff ffffffff     ................
  414498:	ffffffff ffffffff ffffffff ffffffff     ................
  4144a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4144b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4144c8:	ffffffff ffffffff ffffffff ffffffff     ................

004144d8 <image_data_calibri_23_0x57>:
  4144d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4144e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4144f8:	ffffffff ffffffff ffffffff ffffffff     ................
  414508:	ffffffff ffffffff ffffffff ffffffff     ................
  414518:	ffffffff ffffffff ffffffff ffffffff     ................
  414528:	ffffffff ffffffff ffffffff ffffffff     ................
  414538:	ffffffff ffffffff ffffffff ffffffff     ................
  414548:	ffffffff ffffffff ffffffff ffffffff     ................
  414558:	ffffffff ffffffff ffffffff ffffffff     ................
  414568:	ffffffff ffffffff ffffffff ffffffff     ................
  414578:	ffffffff ffffffff ffffffff ffffffff     ................
  414588:	ffffffff 00ffffff 00000000 ffffff00     ................
  414598:	ffffffff ffffffff ffffffff 00ffffff     ................
  4145a8:	00000000 ffffff00 ffffffff ffffffff     ................
  4145b8:	ffffffff ffffffff 0000ffff 00000000     ................
  4145c8:	00ffffff 00000000 ffffff00 ffffffff     ................
  4145d8:	ffffffff ffffffff 00ffffff 00000000     ................
  4145e8:	00000000 ffffffff ffffffff ffffffff     ................
  4145f8:	ffffffff 0000ffff 00000000 00ffffff     ................
  414608:	00000000 ffffff00 ffffffff ffffffff     ................
  414618:	ffffffff 00ffffff 00000000 00000000     ................
  414628:	ffffffff ffffffff ffffffff 00ffffff     ................
  414638:	00000000 ffffff00 ffffffff 0000ffff     ................
  414648:	00000000 ffffffff ffffffff ffffffff     ................
	...
  414664:	ffffffff ffffffff ffffffff 00ffffff     ................
  414674:	00000000 ffffff00 ffffffff 0000ffff     ................
  414684:	00000000 ffffffff ffffffff ffffffff     ................
	...
  4146a0:	ffffffff ffffffff ffffffff 00ffffff     ................
  4146b0:	00000000 ffffff00 ffffffff 0000ffff     ................
  4146c0:	00000000 ffffffff ffffffff ffffffff     ................
  4146d0:	00000000 ffff0000 000000ff ff000000     ................
  4146e0:	ffffffff ffffffff 00ffffff ffff0000     ................
  4146f0:	ffffffff ffffffff 0000ffff 00000000     ................
  414700:	ffffffff ffffffff ffffffff ff000000     ................
  414710:	ffffffff 000000ff ff000000 ffffffff     ................
  414720:	ffffffff 00000000 ffff0000 ffffffff     ................
  414730:	ffffffff ffffffff 000000ff ff000000     ................
  414740:	ffffffff 000000ff ff000000 ffffffff     ................
  414750:	000000ff ff000000 ffffffff ffffffff     ................
  414760:	00000000 ffff0000 ffffffff ffffffff     ................
  414770:	ffffffff 000000ff ff000000 ffffffff     ................
  414780:	000000ff ff000000 ffffffff ffffffff     ................
  414790:	ff000000 ffffffff ffffffff 00000000     ................
  4147a0:	ffff0000 ffffffff ffffffff ffffffff     ................
  4147b0:	000000ff ff000000 ffffffff 000000ff     ................
  4147c0:	ff000000 ffffffff ffffffff 00000000     ................
  4147d0:	ffff0000 000000ff ff000000 ffffffff     ................
  4147e0:	ffffffff ffffffff ffffffff 000000ff     ................
  4147f0:	ff000000 ffffffff 000000ff ffffffff     ................
  414800:	ffffffff ffffffff 00000000 ffff0000     ................
  414810:	000000ff ff000000 ffffffff ffffffff     ................
  414820:	ffffffff ffffffff ffffffff 00000000     ................
	...
  414838:	ffffffff ffffffff ffffffff 00000000     ................
  414848:	ffff0000 000000ff ff000000 ffffffff     ................
  414858:	ffffffff ffffffff ffffffff ffffffff     ................
	...
  414874:	ffffffff ffffffff ffffffff 00ffffff     ................
  414884:	ffff0000 000000ff ffffffff ffffffff     ................
  414894:	ffffffff ffffffff ffffffff ffffffff     ................
	...
  4148b0:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  4148c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4148d8:	ffffffff ffffffff 00ffffff 00000000     ................
  4148e8:	ffffff00 ffffffff ffffffff ffffffff     ................
  4148f8:	00ffffff 00000000 00000000 ffffffff     ................
  414908:	ffffffff ffffffff ffffffff ffffffff     ................
  414918:	ffffffff ffffffff ffffffff ffffffff     ................
  414928:	ffffffff ffffffff ffffffff ffffffff     ................
  414938:	ffffffff ffffffff ffffffff ffffffff     ................
  414948:	ffffffff ffffffff ffffffff ffffffff     ................
  414958:	ffffffff ffffffff ffffffff ffffffff     ................
  414968:	ffffffff ffffffff ffffffff ffffffff     ................
  414978:	ffffffff ffffffff ffffffff ffffffff     ................
  414988:	ffffffff ffffffff ffffffff ffffffff     ................
  414998:	ffffffff ffffffff ffffffff ffffffff     ................
  4149a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4149b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4149c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4149d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4149e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4149f8:	ffffffff ffffffff ffffffff ffffffff     ................
  414a08:	ffffffff ffffffff ffffffff ffffffff     ................
  414a18:	ffffffff ffffffff ffffffff ffffffff     ................
  414a28:	ffffffff ffffffff ffffffff ffffffff     ................
  414a38:	ffffffff ffffffff ffffffff ffffffff     ................
  414a48:	ffffffff ffffffff ffffffff ffffffff     ................
  414a58:	ffffffff ffffffff ffffffff ffffffff     ................
  414a68:	ffffffff ffffffff ffffffff ffffffff     ................

00414a78 <image_data_calibri_23_0x58>:
  414a78:	ffffffff ffffffff ffffffff ffffffff     ................
  414a88:	ffffffff ffffffff ffffffff ffffffff     ................
  414a98:	ffffffff ffffffff ffffffff ffffffff     ................
  414aa8:	ffffffff ffffffff ffffffff ffffffff     ................
  414ab8:	ffffffff ffffffff ffffffff ffffffff     ................
  414ac8:	ffffffff ffffffff ffffffff ffffffff     ................
  414ad8:	ffffffff ffffffff ffffffff 00ffffff     ................
  414ae8:	00000000 ffffff00 ffffffff ffffffff     ................
  414af8:	ffffffff 00ffffff 00000000 ffffff00     ................
  414b08:	00ffffff 00000000 00000000 ffffffff     ................
  414b18:	ffffffff ffffffff 00ffffff 00000000     ................
  414b28:	ffffff00 ffffffff 0000ffff 00000000     ................
  414b38:	ffffffff ffffffff ffffffff 00000000     ................
  414b48:	ffff0000 ffffffff ffffffff 0000ffff     ................
  414b58:	00000000 ff000000 ffffffff 000000ff     ................
  414b68:	ff000000 ffffffff ffffffff ffffffff     ................
  414b78:	ffffffff 000000ff ff000000 ffffffff     ................
  414b88:	000000ff ff000000 ffffffff ffffffff     ................
  414b98:	ffffffff ffffffff ffffffff 00000000     ................
	...
  414bb0:	ffffffff ffffffff ffffffff ffffffff     ................
  414bc0:	ffffffff ffffffff 00000000 00000000     ................
  414bd0:	00000000 ffffffff ffffffff ffffffff     ................
  414be0:	ffffffff ffffffff ffffffff 00ffffff     ................
  414bf0:	00000000 ffffff00 ffffffff ffffffff     ................
  414c00:	ffffffff ffffffff ffffffff ffffffff     ................
	...
  414c1c:	ffffffff ffffffff ffffffff ffffffff     ................
  414c2c:	ffffffff 000000ff 00000000 00000000     ................
  414c3c:	00000000 ffffffff ffffffff ffffffff     ................
  414c4c:	ffffffff ffffffff 000000ff ff000000     ................
  414c5c:	ffffffff 000000ff ff000000 ffffffff     ................
  414c6c:	ffffffff ffffffff 0000ffff 00000000     ................
  414c7c:	ffffffff ffffffff 000000ff 00000000     ................
  414c8c:	ffff0000 ffffffff ffffffff 0000ffff     ................
  414c9c:	00000000 ffffffff ffffffff ffffffff     ................
  414cac:	00000000 ffff0000 ffffffff 00ffffff     ................
  414cbc:	00000000 ffffff00 ffffffff ffffffff     ................
  414ccc:	ffffffff 00ffffff 00000000 ffffff00     ................
  414cdc:	00ffffff 00000000 ffffff00 ffffffff     ................
  414cec:	ffffffff ffffffff 00ffffff 00000000     ................
  414cfc:	ffffff00 ffffffff ffffffff ffffffff     ................
  414d0c:	ffffffff ffffffff ffffffff ffffffff     ................
  414d1c:	ffffffff ffffffff ffffffff ffffffff     ................
  414d2c:	ffffffff ffffffff ffffffff ffffffff     ................
  414d3c:	ffffffff ffffffff ffffffff ffffffff     ................
  414d4c:	ffffffff ffffffff ffffffff ffffffff     ................
  414d5c:	ffffffff ffffffff ffffffff ffffffff     ................
  414d6c:	ffffffff ffffffff ffffffff ffffffff     ................
  414d7c:	ffffffff ffffffff ffffffff ffffffff     ................
  414d8c:	ffffffff ffffffff ffffffff ffffffff     ................
  414d9c:	ffffffff ffffffff ffffffff ffffffff     ................
  414dac:	ffffffff ffffffff ffffffff ffffffff     ................
  414dbc:	ffffffff ffffffff ffffffff ffffffff     ................
  414dcc:	ffffffff ffffffff ffffffff              ............

00414dd8 <image_data_calibri_23_0x59>:
  414dd8:	ffffffff ffffffff ffffffff ffffffff     ................
  414de8:	ffffffff ffffffff ffffffff ffffffff     ................
  414df8:	ffffffff ffffffff ffffffff ffffffff     ................
  414e08:	ffffffff ffffffff ffffffff ffffffff     ................
  414e18:	ffffffff ffffffff ffffffff ffffffff     ................
  414e28:	ffffffff ffffffff ffffffff ffffffff     ................
  414e38:	ffffffff 0000ffff 00000000 ffffffff     ................
  414e48:	ffffffff ffffffff ffffffff 0000ffff     ................
  414e58:	00000000 00ffffff 00000000 ffffff00     ................
  414e68:	ffffffff ffffffff ffffffff 00ffffff     ................
  414e78:	00000000 ffffff00 00ffffff 00000000     ................
  414e88:	ffffff00 ffffffff ffffffff 000000ff     ................
  414e98:	ff000000 ffffffff ffffffff 00000000     ................
  414ea8:	ffff0000 ffffffff ffffffff 0000ffff     ................
  414eb8:	00000000 ffffffff ffffffff ffffffff     ................
  414ec8:	00000000 ffff0000 ffffffff 00000000     ................
  414ed8:	ffff0000 ffffffff ffffffff ffffffff     ................
  414ee8:	000000ff ff000000 ffffffff 000000ff     ................
  414ef8:	ff000000 ffffffff ffffffff ffffffff     ................
  414f08:	ffffffff 000000ff 00000000 00000000     ................
  414f18:	ffffff00 ffffffff ffffffff ffffffff     ................
  414f28:	ffffffff 0000ffff 00000000 00000000     ................
  414f38:	ffff0000 ffffffff ffffffff ffffffff     ................
  414f48:	ffffffff ffffffff 0000ffff 00000000     ................
  414f58:	ffffffff ffffffff ffffffff ffffffff     ................
  414f68:	ffffffff ffffffff 00ffffff 00000000     ................
  414f78:	ffffff00 ffffffff ffffffff ffffffff     ................
  414f88:	ffffffff ffffffff ffffffff 00000000     ................
  414f98:	ffff0000 ffffffff ffffffff ffffffff     ................
  414fa8:	ffffffff ffffffff ffffffff 000000ff     ................
  414fb8:	ff000000 ffffffff ffffffff ffffffff     ................
  414fc8:	ffffffff ffffffff ffffffff 0000ffff     ................
  414fd8:	00000000 ffffffff ffffffff ffffffff     ................
  414fe8:	ffffffff ffffffff ffffffff 00ffffff     ................
  414ff8:	00000000 ffffff00 ffffffff ffffffff     ................
  415008:	ffffffff ffffffff ffffffff ffffffff     ................
  415018:	00000000 ffff0000 ffffffff ffffffff     ................
  415028:	ffffffff ffffffff ffffffff ffffffff     ................
  415038:	ffffffff ffffffff ffffffff ffffffff     ................
  415048:	ffffffff ffffffff ffffffff ffffffff     ................
  415058:	ffffffff ffffffff ffffffff ffffffff     ................
  415068:	ffffffff ffffffff ffffffff ffffffff     ................
  415078:	ffffffff ffffffff ffffffff ffffffff     ................
  415088:	ffffffff ffffffff ffffffff ffffffff     ................
  415098:	ffffffff ffffffff ffffffff ffffffff     ................
  4150a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4150b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4150c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4150d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4150e8:	ffffffff ffffffff                       ........

004150f0 <image_data_calibri_23_0x5a>:
  4150f0:	ffffffff ffffffff ffffffff ffffffff     ................
  415100:	ffffffff ffffffff ffffffff ffffffff     ................
  415110:	ffffffff ffffffff ffffffff ffffffff     ................
  415120:	ffffffff ffffffff ffffffff ffffffff     ................
  415130:	ffffffff ffffffff ffffffff ffffffff     ................
  415140:	ffffffff ffffffff ffffffff ffffffff     ................
  415150:	ffffffff 0000ffff 00000000 00000000     ................
	...
  415170:	ffffff00 00ffffff 00000000 00000000     ................
	...
  415190:	ffff0000 ffffffff ffffffff ffffffff     ................
  4151a0:	ffffffff ffffffff ffffffff 000000ff     ................
  4151b0:	ff000000 ffffffff ffffffff ffffffff     ................
  4151c0:	ffffffff ffffffff 00ffffff 00000000     ................
  4151d0:	ffffff00 ffffffff ffffffff ffffffff     ................
  4151e0:	ffffffff ffffffff 000000ff ff000000     ................
  4151f0:	ffffffff ffffffff ffffffff ffffffff     ................
  415200:	ffffffff ffffffff 0000ffff 00000000     ................
  415210:	ffffffff ffffffff ffffffff ffffffff     ................
  415220:	ffffffff ffffffff 00000000 ffff0000     ................
  415230:	ffffffff ffffffff ffffffff ffffffff     ................
  415240:	ffffffff 0000ffff 00000000 ffffffff     ................
  415250:	ffffffff ffffffff ffffffff ffffffff     ................
  415260:	ffffffff 00ffffff 00000000 ffffff00     ................
  415270:	ffffffff ffffffff ffffffff ffffffff     ................
  415280:	ffffffff 000000ff ff000000 ffffffff     ................
  415290:	ffffffff ffffffff ffffffff ffffffff     ................
  4152a0:	00ffffff 00000000 ffffff00 ffffffff     ................
  4152b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4152c0:	ffffffff 00000000 ffff0000 ffffffff     ................
  4152d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4152e0:	0000ffff 00000000 ffffffff ffffffff     ................
  4152f0:	ffffffff ffffffff ffffffff ffffffff     ................
  415300:	00ffffff 00000000 00000000 00000000     ................
	...
  41531c:	ffff0000 ffffffff 00000000 00000000     ................
	...
  41533c:	ff000000 ffffffff ffffffff ffffffff     ................
  41534c:	ffffffff ffffffff ffffffff ffffffff     ................
  41535c:	ffffffff ffffffff ffffffff ffffffff     ................
  41536c:	ffffffff ffffffff ffffffff ffffffff     ................
  41537c:	ffffffff ffffffff ffffffff ffffffff     ................
  41538c:	ffffffff ffffffff ffffffff ffffffff     ................
  41539c:	ffffffff ffffffff ffffffff ffffffff     ................
  4153ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4153bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4153cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4153dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4153ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4153fc:	ffffffff ffffffff ffffffff              ............

00415408 <image_data_calibri_23_0x5b>:
  415408:	ffffffff ffffffff ffffffff ffffffff     ................
  415418:	ffffffff ffffffff ffffffff ffffffff     ................
  415428:	ffffffff ffffffff ffffffff ffffffff     ................
	...
  415444:	ffffffff ffffffff 000000ff 00000000     ................
  415454:	00000000 ffffff00 ffffffff 0000ffff     ................
  415464:	00000000 ffffffff ffffffff ffffffff     ................
  415474:	00ffffff 00000000 ffffff00 ffffffff     ................
  415484:	ffffffff ffffffff 00000000 ffff0000     ................
  415494:	ffffffff ffffffff ffffffff 000000ff     ................
  4154a4:	ff000000 ffffffff ffffffff ffffffff     ................
  4154b4:	0000ffff 00000000 ffffffff ffffffff     ................
  4154c4:	ffffffff 00ffffff 00000000 ffffff00     ................
  4154d4:	ffffffff ffffffff ffffffff 00000000     ................
  4154e4:	ffff0000 ffffffff ffffffff ffffffff     ................
  4154f4:	000000ff ff000000 ffffffff ffffffff     ................
  415504:	ffffffff 0000ffff 00000000 ffffffff     ................
  415514:	ffffffff ffffffff 00ffffff 00000000     ................
  415524:	ffffff00 ffffffff ffffffff ffffffff     ................
  415534:	00000000 ffff0000 ffffffff ffffffff     ................
  415544:	ffffffff 000000ff ff000000 ffffffff     ................
  415554:	ffffffff ffffffff 0000ffff 00000000     ................
  415564:	ffffffff ffffffff ffffffff 00ffffff     ................
  415574:	00000000 ffffff00 ffffffff ffffffff     ................
  415584:	ffffffff 00000000 ffff0000 ffffffff     ................
  415594:	ffffffff ffffffff 000000ff ff000000     ................
  4155a4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
  4155bc:	ffff0000 ffffffff 00ffffff 00000000     ................
  4155cc:	00000000 ff000000 ffffffff ffffffff     ................
  4155dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4155ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4155fc:	ffffffff                                ....

00415600 <image_data_calibri_23_0x5c>:
  415600:	ffffffff ffffffff ffffffff ffffffff     ................
  415610:	ffffffff ffffffff ffffffff ffffffff     ................
  415620:	ffffffff ffffffff ffffffff ffffffff     ................
  415630:	ffffffff 0000ffff 00000000 ffffffff     ................
  415640:	ffffffff ffffffff ffffffff ffffffff     ................
  415650:	ffffffff ff000000 ffffffff ffffffff     ................
  415660:	ffffffff ffffffff ffffffff 00ffffff     ................
  415670:	00000000 ffffff00 ffffffff ffffffff     ................
  415680:	ffffffff ffffffff 0000ffff 00000000     ................
  415690:	ffffffff ffffffff ffffffff ffffffff     ................
  4156a0:	ffffffff ffffffff 00000000 ffff0000     ................
  4156b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4156c0:	00ffffff 00000000 ffffff00 ffffffff     ................
  4156d0:	ffffffff ffffffff ffffffff 0000ffff     ................
  4156e0:	00000000 ffffffff ffffffff ffffffff     ................
  4156f0:	ffffffff ffffffff ffffffff 00000000     ................
  415700:	ffff0000 ffffffff ffffffff ffffffff     ................
  415710:	ffffffff 00ffffff 00000000 ffffff00     ................
  415720:	ffffffff ffffffff ffffffff ffffffff     ................
  415730:	ffffffff 000000ff ffffffff ffffffff     ................
  415740:	ffffffff ffffffff ffffffff ffffffff     ................
  415750:	00000000 ffff0000 ffffffff ffffffff     ................
  415760:	ffffffff ffffffff 00ffffff 00000000     ................
  415770:	ffffff00 ffffffff ffffffff ffffffff     ................
  415780:	ffffffff ffffffff 000000ff ff000000     ................
  415790:	ffffffff ffffffff ffffffff ffffffff     ................
  4157a0:	ffffffff 00000000 ffff0000 ffffffff     ................
  4157b0:	ffffffff ffffffff ffffffff 00ffffff     ................
  4157c0:	00000000 ffffff00 ffffffff ffffffff     ................
  4157d0:	ffffffff ffffffff ffffffff 000000ff     ................
  4157e0:	ff000000 ffffffff ffffffff ffffffff     ................
  4157f0:	ffffffff ffffffff 00000000 ffff0000     ................
  415800:	ffffffff ffffffff ffffffff ffffffff     ................
  415810:	ffffffff 0000ffff ffffff00 ffffffff     ................
  415820:	ffffffff ffffffff ffffffff ffffffff     ................
  415830:	000000ff ff000000 ffffffff ffffffff     ................
  415840:	ffffffff ffffffff ffffffff ffffffff     ................
  415850:	ffffffff ffffffff ffffffff ffffffff     ................
  415860:	ffffffff ffffffff ffffffff ffffffff     ................
  415870:	ffffffff ffffffff ffffffff ffffffff     ................
  415880:	ffffffff ffffffff                       ........

00415888 <image_data_calibri_23_0x5d>:
  415888:	ffffffff ffffffff ffffffff ffffffff     ................
  415898:	ffffffff ffffffff ffffffff ffffffff     ................
  4158a8:	ffffffff ffffffff ffffffff 000000ff     ................
	...
  4158c0:	ffffff00 ffffffff 0000ffff 00000000     ................
  4158d0:	00000000 ffff0000 ffffffff ffffffff     ................
  4158e0:	ffffffff 000000ff ff000000 ffffffff     ................
  4158f0:	ffffffff ffffffff 0000ffff 00000000     ................
  415900:	ffffffff ffffffff ffffffff 00ffffff     ................
  415910:	00000000 ffffff00 ffffffff ffffffff     ................
  415920:	ffffffff 00000000 ffff0000 ffffffff     ................
  415930:	ffffffff ffffffff 000000ff ff000000     ................
  415940:	ffffffff ffffffff ffffffff 0000ffff     ................
  415950:	00000000 ffffffff ffffffff ffffffff     ................
  415960:	00ffffff 00000000 ffffff00 ffffffff     ................
  415970:	ffffffff ffffffff 00000000 ffff0000     ................
  415980:	ffffffff ffffffff ffffffff 000000ff     ................
  415990:	ff000000 ffffffff ffffffff ffffffff     ................
  4159a0:	0000ffff 00000000 ffffffff ffffffff     ................
  4159b0:	ffffffff 00ffffff 00000000 ffffff00     ................
  4159c0:	ffffffff ffffffff ffffffff 00000000     ................
  4159d0:	ffff0000 ffffffff ffffffff ffffffff     ................
  4159e0:	000000ff ff000000 ffffffff ffffffff     ................
  4159f0:	ffffffff 0000ffff 00000000 ffffffff     ................
  415a00:	ffffffff ffffffff 00ffffff 00000000     ................
  415a10:	ffffff00 ffffffff ffffffff ffffffff     ................
  415a20:	00000000 ffff0000 ffffffff 00ffffff     ................
	...
  415a38:	ff000000 ffffffff ffffffff 00000000     ................
	...
  415a50:	ffffffff ffffffff ffffffff ffffffff     ................
  415a60:	ffffffff ffffffff ffffffff ffffffff     ................
  415a70:	ffffffff ffffffff ffffffff ffffffff     ................

00415a80 <image_data_calibri_23_0x5e>:
  415a80:	ffffffff ffffffff ffffffff ffffffff     ................
  415a90:	ffffffff ffffffff ffffffff ffffffff     ................
  415aa0:	ffffffff ffffffff ffffffff ffffffff     ................
  415ab0:	ffffffff ffffffff ffffffff ffffffff     ................
  415ac0:	ffffffff ffffffff ffffffff ffffffff     ................
  415ad0:	ffffffff ffffffff ffffffff ffffffff     ................
  415ae0:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  415af8:	ffffffff ffffffff ffffffff ffffffff     ................
  415b08:	ffffffff ffffffff 00000000 00000000     ................
  415b18:	ffffff00 ffffffff ffffffff ffffffff     ................
  415b28:	ffffffff ffffffff 000000ff 00ffffff     ................
  415b38:	00000000 ffffff00 ffffffff ffffffff     ................
  415b48:	ffffffff 00ffffff 00000000 ffffff00     ................
  415b58:	00000000 ffff0000 ffffffff ffffffff     ................
  415b68:	ffffffff ffffffff ff000000 ffffffff     ................
  415b78:	ffffffff 00000000 ffff0000 ffffffff     ................
  415b88:	ffffffff 0000ffff 00000000 ffffffff     ................
  415b98:	ffffffff 000000ff ff000000 ffffffff     ................
  415ba8:	ffffffff 00ffffff 00000000 ffffff00     ................
  415bb8:	ffffffff ffffffff 000000ff ff000000     ................
  415bc8:	ffffffff 000000ff ff000000 ffffffff     ................
  415bd8:	ffffffff ffffffff 0000ffff 00000000     ................
  415be8:	ffffffff ffffffff ffffffff ffffffff     ................
  415bf8:	ffffffff ffffffff ffffffff ffffffff     ................
  415c08:	ffffffff ffffffff ffffffff ffffffff     ................
  415c18:	ffffffff ffffffff ffffffff ffffffff     ................
  415c28:	ffffffff ffffffff ffffffff ffffffff     ................
  415c38:	ffffffff ffffffff ffffffff ffffffff     ................
  415c48:	ffffffff ffffffff ffffffff ffffffff     ................
  415c58:	ffffffff ffffffff ffffffff ffffffff     ................
  415c68:	ffffffff ffffffff ffffffff ffffffff     ................
  415c78:	ffffffff ffffffff ffffffff ffffffff     ................
  415c88:	ffffffff ffffffff ffffffff ffffffff     ................
  415c98:	ffffffff ffffffff ffffffff ffffffff     ................
  415ca8:	ffffffff ffffffff ffffffff ffffffff     ................
  415cb8:	ffffffff ffffffff ffffffff ffffffff     ................
  415cc8:	ffffffff ffffffff ffffffff ffffffff     ................
  415cd8:	ffffffff ffffffff ffffffff ffffffff     ................
  415ce8:	ffffffff ffffffff ffffffff ffffffff     ................
  415cf8:	ffffffff ffffffff ffffffff ffffffff     ................
  415d08:	ffffffff ffffffff ffffffff ffffffff     ................
  415d18:	ffffffff ffffffff ffffffff ffffffff     ................
  415d28:	ffffffff ffffffff ffffffff ffffffff     ................
  415d38:	ffffffff ffffffff ffffffff ffffffff     ................
  415d48:	ffffffff ffffffff ffffffff ffffffff     ................
  415d58:	ffffffff ffffffff ffffffff ffffffff     ................
  415d68:	ffffffff ffffffff ffffffff ffffffff     ................
  415d78:	ffffffff ffffffff ffffffff ffffffff     ................
  415d88:	ffffffff ffffffff ffffffff ffffffff     ................

00415d98 <image_data_calibri_23_0x5f>:
  415d98:	ffffffff ffffffff ffffffff ffffffff     ................
  415da8:	ffffffff ffffffff ffffffff ffffffff     ................
  415db8:	ffffffff ffffffff ffffffff ffffffff     ................
  415dc8:	ffffffff ffffffff ffffffff ffffffff     ................
  415dd8:	ffffffff ffffffff ffffffff ffffffff     ................
  415de8:	ffffffff ffffffff ffffffff ffffffff     ................
  415df8:	ffffffff ffffffff ffffffff ffffffff     ................
  415e08:	ffffffff ffffffff ffffffff ffffffff     ................
  415e18:	ffffffff ffffffff ffffffff ffffffff     ................
  415e28:	ffffffff ffffffff ffffffff ffffffff     ................
  415e38:	ffffffff ffffffff ffffffff ffffffff     ................
  415e48:	ffffffff ffffffff ffffffff ffffffff     ................
  415e58:	ffffffff ffffffff ffffffff ffffffff     ................
  415e68:	ffffffff ffffffff ffffffff ffffffff     ................
  415e78:	ffffffff ffffffff ffffffff ffffffff     ................
  415e88:	ffffffff ffffffff ffffffff ffffffff     ................
  415e98:	ffffffff ffffffff ffffffff ffffffff     ................
  415ea8:	ffffffff ffffffff ffffffff ffffffff     ................
  415eb8:	ffffffff ffffffff ffffffff ffffffff     ................
  415ec8:	ffffffff ffffffff ffffffff ffffffff     ................
  415ed8:	ffffffff ffffffff ffffffff ffffffff     ................
  415ee8:	ffffffff ffffffff ffffffff ffffffff     ................
  415ef8:	ffffffff ffffffff ffffffff ffffffff     ................
  415f08:	ffffffff ffffffff ffffffff ffffffff     ................
  415f18:	ffffffff ffffffff ffffffff ffffffff     ................
  415f28:	ffffffff ffffffff ffffffff ffffffff     ................
  415f38:	ffffffff ffffffff ffffffff ffffffff     ................
  415f48:	ffffffff ffffffff ffffffff ffffffff     ................
  415f58:	ffffffff ffffffff ffffffff ffffffff     ................
  415f68:	ffffffff ffffffff ffffffff ffffffff     ................
  415f78:	ffffffff ffffffff ffffffff ffffffff     ................
  415f88:	ffffffff ffffffff ffffffff ffffffff     ................
  415f98:	ffffffff ffffffff ffffffff ffffffff     ................
  415fa8:	ffffffff ffffffff ffffffff ffffffff     ................
  415fb8:	ffffffff ffffffff ffffffff ffffffff     ................
  415fc8:	ffffffff ffffffff ffffffff ffffffff     ................
  415fd8:	ffffffff ffffffff ffffffff ffffffff     ................
  415fe8:	ffffffff ffffffff ffffffff ffffffff     ................
  415ff8:	ffffffff ffffffff ffffffff ffffffff     ................
  416008:	ffffffff ffffffff ffffffff ffffffff     ................
  416018:	ffffffff ffffffff ffffffff ffffffff     ................
  416028:	ffffffff ffffffff ffffffff ffffffff     ................
  416038:	ffffffff ffffffff ffffffff ffffffff     ................
  416048:	ffffffff ffffffff ffffffff ffffffff     ................
  416058:	ffffffff ffffffff ffffffff ffffffff     ................
	...
  4160b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4160c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4160d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4160e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4160f0:	ffffffff ffffffff                       ........

004160f8 <image_data_calibri_23_0x60>:
  4160f8:	ffffffff ffffffff ffffffff ffffffff     ................
  416108:	ffffffff ffffffff 00ffffff 00000000     ................
  416118:	ffffff00 ffffffff ffffffff ffffffff     ................
  416128:	00ffffff 00000000 ffffff00 ffffffff     ................
  416138:	ffffffff ffffffff 00000000 ffff0000     ................
  416148:	ffffffff ffffffff ffffffff ffffffff     ................
  416158:	00000000 ffff0000 ffffffff ffffffff     ................
  416168:	ffffffff ffffffff ffffffff ffffffff     ................
  416178:	ffffffff ffffffff ffffffff ffffffff     ................
  416188:	ffffffff ffffffff ffffffff ffffffff     ................
  416198:	ffffffff ffffffff ffffffff ffffffff     ................
  4161a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4161b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4161c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4161d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4161e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4161f8:	ffffffff ffffffff ffffffff ffffffff     ................
  416208:	ffffffff ffffffff ffffffff ffffffff     ................
  416218:	ffffffff ffffffff ffffffff ffffffff     ................
  416228:	ffffffff ffffffff ffffffff ffffffff     ................
  416238:	ffffffff ffffffff ffffffff ffffffff     ................
  416248:	ffffffff ffffffff ffffffff ffffffff     ................
  416258:	ffffffff ffffffff ffffffff ffffffff     ................
  416268:	ffffffff ffffffff ffffffff ffffffff     ................
  416278:	ffffffff ffffffff ffffffff ffffffff     ................
  416288:	ffffffff ffffffff ffffffff ffffffff     ................
  416298:	ffffffff ffffffff ffffffff ffffffff     ................
  4162a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4162b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4162c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4162d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4162e8:	ffffffff ffffffff                       ........

004162f0 <image_data_calibri_23_0x61>:
  4162f0:	ffffffff ffffffff ffffffff ffffffff     ................
  416300:	ffffffff ffffffff ffffffff ffffffff     ................
  416310:	ffffffff ffffffff ffffffff ffffffff     ................
  416320:	ffffffff ffffffff ffffffff ffffffff     ................
  416330:	ffffffff ffffffff ffffffff ffffffff     ................
  416340:	ffffffff ffffffff ffffffff ffffffff     ................
  416350:	ffffffff ffffffff ffffffff ffffffff     ................
  416360:	ffffffff ffffffff ffffffff ffffffff     ................
  416370:	ffffffff ffffffff ffffffff ffffffff     ................
  416380:	ffffffff ffffffff ffffffff ffffffff     ................
  416390:	ffffffff ffffffff ffffffff ffffffff     ................
  4163a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4163b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4163c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4163d0:	ffffffff ffffffff ffffffff 000000ff     ................
	...
  4163ec:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  416410:	ffffffff ffffffff ffffffff ff000000     ................
  416420:	ffffffff ffffffff ffffffff 0000ffff     ................
  416430:	00000000 ffffffff ffffffff ffffffff     ................
  416440:	ffffffff ffffffff ffffffff 00ffffff     ................
  416450:	00000000 ffffff00 ffffffff ffffffff     ................
  416460:	ffffffff 00000000 00000000 00000000     ................
  416470:	00000000 ffff0000 ffffffff ffffffff     ................
  416480:	0000ffff 00000000 00000000 00000000     ................
  416490:	00000000 ff000000 ffffffff ffffffff     ................
	...
  4164a8:	ffffff00 ffffffff 0000ffff 00000000     ................
  4164b8:	ffffffff ffffffff 000000ff ff000000     ................
  4164c8:	ffffffff ffffffff 00ffffff 00000000     ................
  4164d8:	ffffff00 ffffffff 0000ffff 00000000     ................
  4164e8:	ffffffff ffffffff 000000ff 00000000     ................
  4164f8:	ffff0000 ffffffff 00ffffff 00000000     ................
	...
  416518:	ff000000 ffffffff ffffffff 00ffffff     ................
	...
  416530:	ff000000 0000ffff 00000000 ffffffff     ................
  416540:	ffffffff ffffffff ffffffff ffffffff     ................
  416550:	ffffffff ffffffff ffffffff ffffffff     ................
  416560:	ffffffff ffffffff ffffffff ffffffff     ................
  416570:	ffffffff ffffffff ffffffff ffffffff     ................
  416580:	ffffffff ffffffff ffffffff ffffffff     ................
  416590:	ffffffff ffffffff ffffffff ffffffff     ................
  4165a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4165b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4165c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4165d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4165e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4165f0:	ffffffff ffffffff ffffffff ffffffff     ................
  416600:	ffffffff ffffffff                       ........

00416608 <image_data_calibri_23_0x62>:
  416608:	ffffffff ffffffff ffffffff ffffffff     ................
  416618:	ffffffff ffffffff ffffffff ffffffff     ................
  416628:	ffffffff ffffffff ffffffff ffffffff     ................
  416638:	ffffffff ffffffff ffffffff ffffffff     ................
  416648:	ffffffff ffffffff ffffffff 0000ffff     ................
  416658:	00000000 ffffffff ffffffff ffffffff     ................
  416668:	ffffffff ffffffff ffffffff ffffffff     ................
  416678:	0000ffff 00000000 ffffffff ffffffff     ................
  416688:	ffffffff ffffffff ffffffff ffffffff     ................
  416698:	ffffffff 0000ffff 00000000 ffffffff     ................
  4166a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4166b8:	ffffffff ffffffff 0000ffff 00000000     ................
  4166c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4166d8:	ffffffff ffffffff ffffffff 0000ffff     ................
  4166e8:	00000000 ffffffff ffffffff ffffffff     ................
  4166f8:	ffffffff ffffffff ffffffff ffffffff     ................
  416708:	0000ffff 00000000 00ffffff 00000000     ................
  416718:	00000000 ff000000 ffffffff ffffffff     ................
  416728:	ffffffff 0000ffff 00000000 00000000     ................
	...
  416744:	ffff0000 ffffffff ffffffff 0000ffff     ................
  416754:	00000000 ff000000 ffffffff ffffffff     ................
	...
  41676c:	ffffff00 ffffffff 0000ffff 00000000     ................
  41677c:	ffffffff ffffffff ffffffff 00ffffff     ................
  41678c:	00000000 ffffff00 ffffffff 0000ffff     ................
  41679c:	00000000 ffffffff ffffffff ffffffff     ................
  4167ac:	00ffffff 00000000 ffffff00 ffffffff     ................
  4167bc:	0000ffff 00000000 ffffffff ffffffff     ................
  4167cc:	ffffffff 00ffffff 00000000 ffffff00     ................
  4167dc:	ffffffff 0000ffff 00000000 ffffffff     ................
  4167ec:	ffffffff ffffffff 00ffffff 00000000     ................
  4167fc:	ffffff00 ffffffff 0000ffff 00000000     ................
  41680c:	ffffffff ffffffff ffffffff 00ffffff     ................
  41681c:	00000000 ffffff00 ffffffff 0000ffff     ................
  41682c:	00000000 ff000000 ffffffff ffffffff     ................
  41683c:	00000000 ffff0000 ffffffff ffffffff     ................
  41684c:	0000ffff 00000000 00000000 00000000     ................
	...
  416864:	ffff0000 ffffffff ffffffff 0000ffff     ................
  416874:	00000000 00ffffff 00000000 00000000     ................
  416884:	ff000000 ffffffff ffffffff ffffffff     ................
  416894:	ffffffff ffffffff ffffffff ffffffff     ................
  4168a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4168b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4168c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4168d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4168e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4168f4:	ffffffff ffffffff ffffffff ffffffff     ................
  416904:	ffffffff ffffffff ffffffff ffffffff     ................
  416914:	ffffffff ffffffff ffffffff ffffffff     ................
  416924:	ffffffff ffffffff ffffffff ffffffff     ................
  416934:	ffffffff ffffffff ffffffff ffffffff     ................
  416944:	ffffffff ffffffff ffffffff ffffffff     ................
  416954:	ffffffff ffffffff ffffffff ffffffff     ................
  416964:	ffffffff                                ....

00416968 <image_data_calibri_23_0x63>:
  416968:	ffffffff ffffffff ffffffff ffffffff     ................
  416978:	ffffffff ffffffff ffffffff ffffffff     ................
  416988:	ffffffff ffffffff ffffffff ffffffff     ................
  416998:	ffffffff ffffffff ffffffff ffffffff     ................
  4169a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4169b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4169c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4169d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4169e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4169f8:	ffffffff ffffffff ffffffff ffffffff     ................
  416a08:	ffffffff ffffffff ffffffff ffffffff     ................
  416a18:	ffffffff ffffffff ffffffff ffffffff     ................
  416a28:	ffffffff ffffffff ffffffff ffffffff     ................
  416a38:	ffffffff ffffffff 00ffffff 00000000     ................
	...
  416a50:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
  416a70:	ff000000 ffffffff ffffffff 00000000     ................
  416a80:	ffff0000 ffffffff ffffffff 0000ffff     ................
  416a90:	ffffff00 00ffffff 00000000 ffffff00     ................
  416aa0:	ffffffff ffffffff ffffffff ffffffff     ................
  416ab0:	ffffffff 000000ff ff000000 ffffffff     ................
  416ac0:	ffffffff ffffffff ffffffff ffffffff     ................
  416ad0:	00ffffff 00000000 ffffff00 ffffffff     ................
  416ae0:	ffffffff ffffffff ffffffff ffffffff     ................
  416af0:	000000ff ff000000 ffffffff ffffffff     ................
  416b00:	ffffffff ffffffff ffffffff 00ffffff     ................
  416b10:	00000000 ffffff00 ffffffff ffffffff     ................
  416b20:	ffffffff ffffffff ffffffff ffffffff     ................
  416b30:	00000000 ffff0000 ffffffff ffffffff     ................
  416b40:	0000ffff ffffff00 ffffffff 0000ffff     ................
	...
  416b60:	ff000000 ffffffff ffffffff 00ffffff     ................
	...
  416b7c:	ffff0000 ffffffff ffffffff ffffffff     ................
  416b8c:	ffffffff ffffffff ffffffff ffffffff     ................
  416b9c:	ffffffff ffffffff ffffffff ffffffff     ................
  416bac:	ffffffff ffffffff ffffffff ffffffff     ................
  416bbc:	ffffffff ffffffff ffffffff ffffffff     ................
  416bcc:	ffffffff ffffffff ffffffff ffffffff     ................
  416bdc:	ffffffff ffffffff ffffffff ffffffff     ................
  416bec:	ffffffff ffffffff ffffffff ffffffff     ................
  416bfc:	ffffffff ffffffff ffffffff ffffffff     ................
  416c0c:	ffffffff ffffffff ffffffff ffffffff     ................
  416c1c:	ffffffff ffffffff ffffffff ffffffff     ................
  416c2c:	ffffffff ffffffff ffffffff              ............

00416c38 <image_data_calibri_23_0x64>:
  416c38:	ffffffff ffffffff ffffffff ffffffff     ................
  416c48:	ffffffff ffffffff ffffffff ffffffff     ................
  416c58:	ffffffff ffffffff ffffffff ffffffff     ................
  416c68:	ffffffff ffffffff ffffffff ffffffff     ................
  416c78:	ffffffff ffffffff ffffffff ffffffff     ................
  416c88:	ffffffff ffffffff ffffffff ffffffff     ................
  416c98:	00000000 ffff0000 ffffffff ffffffff     ................
  416ca8:	ffffffff ffffffff ffffffff ffffffff     ................
  416cb8:	ffffffff 00000000 ffff0000 ffffffff     ................
  416cc8:	ffffffff ffffffff ffffffff ffffffff     ................
  416cd8:	ffffffff ffffffff 00000000 ffff0000     ................
  416ce8:	ffffffff ffffffff ffffffff ffffffff     ................
  416cf8:	ffffffff ffffffff ffffffff 00000000     ................
  416d08:	ffff0000 ffffffff ffffffff ffffffff     ................
  416d18:	ffffffff ffffffff ffffffff ffffffff     ................
  416d28:	00000000 ffff0000 ffffffff ffffffff     ................
  416d38:	ffffffff 000000ff 00000000 00000000     ................
  416d48:	ffffff00 00000000 ffff0000 ffffffff     ................
  416d58:	ffffffff 0000ffff 00000000 00000000     ................
	...
  416d74:	ffff0000 ffffffff ffffffff 0000ffff     ................
  416d84:	00000000 ffffffff ffffffff 000000ff     ................
  416d94:	00000000 ffff0000 ffffffff 00ffffff     ................
  416da4:	00000000 ffffff00 ffffffff ffffffff     ................
  416db4:	ffffffff 00000000 ffff0000 ffffffff     ................
  416dc4:	00ffffff 00000000 ffffff00 ffffffff     ................
  416dd4:	ffffffff ffffffff 00000000 ffff0000     ................
  416de4:	ffffffff 00ffffff 00000000 ffffff00     ................
  416df4:	ffffffff ffffffff ffffffff 00000000     ................
  416e04:	ffff0000 ffffffff 00ffffff 00000000     ................
  416e14:	ffffff00 ffffffff ffffffff ffffffff     ................
  416e24:	00000000 ffff0000 ffffffff 00ffffff     ................
  416e34:	00000000 ffffff00 ffffffff ffffffff     ................
  416e44:	ffffffff 00000000 ffff0000 ffffffff     ................
  416e54:	00ffffff 00000000 00000000 ffffffff     ................
  416e64:	ffffffff 000000ff 00000000 ffff0000     ................
  416e74:	ffffffff ffffffff 0000ffff 00000000     ................
	...
  416e94:	ffff0000 ffffffff ffffffff ffffffff     ................
  416ea4:	000000ff 00000000 00000000 ffffff00     ................
  416eb4:	00000000 ffff0000 ffffffff ffffffff     ................
  416ec4:	ffffffff ffffffff ffffffff ffffffff     ................
  416ed4:	ffffffff ffffffff ffffffff ffffffff     ................
  416ee4:	ffffffff ffffffff ffffffff ffffffff     ................
  416ef4:	ffffffff ffffffff ffffffff ffffffff     ................
  416f04:	ffffffff ffffffff ffffffff ffffffff     ................
  416f14:	ffffffff ffffffff ffffffff ffffffff     ................
  416f24:	ffffffff ffffffff ffffffff ffffffff     ................
  416f34:	ffffffff ffffffff ffffffff ffffffff     ................
  416f44:	ffffffff ffffffff ffffffff ffffffff     ................
  416f54:	ffffffff ffffffff ffffffff ffffffff     ................
  416f64:	ffffffff ffffffff ffffffff ffffffff     ................
  416f74:	ffffffff ffffffff ffffffff ffffffff     ................
  416f84:	ffffffff ffffffff ffffffff ffffffff     ................
  416f94:	ffffffff                                ....

00416f98 <image_data_calibri_23_0x65>:
  416f98:	ffffffff ffffffff ffffffff ffffffff     ................
  416fa8:	ffffffff ffffffff ffffffff ffffffff     ................
  416fb8:	ffffffff ffffffff ffffffff ffffffff     ................
  416fc8:	ffffffff ffffffff ffffffff ffffffff     ................
  416fd8:	ffffffff ffffffff ffffffff ffffffff     ................
  416fe8:	ffffffff ffffffff ffffffff ffffffff     ................
  416ff8:	ffffffff ffffffff ffffffff ffffffff     ................
  417008:	ffffffff ffffffff ffffffff ffffffff     ................
  417018:	ffffffff ffffffff ffffffff ffffffff     ................
  417028:	ffffffff ffffffff ffffffff ffffffff     ................
  417038:	ffffffff ffffffff ffffffff ffffffff     ................
  417048:	ffffffff ffffffff ffffffff ffffffff     ................
  417058:	ffffffff ffffffff ffffffff ffffffff     ................
  417068:	ffffffff ffffffff ffffffff ffffffff     ................
  417078:	ffffffff ffffffff ffffffff ffffffff     ................
	...
  417094:	ff000000 ffffffff ffffffff ffffffff     ................
  4170a4:	0000ffff 00000000 00000000 00000000     ................
  4170b4:	00000000 ff000000 ffffffff ffffffff     ................
  4170c4:	00ffffff 00000000 ffffff00 ffffffff     ................
  4170d4:	0000ffff 00000000 ff000000 ffffffff     ................
  4170e4:	000000ff ff000000 ffffffff ffffffff     ................
  4170f4:	ffffffff 0000ffff 00000000 ffffffff     ................
  417104:	0000ffff 00000000 00000000 00000000     ................
	...
  417120:	ffffff00 00ffffff 00000000 00000000     ................
	...
  417140:	ffff0000 ffffffff 00000000 ffff0000     ................
  417150:	ffffffff ffffffff ffffffff ffffffff     ................
  417160:	ffffffff ffffffff 000000ff ff000000     ................
  417170:	ffffffff ffffffff ffffffff ffffffff     ................
  417180:	ffffffff ffffffff ffffffff 000000ff     ................
  417190:	ff000000 ffffffff ffffffff ffffffff     ................
  4171a0:	0000ffff ffffff00 ffffffff 0000ffff     ................
	...
  4171c4:	ffff0000 ffffffff ffffffff ffffffff     ................
  4171d4:	000000ff 00000000 00000000 00000000     ................
  4171e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4171f4:	ffffffff ffffffff ffffffff ffffffff     ................
  417204:	ffffffff ffffffff ffffffff ffffffff     ................
  417214:	ffffffff ffffffff ffffffff ffffffff     ................
  417224:	ffffffff ffffffff ffffffff ffffffff     ................
  417234:	ffffffff ffffffff ffffffff ffffffff     ................
  417244:	ffffffff ffffffff ffffffff ffffffff     ................
  417254:	ffffffff ffffffff ffffffff ffffffff     ................
  417264:	ffffffff ffffffff ffffffff ffffffff     ................
  417274:	ffffffff ffffffff ffffffff ffffffff     ................
  417284:	ffffffff ffffffff ffffffff ffffffff     ................
  417294:	ffffffff ffffffff ffffffff ffffffff     ................
  4172a4:	ffffffff ffffffff ffffffff              ............

004172b0 <image_data_calibri_23_0x66>:
  4172b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4172c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4172d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4172e0:	00ffffff 00000000 00000000 ff000000     ................
  4172f0:	ffffffff 000000ff 00000000 00000000     ................
  417300:	00000000 ffffffff 0000ffff 00000000     ................
  417310:	ffffffff ffffffff ffffffff 00ffffff     ................
  417320:	00000000 ffffff00 ffffffff ffffffff     ................
  417330:	ffffffff 00000000 ffff0000 ffffffff     ................
  417340:	00ffffff 00000000 00000000 00000000     ................
	...
  41736c:	ffffff00 00ffffff 00000000 ffffff00     ................
  41737c:	ffffffff ffffffff ffffffff 00000000     ................
  41738c:	ffff0000 ffffffff ffffffff ffffffff     ................
  41739c:	000000ff ff000000 ffffffff ffffffff     ................
  4173ac:	ffffffff 0000ffff 00000000 ffffffff     ................
  4173bc:	ffffffff ffffffff 00ffffff 00000000     ................
  4173cc:	ffffff00 ffffffff ffffffff ffffffff     ................
  4173dc:	00000000 ffff0000 ffffffff ffffffff     ................
  4173ec:	ffffffff 000000ff ff000000 ffffffff     ................
  4173fc:	ffffffff ffffffff 0000ffff 00000000     ................
  41740c:	ffffffff ffffffff ffffffff 00ffffff     ................
  41741c:	00000000 ffffff00 ffffffff ffffffff     ................
  41742c:	ffffffff ffffffff ffffffff ffffffff     ................
  41743c:	ffffffff ffffffff ffffffff ffffffff     ................
  41744c:	ffffffff ffffffff ffffffff ffffffff     ................
  41745c:	ffffffff ffffffff ffffffff ffffffff     ................
  41746c:	ffffffff ffffffff ffffffff ffffffff     ................
  41747c:	ffffffff ffffffff ffffffff ffffffff     ................
  41748c:	ffffffff ffffffff ffffffff ffffffff     ................
  41749c:	ffffffff ffffffff ffffffff              ............

004174a8 <image_data_calibri_23_0x67>:
  4174a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4174b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4174c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4174d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4174e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4174f8:	ffffffff ffffffff ffffffff ffffffff     ................
  417508:	ffffffff ffffffff ffffffff ffffffff     ................
  417518:	ffffffff ffffffff ffffffff ffffffff     ................
  417528:	ffffffff ffffffff ffffffff ffffffff     ................
  417538:	ffffffff ffffffff ffffffff ffffffff     ................
  417548:	ffffffff ffffffff ffffffff ffffffff     ................
  417558:	ffffffff ffffffff ffffffff ffffffff     ................
  417568:	ffffffff ffffffff ffffffff ffffffff     ................
  417578:	ffffffff ffffffff ffffffff ffffffff     ................
  417588:	ffffffff ffffffff ffffffff ffffffff     ................
  417598:	00ffffff 00000000 00000000 00000000     ................
	...
  4175b0:	ffffffff ffffffff 000000ff 00000000     ................
	...
  4175d0:	ffffff00 00ffffff 00000000 00000000     ................
  4175e0:	ffffffff 0000ffff 00000000 ff000000     ................
  4175f0:	ffffffff ffffffff 00000000 ffff0000     ................
  417600:	ffffffff ffffffff 0000ffff 00000000     ................
  417610:	ffffffff ffffffff 000000ff ff000000     ................
  417620:	ffffffff ffffffff 00ffffff 00000000     ................
  417630:	ffffff00 ffffffff 0000ffff 00000000     ................
  417640:	ff000000 ffffffff 000000ff 00000000     ................
  417650:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
  417670:	ffffffff ffffffff 000000ff 00000000     ................
	...
  41768c:	ffff0000 ffffffff ffffffff 0000ffff     ................
  41769c:	00000000 ffffffff ffffffff ffffffff     ................
  4176ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4176bc:	0000ffff 00000000 00000000 00000000     ................
  4176cc:	00000000 ff000000 ffffffff ffffffff     ................
  4176dc:	00ffffff 00000000 00000000 00000000     ................
	...
  4176f8:	ffff0000 000000ff ff000000 ffffffff     ................
  417708:	ffffffff ffffffff ffffffff 000000ff     ................
  417718:	ff000000 0000ffff 00000000 ffffffff     ................
  417728:	ffffffff ffffffff ffffffff 0000ffff     ................
  417738:	00000000 00ffffff 00000000 00000000     ................
	...
  417758:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
  417778:	ffffffff ffffffff ffffffff ffffffff     ................
  417788:	ffffffff ffffffff ffffffff ffffffff     ................
  417798:	ffffffff ffffffff ffffffff ffffffff     ................
  4177a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4177b8:	ffffffff ffffffff                       ........

004177c0 <image_data_calibri_23_0x68>:
  4177c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4177d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4177e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4177f0:	ffffffff ffffffff ffffffff ffffffff     ................
  417800:	ffffffff ffffffff ffffffff 0000ffff     ................
  417810:	00000000 ffffffff ffffffff ffffffff     ................
  417820:	ffffffff ffffffff ffffffff ffffffff     ................
  417830:	0000ffff 00000000 ffffffff ffffffff     ................
  417840:	ffffffff ffffffff ffffffff ffffffff     ................
  417850:	ffffffff 0000ffff 00000000 ffffffff     ................
  417860:	ffffffff ffffffff ffffffff ffffffff     ................
  417870:	ffffffff ffffffff 0000ffff 00000000     ................
  417880:	ffffffff ffffffff ffffffff ffffffff     ................
  417890:	ffffffff ffffffff ffffffff 0000ffff     ................
  4178a0:	00000000 ffffffff ffffffff ffffffff     ................
  4178b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4178c0:	0000ffff 00000000 00ffffff 00000000     ................
  4178d0:	00000000 ff000000 ffffffff ffffffff     ................
  4178e0:	ffffffff 0000ffff 00000000 00000000     ................
	...
  4178f8:	ff000000 ffffffff ffffffff ffffffff     ................
  417908:	0000ffff 00000000 ff000000 ffffffff     ................
  417918:	000000ff 00000000 ffff0000 ffffffff     ................
  417928:	ffffffff 0000ffff 00000000 ffffffff     ................
  417938:	ffffffff ffffffff 00000000 ffff0000     ................
  417948:	ffffffff ffffffff 0000ffff 00000000     ................
  417958:	ffffffff ffffffff ffffffff 00000000     ................
  417968:	ffff0000 ffffffff ffffffff 0000ffff     ................
  417978:	00000000 ffffffff ffffffff ffffffff     ................
  417988:	00000000 ffff0000 ffffffff ffffffff     ................
  417998:	0000ffff 00000000 ffffffff ffffffff     ................
  4179a8:	ffffffff 00000000 ffff0000 ffffffff     ................
  4179b8:	ffffffff 0000ffff 00000000 ffffffff     ................
  4179c8:	ffffffff ffffffff 00000000 ffff0000     ................
  4179d8:	ffffffff ffffffff 0000ffff 00000000     ................
  4179e8:	ffffffff ffffffff ffffffff 00000000     ................
  4179f8:	ffff0000 ffffffff ffffffff 0000ffff     ................
  417a08:	00000000 ffffffff ffffffff ffffffff     ................
  417a18:	00000000 ffff0000 ffffffff ffffffff     ................
  417a28:	0000ffff 00000000 ffffffff ffffffff     ................
  417a38:	ffffffff 00000000 ffff0000 ffffffff     ................
  417a48:	ffffffff ffffffff ffffffff ffffffff     ................
  417a58:	ffffffff ffffffff ffffffff ffffffff     ................
  417a68:	ffffffff ffffffff ffffffff ffffffff     ................
  417a78:	ffffffff ffffffff ffffffff ffffffff     ................
  417a88:	ffffffff ffffffff ffffffff ffffffff     ................
  417a98:	ffffffff ffffffff ffffffff ffffffff     ................
  417aa8:	ffffffff ffffffff ffffffff ffffffff     ................
  417ab8:	ffffffff ffffffff ffffffff ffffffff     ................
  417ac8:	ffffffff ffffffff ffffffff ffffffff     ................
  417ad8:	ffffffff ffffffff ffffffff ffffffff     ................
  417ae8:	ffffffff ffffffff ffffffff ffffffff     ................
  417af8:	ffffffff ffffffff ffffffff ffffffff     ................
  417b08:	ffffffff ffffffff ffffffff ffffffff     ................
  417b18:	ffffffff ffffffff                       ........

00417b20 <image_data_calibri_23_0x69>:
  417b20:	ffffffff ffffffff ffffffff ffffffff     ................
  417b30:	ffffffff ffffffff ffffffff ffffffff     ................
  417b40:	ffffffff ffffffff ffffffff ffffffff     ................
  417b50:	00ffffff 00000000 ffffff00 ffffffff     ................
  417b60:	0000ffff 00000000 ffffffff ffffffff     ................
  417b70:	ffffffff ffffffff ffffffff ffffffff     ................
  417b80:	ffffffff ffffffff ffffffff 00ffffff     ................
  417b90:	00000000 ffffff00 ffffffff 0000ffff     ................
  417ba0:	00000000 ffffffff ffffffff 000000ff     ................
  417bb0:	ff000000 ffffffff ffffffff 00000000     ................
  417bc0:	ffff0000 ffffffff 00ffffff 00000000     ................
  417bd0:	ffffff00 ffffffff 0000ffff 00000000     ................
  417be0:	ffffffff ffffffff 000000ff ff000000     ................
  417bf0:	ffffffff ffffffff 00000000 ffff0000     ................
  417c00:	ffffffff 00ffffff 00000000 ffffff00     ................
  417c10:	ffffffff 0000ffff 00000000 ffffffff     ................
  417c20:	ffffffff 000000ff ff000000 ffffffff     ................
  417c30:	ffffffff ffffffff ffffffff ffffffff     ................
  417c40:	ffffffff ffffffff ffffffff ffffffff     ................
  417c50:	ffffffff ffffffff ffffffff ffffffff     ................
  417c60:	ffffffff ffffffff ffffffff ffffffff     ................
  417c70:	ffffffff ffffffff ffffffff ffffffff     ................
  417c80:	ffffffff ffffffff                       ........

00417c88 <image_data_calibri_23_0x6a>:
  417c88:	ffffffff ffffffff ffffffff ffffffff     ................
  417c98:	ffffffff ffffffff ffffffff ffffffff     ................
  417ca8:	ffffffff ffffffff ffffffff ffffffff     ................
  417cb8:	ffffffff ffffffff ffffffff 00000000     ................
  417cc8:	ffff0000 ffffffff ffffffff 0000ffff     ................
  417cd8:	00000000 ffffffff ffffffff ffffffff     ................
  417ce8:	ffffffff ffffffff ffffffff ffffffff     ................
  417cf8:	ffffffff ffffffff ffffffff ffffffff     ................
  417d08:	ffffffff 00000000 ffff0000 ffffffff     ................
  417d18:	ffffffff 0000ffff 00000000 ffffffff     ................
  417d28:	ffffffff ffffffff 00000000 ffff0000     ................
  417d38:	ffffffff ffffffff 0000ffff 00000000     ................
  417d48:	ffffffff ffffffff ffffffff 00000000     ................
  417d58:	ffff0000 ffffffff ffffffff 0000ffff     ................
  417d68:	00000000 ffffffff ffffffff ffffffff     ................
  417d78:	00000000 ffff0000 ffffffff ffffffff     ................
  417d88:	0000ffff 00000000 ffffffff ffffffff     ................
  417d98:	ffffffff 00000000 ffff0000 ffffffff     ................
  417da8:	ffffffff 0000ffff 00000000 ffffffff     ................
  417db8:	ffffffff ffffffff 00000000 ffff0000     ................
  417dc8:	ffffffff ffffffff 0000ffff 00000000     ................
  417dd8:	ffffffff ffffffff ffffffff 00000000     ................
  417de8:	ffff0000 ffffffff 00000000 00000000     ................
  417df8:	00000000 ffffffff 0000ffff 00000000     ................
  417e08:	ff000000 ffffffff ffffffff ffffffff     ................
  417e18:	ffffffff ffffffff ffffffff ffffffff     ................
  417e28:	ffffffff ffffffff ffffffff ffffffff     ................

00417e38 <image_data_calibri_23_0x6b>:
  417e38:	ffffffff ffffffff ffffffff ffffffff     ................
  417e48:	ffffffff ffffffff ffffffff ffffffff     ................
  417e58:	ffffffff ffffffff ffffffff ffffffff     ................
  417e68:	ffffffff ffffffff ffffffff ffffffff     ................
  417e78:	0000ffff 00000000 ffffffff ffffffff     ................
  417e88:	ffffffff ffffffff ffffffff ffffffff     ................
  417e98:	00000000 ffff0000 ffffffff ffffffff     ................
  417ea8:	ffffffff ffffffff ffffffff 0000ffff     ................
  417eb8:	00000000 ffffffff ffffffff ffffffff     ................
  417ec8:	ffffffff ffffffff ffffffff 00000000     ................
  417ed8:	ffff0000 ffffffff ffffffff ffffffff     ................
  417ee8:	ffffffff ffffffff 0000ffff 00000000     ................
  417ef8:	ffffffff ffffffff ffffffff ffffffff     ................
  417f08:	ffffffff ffffffff 00000000 ffff0000     ................
  417f18:	ffffffff ffffffff 0000ffff 00000000     ................
  417f28:	ffffffff 0000ffff 00000000 ffffffff     ................
  417f38:	ffffffff 000000ff ff000000 ffffffff     ................
  417f48:	ffffffff 00000000 ffff0000 ffffffff     ................
  417f58:	00000000 ffff0000 ffffffff ffffffff     ................
  417f68:	0000ffff 00000000 00ffffff 00000000     ................
  417f78:	ffffff00 ffffffff ffffffff ffffffff     ................
	...
  417f94:	ffffffff ffffffff ffffffff ffffffff     ................
  417fa4:	0000ffff 00000000 00000000 00000000     ................
  417fb4:	ffffff00 ffffffff ffffffff ffffffff     ................
  417fc4:	00000000 ffff0000 000000ff ff000000     ................
  417fd4:	ffffffff ffffffff ffffffff 0000ffff     ................
  417fe4:	00000000 ffffffff 0000ffff 00000000     ................
  417ff4:	ffffffff ffffffff ffffffff 00000000     ................
  418004:	ffff0000 ffffffff 00000000 00000000     ................
  418014:	ffffff00 ffffffff 0000ffff 00000000     ................
  418024:	ffffffff ffffffff 000000ff ff000000     ................
  418034:	ffffffff ffffffff 00000000 ffff0000     ................
  418044:	ffffffff ffffffff 0000ffff 00000000     ................
  418054:	ffffffff ffffffff ffffffff ffffffff     ................
  418064:	ffffffff ffffffff ffffffff ffffffff     ................
  418074:	ffffffff ffffffff ffffffff ffffffff     ................
  418084:	ffffffff ffffffff ffffffff ffffffff     ................
  418094:	ffffffff ffffffff ffffffff ffffffff     ................
  4180a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4180b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4180c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4180d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4180e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4180f4:	ffffffff ffffffff ffffffff ffffffff     ................
  418104:	ffffffff                                ....

00418108 <image_data_calibri_23_0x6c>:
  418108:	ffffffff ffffffff ffffffff ffffffff     ................
  418118:	ffffffff ffffffff ffffffff ffffffff     ................
  418128:	ffffffff 00000000 ffff0000 ffffffff     ................
  418138:	00ffffff 00000000 ffffff00 ffffffff     ................
  418148:	0000ffff 00000000 ffffffff ffffffff     ................
  418158:	000000ff ff000000 ffffffff ffffffff     ................
  418168:	00000000 ffff0000 ffffffff 00ffffff     ................
  418178:	00000000 ffffff00 ffffffff 0000ffff     ................
  418188:	00000000 ffffffff ffffffff 000000ff     ................
  418198:	ff000000 ffffffff ffffffff 00000000     ................
  4181a8:	ffff0000 ffffffff 00ffffff 00000000     ................
  4181b8:	ffffff00 ffffffff 0000ffff 00000000     ................
  4181c8:	ffffffff ffffffff 000000ff ff000000     ................
  4181d8:	ffffffff ffffffff 00000000 ffff0000     ................
  4181e8:	ffffffff 00ffffff 00000000 ffffff00     ................
  4181f8:	ffffffff 0000ffff 00000000 ffffffff     ................
  418208:	ffffffff 000000ff ff000000 ffffffff     ................
  418218:	ffffffff ffffffff ffffffff ffffffff     ................
  418228:	ffffffff ffffffff ffffffff ffffffff     ................
  418238:	ffffffff ffffffff ffffffff ffffffff     ................
  418248:	ffffffff ffffffff ffffffff ffffffff     ................
  418258:	ffffffff ffffffff ffffffff ffffffff     ................
  418268:	ffffffff ffffffff                       ........

00418270 <image_data_calibri_23_0x6d>:
  418270:	ffffffff ffffffff ffffffff ffffffff     ................
  418280:	ffffffff ffffffff ffffffff ffffffff     ................
  418290:	ffffffff ffffffff ffffffff ffffffff     ................
  4182a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4182b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4182c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4182d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4182e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4182f0:	ffffffff ffffffff ffffffff ffffffff     ................
  418300:	ffffffff ffffffff ffffffff ffffffff     ................
  418310:	ffffffff ffffffff ffffffff ffffffff     ................
  418320:	ffffffff ffffffff ffffffff ffffffff     ................
  418330:	ffffffff ffffffff ffffffff ffffffff     ................
  418340:	ffffffff ffffffff ffffffff ffffffff     ................
  418350:	ffffffff ffffffff ffffffff ffffffff     ................
  418360:	ffffffff ffffffff ffffffff ffffffff     ................
  418370:	ffffffff ffffffff ffffffff ffffffff     ................
  418380:	ffffffff ffffffff ffffffff ffffffff     ................
  418390:	ffffffff ffffffff ffffffff ffffffff     ................
  4183a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4183b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4183c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4183d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4183e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4183f0:	00000000 ffff0000 000000ff 00000000     ................
  418400:	00000000 ffffff00 ffffffff 0000ffff     ................
	...
  418418:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
  41843c:	ffff0000 000000ff 00000000 00000000     ................
  41844c:	00000000 ffffffff ffffffff ffffffff     ................
	...
  418464:	ffffff00 ffffffff 0000ffff 00000000     ................
  418474:	00000000 ffff0000 ffffffff 00000000     ................
  418484:	00000000 ffffff00 ffffffff 0000ffff     ................
  418494:	00000000 ffffffff ffffffff ffffffff     ................
  4184a4:	00ffffff 00000000 ffffff00 ffffffff     ................
  4184b4:	ffffffff 000000ff ff000000 ffffffff     ................
  4184c4:	ffffffff 00000000 ffff0000 ffffffff     ................
  4184d4:	ffffffff ffffffff 000000ff ff000000     ................
  4184e4:	ffffffff ffffffff 00ffffff 00000000     ................
  4184f4:	ffffff00 ffffffff 0000ffff 00000000     ................
  418504:	ffffffff ffffffff ffffffff 00ffffff     ................
  418514:	00000000 ffffff00 ffffffff ffffffff     ................
  418524:	000000ff ff000000 ffffffff ffffffff     ................
  418534:	00000000 ffff0000 ffffffff ffffffff     ................
  418544:	ffffffff 000000ff ff000000 ffffffff     ................
  418554:	ffffffff 00ffffff 00000000 ffffff00     ................
  418564:	ffffffff 0000ffff 00000000 ffffffff     ................
  418574:	ffffffff ffffffff 00ffffff 00000000     ................
  418584:	ffffff00 ffffffff ffffffff 000000ff     ................
  418594:	ff000000 ffffffff ffffffff 00000000     ................
  4185a4:	ffff0000 ffffffff ffffffff ffffffff     ................
  4185b4:	000000ff ff000000 ffffffff ffffffff     ................
  4185c4:	00ffffff 00000000 ffffff00 ffffffff     ................
  4185d4:	0000ffff 00000000 ffffffff ffffffff     ................
  4185e4:	ffffffff 00ffffff 00000000 ffffff00     ................
  4185f4:	ffffffff ffffffff 000000ff ff000000     ................
  418604:	ffffffff ffffffff 00000000 ffff0000     ................
  418614:	ffffffff ffffffff ffffffff 000000ff     ................
  418624:	ff000000 ffffffff ffffffff 00ffffff     ................
  418634:	00000000 ffffff00 ffffffff ffffffff     ................
  418644:	ffffffff ffffffff ffffffff ffffffff     ................
  418654:	ffffffff ffffffff ffffffff ffffffff     ................
  418664:	ffffffff ffffffff ffffffff ffffffff     ................
  418674:	ffffffff ffffffff ffffffff ffffffff     ................
  418684:	ffffffff ffffffff ffffffff ffffffff     ................
  418694:	ffffffff ffffffff ffffffff ffffffff     ................
  4186a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4186b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4186c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4186d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4186e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4186f4:	ffffffff ffffffff ffffffff ffffffff     ................
  418704:	ffffffff ffffffff ffffffff ffffffff     ................
  418714:	ffffffff ffffffff ffffffff ffffffff     ................
  418724:	ffffffff ffffffff ffffffff ffffffff     ................
  418734:	ffffffff ffffffff ffffffff ffffffff     ................
  418744:	ffffffff ffffffff ffffffff ffffffff     ................
  418754:	ffffffff ffffffff ffffffff ffffffff     ................
  418764:	ffffffff ffffffff ffffffff ffffffff     ................
  418774:	ffffffff ffffffff ffffffff              ............

00418780 <image_data_calibri_23_0x6e>:
  418780:	ffffffff ffffffff ffffffff ffffffff     ................
  418790:	ffffffff ffffffff ffffffff ffffffff     ................
  4187a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4187b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4187c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4187d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4187e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4187f0:	ffffffff ffffffff ffffffff ffffffff     ................
  418800:	ffffffff ffffffff ffffffff ffffffff     ................
  418810:	ffffffff ffffffff ffffffff ffffffff     ................
  418820:	ffffffff ffffffff ffffffff ffffffff     ................
  418830:	ffffffff ffffffff ffffffff ffffffff     ................
  418840:	ffffffff ffffffff ffffffff ffffffff     ................
  418850:	ffffffff ffffffff ffffffff ffffffff     ................
  418860:	ffffffff ffffffff ffffffff ffffffff     ................
  418870:	ffffffff ffffffff ffffffff ffffffff     ................
  418880:	0000ffff 00000000 00ffffff 00000000     ................
  418890:	00000000 ff000000 ffffffff ffffffff     ................
  4188a0:	ffffffff 0000ffff 00000000 00000000     ................
	...
  4188b8:	ff000000 ffffffff ffffffff ffffffff     ................
  4188c8:	0000ffff 00000000 ff000000 ffffffff     ................
  4188d8:	000000ff 00000000 ffff0000 ffffffff     ................
  4188e8:	ffffffff 0000ffff 00000000 ffffffff     ................
  4188f8:	ffffffff ffffffff 00000000 ffff0000     ................
  418908:	ffffffff ffffffff 0000ffff 00000000     ................
  418918:	ffffffff ffffffff ffffffff 00000000     ................
  418928:	ffff0000 ffffffff ffffffff 0000ffff     ................
  418938:	00000000 ffffffff ffffffff ffffffff     ................
  418948:	00000000 ffff0000 ffffffff ffffffff     ................
  418958:	0000ffff 00000000 ffffffff ffffffff     ................
  418968:	ffffffff 00000000 ffff0000 ffffffff     ................
  418978:	ffffffff 0000ffff 00000000 ffffffff     ................
  418988:	ffffffff ffffffff 00000000 ffff0000     ................
  418998:	ffffffff ffffffff 0000ffff 00000000     ................
  4189a8:	ffffffff ffffffff ffffffff 00000000     ................
  4189b8:	ffff0000 ffffffff ffffffff 0000ffff     ................
  4189c8:	00000000 ffffffff ffffffff ffffffff     ................
  4189d8:	00000000 ffff0000 ffffffff ffffffff     ................
  4189e8:	0000ffff 00000000 ffffffff ffffffff     ................
  4189f8:	ffffffff 00000000 ffff0000 ffffffff     ................
  418a08:	ffffffff ffffffff ffffffff ffffffff     ................
  418a18:	ffffffff ffffffff ffffffff ffffffff     ................
  418a28:	ffffffff ffffffff ffffffff ffffffff     ................
  418a38:	ffffffff ffffffff ffffffff ffffffff     ................
  418a48:	ffffffff ffffffff ffffffff ffffffff     ................
  418a58:	ffffffff ffffffff ffffffff ffffffff     ................
  418a68:	ffffffff ffffffff ffffffff ffffffff     ................
  418a78:	ffffffff ffffffff ffffffff ffffffff     ................
  418a88:	ffffffff ffffffff ffffffff ffffffff     ................
  418a98:	ffffffff ffffffff ffffffff ffffffff     ................
  418aa8:	ffffffff ffffffff ffffffff ffffffff     ................
  418ab8:	ffffffff ffffffff ffffffff ffffffff     ................
  418ac8:	ffffffff ffffffff ffffffff ffffffff     ................
  418ad8:	ffffffff ffffffff                       ........

00418ae0 <image_data_calibri_23_0x6f>:
  418ae0:	ffffffff ffffffff ffffffff ffffffff     ................
  418af0:	ffffffff ffffffff ffffffff ffffffff     ................
  418b00:	ffffffff ffffffff ffffffff ffffffff     ................
  418b10:	ffffffff ffffffff ffffffff ffffffff     ................
  418b20:	ffffffff ffffffff ffffffff ffffffff     ................
  418b30:	ffffffff ffffffff ffffffff ffffffff     ................
  418b40:	ffffffff ffffffff ffffffff ffffffff     ................
  418b50:	ffffffff ffffffff ffffffff ffffffff     ................
  418b60:	ffffffff ffffffff ffffffff ffffffff     ................
  418b70:	ffffffff ffffffff ffffffff ffffffff     ................
  418b80:	ffffffff ffffffff ffffffff ffffffff     ................
  418b90:	ffffffff ffffffff ffffffff ffffffff     ................
  418ba0:	ffffffff ffffffff ffffffff ffffffff     ................
  418bb0:	ffffffff ffffffff ffffffff ffffffff     ................
  418bc0:	ffffffff ffffffff ffffffff ffffffff     ................
  418bd0:	ffffffff ffffffff ffffffff ffffffff     ................
  418be0:	ffffffff ffffffff 00000000 00000000     ................
  418bf0:	00000000 ff000000 ffffffff ffffffff     ................
  418c00:	ffffffff 0000ffff 00000000 00000000     ................
	...
  418c1c:	ffff0000 ffffffff ffffffff 0000ffff     ................
  418c2c:	00000000 ffffffff ffffffff ffffffff     ................
  418c3c:	00000000 ffff0000 ffffffff 00ffffff     ................
  418c4c:	00000000 ffffff00 ffffffff ffffffff     ................
  418c5c:	ffffffff 00ffffff 00000000 ffffff00     ................
  418c6c:	00ffffff 00000000 ffffff00 ffffffff     ................
  418c7c:	ffffffff ffffffff 00ffffff 00000000     ................
  418c8c:	ffffff00 00ffffff 00000000 ffffff00     ................
  418c9c:	ffffffff ffffffff ffffffff 00ffffff     ................
  418cac:	00000000 ffffff00 00ffffff 00000000     ................
  418cbc:	ffffff00 ffffffff ffffffff ffffffff     ................
  418ccc:	00ffffff 00000000 ffffff00 00ffffff     ................
  418cdc:	00000000 ffffff00 ffffffff ffffffff     ................
  418cec:	ffffffff 00ffffff 00000000 ffffff00     ................
  418cfc:	ffffffff 0000ffff 00000000 ffffffff     ................
  418d0c:	ffffffff ffffffff 00000000 ffff0000     ................
  418d1c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
  418d3c:	ffff0000 ffffffff ffffffff ffffffff     ................
  418d4c:	000000ff 00000000 00000000 00000000     ................
  418d5c:	ffffffff ffffffff ffffffff ffffffff     ................
  418d6c:	ffffffff ffffffff ffffffff ffffffff     ................
  418d7c:	ffffffff ffffffff ffffffff ffffffff     ................
  418d8c:	ffffffff ffffffff ffffffff ffffffff     ................
  418d9c:	ffffffff ffffffff ffffffff ffffffff     ................
  418dac:	ffffffff ffffffff ffffffff ffffffff     ................
  418dbc:	ffffffff ffffffff ffffffff ffffffff     ................
  418dcc:	ffffffff ffffffff ffffffff ffffffff     ................
  418ddc:	ffffffff ffffffff ffffffff ffffffff     ................
  418dec:	ffffffff ffffffff ffffffff ffffffff     ................
  418dfc:	ffffffff ffffffff ffffffff ffffffff     ................
  418e0c:	ffffffff ffffffff ffffffff ffffffff     ................
  418e1c:	ffffffff ffffffff ffffffff ffffffff     ................
  418e2c:	ffffffff ffffffff ffffffff ffffffff     ................
  418e3c:	ffffffff                                ....

00418e40 <image_data_calibri_23_0x70>:
  418e40:	ffffffff ffffffff ffffffff ffffffff     ................
  418e50:	ffffffff ffffffff ffffffff ffffffff     ................
  418e60:	ffffffff ffffffff ffffffff ffffffff     ................
  418e70:	ffffffff ffffffff ffffffff ffffffff     ................
  418e80:	ffffffff ffffffff ffffffff ffffffff     ................
  418e90:	ffffffff ffffffff ffffffff ffffffff     ................
  418ea0:	ffffffff ffffffff ffffffff ffffffff     ................
  418eb0:	ffffffff ffffffff ffffffff ffffffff     ................
  418ec0:	ffffffff ffffffff ffffffff ffffffff     ................
  418ed0:	ffffffff ffffffff ffffffff ffffffff     ................
  418ee0:	ffffffff ffffffff ffffffff ffffffff     ................
  418ef0:	ffffffff ffffffff ffffffff ffffffff     ................
  418f00:	ffffffff ffffffff ffffffff ffffffff     ................
  418f10:	ffffffff ffffffff ffffffff ffffffff     ................
  418f20:	ffffffff ffffffff ffffffff ffffffff     ................
  418f30:	ffffffff ffffffff ffffffff ffffffff     ................
  418f40:	0000ffff 00000000 00ffffff 00000000     ................
  418f50:	00000000 ff000000 ffffffff ffffffff     ................
  418f60:	ffffffff 0000ffff 00000000 00000000     ................
	...
  418f7c:	ffff0000 ffffffff ffffffff 0000ffff     ................
  418f8c:	00000000 ff000000 ffffffff ffffffff     ................
	...
  418fa4:	ffffff00 ffffffff 0000ffff 00000000     ................
  418fb4:	ffffffff ffffffff ffffffff 00ffffff     ................
  418fc4:	00000000 ffffff00 ffffffff 0000ffff     ................
  418fd4:	00000000 ffffffff ffffffff ffffffff     ................
  418fe4:	00ffffff 00000000 ffffff00 ffffffff     ................
  418ff4:	0000ffff 00000000 ffffffff ffffffff     ................
  419004:	ffffffff 00ffffff 00000000 ffffff00     ................
  419014:	ffffffff 0000ffff 00000000 ffffffff     ................
  419024:	ffffffff ffffffff 00ffffff 00000000     ................
  419034:	ffffff00 ffffffff 0000ffff 00000000     ................
  419044:	ffffffff ffffffff ffffffff 00ffffff     ................
  419054:	00000000 ffffff00 ffffffff 0000ffff     ................
  419064:	00000000 ff000000 ffffffff ffffffff     ................
  419074:	00000000 ffff0000 ffffffff ffffffff     ................
  419084:	0000ffff 00000000 00000000 00000000     ................
	...
  41909c:	ffff0000 ffffffff ffffffff 0000ffff     ................
  4190ac:	00000000 00ffffff 00000000 00000000     ................
  4190bc:	ff000000 ffffffff ffffffff ffffffff     ................
  4190cc:	0000ffff 00000000 ffffffff ffffffff     ................
  4190dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4190ec:	ffffffff 0000ffff 00000000 ffffffff     ................
  4190fc:	ffffffff ffffffff ffffffff ffffffff     ................
  41910c:	ffffffff ffffffff 0000ffff 00000000     ................
  41911c:	ffffffff ffffffff ffffffff ffffffff     ................
  41912c:	ffffffff ffffffff ffffffff 0000ffff     ................
  41913c:	00000000 ffffffff ffffffff ffffffff     ................
  41914c:	ffffffff ffffffff ffffffff ffffffff     ................
  41915c:	ffffffff ffffffff ffffffff ffffffff     ................
  41916c:	ffffffff ffffffff ffffffff ffffffff     ................
  41917c:	ffffffff ffffffff ffffffff ffffffff     ................
  41918c:	ffffffff ffffffff ffffffff ffffffff     ................
  41919c:	ffffffff                                ....

004191a0 <image_data_calibri_23_0x71>:
  4191a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4191b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4191c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4191d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4191e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4191f0:	ffffffff ffffffff ffffffff ffffffff     ................
  419200:	ffffffff ffffffff ffffffff ffffffff     ................
  419210:	ffffffff ffffffff ffffffff ffffffff     ................
  419220:	ffffffff ffffffff ffffffff ffffffff     ................
  419230:	ffffffff ffffffff ffffffff ffffffff     ................
  419240:	ffffffff ffffffff ffffffff ffffffff     ................
  419250:	ffffffff ffffffff ffffffff ffffffff     ................
  419260:	ffffffff ffffffff ffffffff ffffffff     ................
  419270:	ffffffff ffffffff ffffffff ffffffff     ................
  419280:	ffffffff ffffffff ffffffff ffffffff     ................
  419290:	ffffffff ffffffff ffffffff ffffffff     ................
  4192a0:	ffffffff 000000ff 00000000 00000000     ................
  4192b0:	ffffff00 00000000 ffff0000 ffffffff     ................
  4192c0:	ffffffff 0000ffff 00000000 00000000     ................
	...
  4192dc:	ffff0000 ffffffff ffffffff 0000ffff     ................
  4192ec:	00000000 ffffffff ffffffff 000000ff     ................
  4192fc:	00000000 ffff0000 ffffffff 00ffffff     ................
  41930c:	00000000 ffffff00 ffffffff ffffffff     ................
  41931c:	ffffffff 00000000 ffff0000 ffffffff     ................
  41932c:	00ffffff 00000000 ffffff00 ffffffff     ................
  41933c:	ffffffff ffffffff 00000000 ffff0000     ................
  41934c:	ffffffff 00ffffff 00000000 ffffff00     ................
  41935c:	ffffffff ffffffff ffffffff 00000000     ................
  41936c:	ffff0000 ffffffff 00ffffff 00000000     ................
  41937c:	ffffff00 ffffffff ffffffff ffffffff     ................
  41938c:	00000000 ffff0000 ffffffff 00ffffff     ................
  41939c:	00000000 ffffff00 ffffffff ffffffff     ................
  4193ac:	ffffffff 00000000 ffff0000 ffffffff     ................
  4193bc:	00ffffff 00000000 00000000 ffffffff     ................
  4193cc:	ffffffff 000000ff 00000000 ffff0000     ................
  4193dc:	ffffffff ffffffff 0000ffff 00000000     ................
	...
  4193fc:	ffff0000 ffffffff ffffffff ffffffff     ................
  41940c:	000000ff 00000000 00000000 ffffff00     ................
  41941c:	00000000 ffff0000 ffffffff ffffffff     ................
  41942c:	ffffffff ffffffff ffffffff ffffffff     ................
  41943c:	ffffffff 00000000 ffff0000 ffffffff     ................
  41944c:	ffffffff ffffffff ffffffff ffffffff     ................
  41945c:	ffffffff ffffffff 00000000 ffff0000     ................
  41946c:	ffffffff ffffffff ffffffff ffffffff     ................
  41947c:	ffffffff ffffffff ffffffff 00000000     ................
  41948c:	ffff0000 ffffffff ffffffff ffffffff     ................
  41949c:	ffffffff ffffffff ffffffff ffffffff     ................
  4194ac:	00000000 ffff0000 ffffffff ffffffff     ................
  4194bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4194cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4194dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4194ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4194fc:	ffffffff                                ....

00419500 <image_data_calibri_23_0x72>:
  419500:	ffffffff ffffffff ffffffff ffffffff     ................
  419510:	ffffffff ffffffff ffffffff ffffffff     ................
  419520:	ffffffff ffffffff ffffffff ffffffff     ................
  419530:	ffffffff ffffffff ffffffff ffffffff     ................
  419540:	ffffffff ffffffff ffffffff ffffffff     ................
  419550:	ffffffff ffffffff ffffffff ffffffff     ................
  419560:	ffffffff ffffffff ffffffff ffffffff     ................
  419570:	ffffffff ffffffff ffffffff ffffffff     ................
  419580:	ffffffff ffffffff ffffffff ffffffff     ................
  419590:	ffffffff ffffffff ffffffff ffffffff     ................
  4195a0:	ffffffff ffffffff ffffffff 0000ffff     ................
  4195b0:	00000000 00ffffff 00000000 00000000     ................
  4195c0:	ffffffff 0000ffff 00000000 00000000     ................
	...
  4195d8:	ffffffff 0000ffff 00000000 ff000000     ................
  4195e8:	ffffffff ffffffff ffffffff 0000ffff     ................
  4195f8:	00000000 ffffffff ffffffff ffffffff     ................
  419608:	ffffffff 0000ffff 00000000 ffffffff     ................
  419618:	ffffffff ffffffff ffffffff 0000ffff     ................
  419628:	00000000 ffffffff ffffffff ffffffff     ................
  419638:	ffffffff 0000ffff 00000000 ffffffff     ................
  419648:	ffffffff ffffffff ffffffff 0000ffff     ................
  419658:	00000000 ffffffff ffffffff ffffffff     ................
  419668:	ffffffff 0000ffff 00000000 ffffffff     ................
  419678:	ffffffff ffffffff ffffffff 0000ffff     ................
  419688:	00000000 ffffffff ffffffff ffffffff     ................
  419698:	ffffffff 0000ffff 00000000 ffffffff     ................
  4196a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4196b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4196c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4196d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4196e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4196f8:	ffffffff ffffffff ffffffff ffffffff     ................
  419708:	ffffffff ffffffff ffffffff ffffffff     ................
  419718:	ffffffff ffffffff ffffffff ffffffff     ................
  419728:	ffffffff ffffffff ffffffff ffffffff     ................
  419738:	ffffffff ffffffff                       ........

00419740 <image_data_calibri_23_0x73>:
  419740:	ffffffff ffffffff ffffffff ffffffff     ................
  419750:	ffffffff ffffffff ffffffff ffffffff     ................
  419760:	ffffffff ffffffff ffffffff ffffffff     ................
  419770:	ffffffff ffffffff ffffffff ffffffff     ................
  419780:	ffffffff ffffffff ffffffff ffffffff     ................
  419790:	ffffffff ffffffff ffffffff ffffffff     ................
  4197a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4197b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4197c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4197d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4197e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4197f0:	ffffffff ffffffff ffffffff ffffffff     ................
  419800:	ffffffff 0000ffff 00000000 00000000     ................
  419810:	ffff0000 ffffffff 00ffffff 00000000     ................
	...
  419830:	ffffffff 0000ffff 00000000 ffffffff     ................
  419840:	ffffffff ffffffff ff000000 ffffffff     ................
  419850:	000000ff ff000000 ffffffff ffffffff     ................
  419860:	ffffffff ffffffff ffffffff 00000000     ................
	...
  419878:	ffffffff ffffffff ffffffff ffffffff     ................
  419888:	ffffffff 000000ff 00000000 00000000     ................
  419898:	ffffff00 ffffffff ffffffff ffffffff     ................
  4198a8:	ffffffff 0000ffff 00000000 ff000000     ................
  4198b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4198c8:	ffffffff 00000000 ffff0000 ffffffff     ................
  4198d8:	ff000000 ffffffff ffffffff 00ffffff     ................
  4198e8:	00000000 ffffff00 00ffffff 00000000     ................
	...
  419908:	ffffffff ffffffff 000000ff 00000000     ................
  419918:	00000000 ffffff00 ffffffff ffffffff     ................
  419928:	ffffffff ffffffff ffffffff ffffffff     ................
  419938:	ffffffff ffffffff ffffffff ffffffff     ................
  419948:	ffffffff ffffffff ffffffff ffffffff     ................
  419958:	ffffffff ffffffff ffffffff ffffffff     ................
  419968:	ffffffff ffffffff ffffffff ffffffff     ................
  419978:	ffffffff ffffffff ffffffff ffffffff     ................
  419988:	ffffffff ffffffff ffffffff ffffffff     ................
  419998:	ffffffff ffffffff ffffffff ffffffff     ................
  4199a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4199b8:	ffffffff ffffffff ffffffff ffffffff     ................

004199c8 <image_data_calibri_23_0x74>:
  4199c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4199d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4199e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4199f8:	ffffffff ffffffff ffffffff ffffffff     ................
  419a08:	ffffffff ffffffff ffffffff ffffffff     ................
  419a18:	ffffffff ffffffff ffffffff ffffffff     ................
  419a28:	ffffffff 0000ffff 00000000 ffffffff     ................
  419a38:	ffffffff ffffffff ffffffff 0000ffff     ................
  419a48:	00000000 ffffffff ffffffff ffffffff     ................
  419a58:	ffffffff 0000ffff 00000000 ffffffff     ................
  419a68:	ffffffff ffffffff 00000000 00000000     ................
	...
  419a84:	ffffff00 00000000 00000000 00000000     ................
	...
  419a9c:	ffffff00 ffffffff 0000ffff 00000000     ................
  419aac:	ffffffff ffffffff ffffffff ffffffff     ................
  419abc:	0000ffff 00000000 ffffffff ffffffff     ................
  419acc:	ffffffff ffffffff 0000ffff 00000000     ................
  419adc:	ffffffff ffffffff ffffffff ffffffff     ................
  419aec:	0000ffff 00000000 ffffffff ffffffff     ................
  419afc:	ffffffff ffffffff 0000ffff 00000000     ................
  419b0c:	ffffffff ffffffff ffffffff ffffffff     ................
  419b1c:	0000ffff 00000000 ffffffff ffffffff     ................
  419b2c:	ffffffff ffffffff 0000ffff 00000000     ................
  419b3c:	ffffffff ffffffff ffffffff ffffffff     ................
  419b4c:	0000ffff 00000000 00000000 00000000     ................
  419b5c:	ffffff00 ffffffff ffffffff 000000ff     ................
	...
  419b74:	ffffff00 ffffffff ffffffff ffffffff     ................
  419b84:	ffffffff ffffffff ffffffff ffffffff     ................
  419b94:	ffffffff ffffffff ffffffff ffffffff     ................
  419ba4:	ffffffff ffffffff ffffffff ffffffff     ................
  419bb4:	ffffffff ffffffff ffffffff ffffffff     ................
  419bc4:	ffffffff ffffffff ffffffff ffffffff     ................
  419bd4:	ffffffff ffffffff ffffffff ffffffff     ................
  419be4:	ffffffff ffffffff ffffffff ffffffff     ................
  419bf4:	ffffffff ffffffff ffffffff ffffffff     ................
  419c04:	ffffffff                                ....

00419c08 <image_data_calibri_23_0x75>:
  419c08:	ffffffff ffffffff ffffffff ffffffff     ................
  419c18:	ffffffff ffffffff ffffffff ffffffff     ................
  419c28:	ffffffff ffffffff ffffffff ffffffff     ................
  419c38:	ffffffff ffffffff ffffffff ffffffff     ................
  419c48:	ffffffff ffffffff ffffffff ffffffff     ................
  419c58:	ffffffff ffffffff ffffffff ffffffff     ................
  419c68:	ffffffff ffffffff ffffffff ffffffff     ................
  419c78:	ffffffff ffffffff ffffffff ffffffff     ................
  419c88:	ffffffff ffffffff ffffffff ffffffff     ................
  419c98:	ffffffff ffffffff ffffffff ffffffff     ................
  419ca8:	ffffffff ffffffff ffffffff ffffffff     ................
  419cb8:	ffffffff ffffffff ffffffff ffffffff     ................
  419cc8:	ffffffff ffffffff ffffffff ffffffff     ................
  419cd8:	ffffffff ffffffff ffffffff ffffffff     ................
  419ce8:	ffffffff ffffffff ffffffff ffffffff     ................
  419cf8:	ffffffff ffffffff ffffffff ffffffff     ................
  419d08:	0000ffff 00000000 ffffffff ffffffff     ................
  419d18:	ffffffff 00ffffff 00000000 ffffff00     ................
  419d28:	ffffffff 0000ffff 00000000 ffffffff     ................
  419d38:	ffffffff ffffffff 00ffffff 00000000     ................
  419d48:	ffffff00 ffffffff 0000ffff 00000000     ................
  419d58:	ffffffff ffffffff ffffffff 00ffffff     ................
  419d68:	00000000 ffffff00 ffffffff 0000ffff     ................
  419d78:	00000000 ffffffff ffffffff ffffffff     ................
  419d88:	00ffffff 00000000 ffffff00 ffffffff     ................
  419d98:	0000ffff 00000000 ffffffff ffffffff     ................
  419da8:	ffffffff 00ffffff 00000000 ffffff00     ................
  419db8:	ffffffff 0000ffff 00000000 ffffffff     ................
  419dc8:	ffffffff ffffffff 00ffffff 00000000     ................
  419dd8:	ffffff00 ffffffff 0000ffff 00000000     ................
  419de8:	ffffffff ffffffff ffffffff 00ffffff     ................
  419df8:	00000000 ffffff00 ffffffff 0000ffff     ................
  419e08:	00000000 ffffffff ffffffff ffffffff     ................
  419e18:	00ffffff 00000000 ffffff00 ffffffff     ................
  419e28:	0000ffff 00000000 ff000000 ffffffff     ................
  419e38:	ffffffff 00000000 00000000 ffffff00     ................
  419e48:	ffffffff ffffffff 000000ff 00000000     ................
	...
  419e68:	ffffff00 ffffffff ffffffff ffffffff     ................
	...
  419e84:	00ffffff 00000000 ffffff00 ffffffff     ................
  419e94:	ffffffff ffffffff ffffffff ffffffff     ................
  419ea4:	ffffffff ffffffff ffffffff ffffffff     ................
  419eb4:	ffffffff ffffffff ffffffff ffffffff     ................
  419ec4:	ffffffff ffffffff ffffffff ffffffff     ................
  419ed4:	ffffffff ffffffff ffffffff ffffffff     ................
  419ee4:	ffffffff ffffffff ffffffff ffffffff     ................
  419ef4:	ffffffff ffffffff ffffffff ffffffff     ................
  419f04:	ffffffff ffffffff ffffffff ffffffff     ................
  419f14:	ffffffff ffffffff ffffffff ffffffff     ................
  419f24:	ffffffff ffffffff ffffffff ffffffff     ................
  419f34:	ffffffff ffffffff ffffffff ffffffff     ................
  419f44:	ffffffff ffffffff ffffffff ffffffff     ................
  419f54:	ffffffff ffffffff ffffffff ffffffff     ................
  419f64:	ffffffff                                ....

00419f68 <image_data_calibri_23_0x76>:
  419f68:	ffffffff ffffffff ffffffff ffffffff     ................
  419f78:	ffffffff ffffffff ffffffff ffffffff     ................
  419f88:	ffffffff ffffffff ffffffff ffffffff     ................
  419f98:	ffffffff ffffffff ffffffff ffffffff     ................
  419fa8:	ffffffff ffffffff ffffffff ffffffff     ................
  419fb8:	ffffffff ffffffff ffffffff ffffffff     ................
  419fc8:	ffffffff ffffffff ffffffff ffffffff     ................
  419fd8:	ffffffff ffffffff ffffffff ffffffff     ................
  419fe8:	ffffffff ffffffff ffffffff ffffffff     ................
  419ff8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a008:	ffffffff ffffffff ffffffff ffffffff     ................
  41a018:	ffffffff ffffffff ffffffff ffffffff     ................
  41a028:	ffffffff ffffffff ffffffff ffffffff     ................
  41a038:	0000ffff 00000000 ffffffff ffffffff     ................
  41a048:	ffffffff ffffffff 0000ffff 00000000     ................
  41a058:	00000000 ffff0000 ffffffff ffffffff     ................
  41a068:	ffffffff 000000ff ff000000 ffffffff     ................
  41a078:	000000ff ff000000 ffffffff ffffffff     ................
  41a088:	00ffffff 00000000 ffffff00 00ffffff     ................
  41a098:	00000000 ffffff00 ffffffff ffffffff     ................
  41a0a8:	000000ff ff000000 ffffffff ffffffff     ................
  41a0b8:	ff000000 ffffffff ffffffff 00000000     ................
  41a0c8:	ffff0000 ffffffff ffffffff 0000ffff     ................
  41a0d8:	00000000 ffffffff 0000ffff 00000000     ................
  41a0e8:	ffffffff ffffffff ffffffff 00000000     ................
  41a0f8:	ffff0000 ffffffff 00000000 ffff0000     ................
  41a108:	ffffffff ffffffff ffffffff 000000ff     ................
	...
  41a120:	ffffff00 ffffffff ffffffff ffffffff     ................
  41a130:	00ffffff 00000000 00000000 ff000000     ................
  41a140:	ffffffff ffffffff ffffffff ffffffff     ................
  41a150:	000000ff 00000000 00000000 ffffff00     ................
  41a160:	ffffffff ffffffff ffffffff ffffffff     ................
  41a170:	0000ffff 00000000 ffffffff ffffffff     ................
  41a180:	ffffffff ffffffff ffffffff ffffffff     ................
  41a190:	ffffffff ffffffff ffffffff ffffffff     ................
  41a1a0:	ffffffff ffffffff ffffffff ffffffff     ................
  41a1b0:	ffffffff ffffffff ffffffff ffffffff     ................
  41a1c0:	ffffffff ffffffff ffffffff ffffffff     ................
  41a1d0:	ffffffff ffffffff ffffffff ffffffff     ................
  41a1e0:	ffffffff ffffffff ffffffff ffffffff     ................
  41a1f0:	ffffffff ffffffff ffffffff ffffffff     ................
  41a200:	ffffffff ffffffff ffffffff ffffffff     ................
  41a210:	ffffffff ffffffff ffffffff ffffffff     ................
  41a220:	ffffffff ffffffff ffffffff ffffffff     ................
  41a230:	ffffffff ffffffff                       ........

0041a238 <image_data_calibri_23_0x77>:
  41a238:	ffffffff ffffffff ffffffff ffffffff     ................
  41a248:	ffffffff ffffffff ffffffff ffffffff     ................
  41a258:	ffffffff ffffffff ffffffff ffffffff     ................
  41a268:	ffffffff ffffffff ffffffff ffffffff     ................
  41a278:	ffffffff ffffffff ffffffff ffffffff     ................
  41a288:	ffffffff ffffffff ffffffff ffffffff     ................
  41a298:	ffffffff ffffffff ffffffff ffffffff     ................
  41a2a8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a2b8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a2c8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a2d8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a2e8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a2f8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a308:	ffffffff ffffffff ffffffff ffffffff     ................
  41a318:	ffffffff ffffffff ffffffff ffffffff     ................
  41a328:	ffffffff ffffffff ffffffff ffffffff     ................
  41a338:	ffffffff ffffffff ffffffff ffffffff     ................
  41a348:	ffffffff ffffffff ffffffff ffffffff     ................
  41a358:	ffffffff ffffffff ffffffff ffffffff     ................
  41a368:	ffffffff ffffffff ffffffff ffffffff     ................
  41a378:	ffffffff ffffffff ffffffff ffffffff     ................
  41a388:	00000000 ffff0000 ffffffff ffffffff     ................
  41a398:	ffffffff 000000ff ff000000 ffffffff     ................
  41a3a8:	ffffffff ffffffff 0000ffff 00000000     ................
  41a3b8:	00ffffff 00000000 ffffff00 ffffffff     ................
  41a3c8:	ffffffff 000000ff ff000000 ffffffff     ................
  41a3d8:	ffffffff ffffffff 0000ffff ffffff00     ................
  41a3e8:	00ffffff 00000000 ffffff00 ffffffff     ................
  41a3f8:	ffffffff 000000ff 00000000 ffff0000     ................
  41a408:	ffffffff 00ffffff 00000000 ffffff00     ................
  41a418:	00ffffff 00000000 ffffff00 ffffffff     ................
  41a428:	0000ffff 00000000 00000000 ffff0000     ................
  41a438:	ffffffff 00ffffff 00000000 ffffff00     ................
  41a448:	ffffffff 0000ffff 00000000 ffffffff     ................
  41a458:	0000ffff 00000000 00000000 ffff0000     ................
  41a468:	ffffffff 00ffffff ffff0000 ffffffff     ................
  41a478:	ffffffff 0000ffff 00000000 ffffffff     ................
  41a488:	0000ffff ffffff00 00ffffff ffff0000     ................
  41a498:	ffffffff 00000000 ffff0000 ffffffff     ................
  41a4a8:	ffffffff 0000ffff 00000000 ffffffff     ................
  41a4b8:	0000ffff ffffff00 00ffffff 00000000     ................
  41a4c8:	ffffff00 00000000 ffff0000 ffffffff     ................
  41a4d8:	ffffffff ffffffff 000000ff 00ffffff     ................
  41a4e8:	00000000 ffffff00 00ffffff 00000000     ................
  41a4f8:	ffffff00 00000000 ffff0000 ffffffff     ................
  41a508:	ffffffff ffffffff 000000ff 00000000     ................
  41a518:	00000000 ffffff00 ffffffff 0000ffff     ................
  41a528:	ffffff00 ff000000 ffffffff ffffffff     ................
  41a538:	ffffffff ffffffff 000000ff 00000000     ................
  41a548:	ffff0000 ffffffff ffffffff 0000ffff     ................
  41a558:	00000000 ff000000 ffffffff ffffffff     ................
  41a568:	ffffffff ffffffff 000000ff 00000000     ................
  41a578:	ffff0000 ffffffff ffffffff 0000ffff     ................
  41a588:	00000000 ff000000 ffffffff ffffffff     ................
  41a598:	ffffffff ffffffff ffffffff ffffffff     ................
  41a5a8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a5b8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a5c8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a5d8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a5e8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a5f8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a608:	ffffffff ffffffff ffffffff ffffffff     ................
  41a618:	ffffffff ffffffff ffffffff ffffffff     ................
  41a628:	ffffffff ffffffff ffffffff ffffffff     ................
  41a638:	ffffffff ffffffff ffffffff ffffffff     ................
  41a648:	ffffffff ffffffff ffffffff ffffffff     ................
  41a658:	ffffffff ffffffff ffffffff ffffffff     ................
  41a668:	ffffffff ffffffff ffffffff ffffffff     ................
  41a678:	ffffffff ffffffff ffffffff ffffffff     ................
  41a688:	ffffffff ffffffff ffffffff ffffffff     ................
  41a698:	ffffffff ffffffff ffffffff ffffffff     ................
  41a6a8:	ffffffff ffffffff ffffffff ffffffff     ................

0041a6b8 <image_data_calibri_23_0x78>:
  41a6b8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a6c8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a6d8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a6e8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a6f8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a708:	ffffffff ffffffff ffffffff ffffffff     ................
  41a718:	ffffffff ffffffff ffffffff ffffffff     ................
  41a728:	ffffffff ffffffff ffffffff ffffffff     ................
  41a738:	ffffffff ffffffff ffffffff ffffffff     ................
  41a748:	ffffffff ffffffff ffffffff ffffffff     ................
  41a758:	ffffffff ffffffff ffffffff ffffffff     ................
  41a768:	ffffffff ffffffff ffffffff ffffffff     ................
  41a778:	ffffffff ffffffff ffffffff ffffffff     ................
  41a788:	ffffffff 000000ff ff000000 ffffffff     ................
  41a798:	ffffffff 00ffffff 00000000 ffffff00     ................
  41a7a8:	00ffffff 00000000 00000000 ffffffff     ................
  41a7b8:	ffffffff 000000ff ff000000 ffffffff     ................
  41a7c8:	ffffffff 00000000 ffff0000 ffffffff     ................
  41a7d8:	00000000 ffff0000 ffffffff ffffffff     ................
  41a7e8:	ffffffff 000000ff ff000000 0000ffff     ................
  41a7f8:	ffffff00 ffffffff ffffffff ffffffff     ................
  41a808:	00ffffff 00000000 00000000 ff000000     ................
  41a818:	ffffffff ffffffff ffffffff ffffffff     ................
  41a828:	ffffffff 00000000 ffff0000 ffffffff     ................
  41a838:	ffffffff ffffffff ffffffff 00ffffff     ................
	...
  41a850:	ff000000 ffffffff ffffffff ffffffff     ................
  41a860:	ffffffff 000000ff ffffffff 0000ffff     ................
  41a870:	00000000 ffffffff ffffffff ffffffff     ................
  41a880:	00000000 ffff0000 ffffffff 00000000     ................
  41a890:	ffff0000 ffffffff 00ffffff 00000000     ................
  41a8a0:	ffffff00 ffffffff ffffffff 000000ff     ................
  41a8b0:	ff000000 ffffffff 000000ff ff000000     ................
  41a8c0:	ffffffff ffffffff 00ffffff 00000000     ................
  41a8d0:	00000000 ffffffff ffffffff ffffffff     ................
  41a8e0:	ffffffff ffffffff ffffffff ffffffff     ................
  41a8f0:	ffffffff ffffffff ffffffff ffffffff     ................
  41a900:	ffffffff ffffffff ffffffff ffffffff     ................
  41a910:	ffffffff ffffffff ffffffff ffffffff     ................
  41a920:	ffffffff ffffffff ffffffff ffffffff     ................
  41a930:	ffffffff ffffffff ffffffff ffffffff     ................
  41a940:	ffffffff ffffffff ffffffff ffffffff     ................
  41a950:	ffffffff ffffffff ffffffff ffffffff     ................
  41a960:	ffffffff ffffffff ffffffff ffffffff     ................
  41a970:	ffffffff ffffffff ffffffff ffffffff     ................
  41a980:	ffffffff ffffffff                       ........

0041a988 <image_data_calibri_23_0x79>:
  41a988:	ffffffff ffffffff ffffffff ffffffff     ................
  41a998:	ffffffff ffffffff ffffffff ffffffff     ................
  41a9a8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a9b8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a9c8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a9d8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a9e8:	ffffffff ffffffff ffffffff ffffffff     ................
  41a9f8:	ffffffff ffffffff ffffffff ffffffff     ................
  41aa08:	ffffffff ffffffff ffffffff ffffffff     ................
  41aa18:	ffffffff ffffffff ffffffff ffffffff     ................
  41aa28:	ffffffff ffffffff ffffffff ffffffff     ................
  41aa38:	ffffffff ffffffff ffffffff ffffffff     ................
  41aa48:	ffffffff ffffffff ffffffff ffffffff     ................
  41aa58:	0000ffff 00000000 ffffffff ffffffff     ................
  41aa68:	ffffffff ffffffff 0000ffff 00000000     ................
  41aa78:	00ffffff 00000000 ffffff00 ffffffff     ................
  41aa88:	ffffffff ffffffff 00000000 ffff0000     ................
  41aa98:	000000ff ff000000 ffffffff ffffffff     ................
  41aaa8:	00ffffff 00000000 ffffff00 00ffffff     ................
  41aab8:	00000000 ffffff00 ffffffff ffffffff     ................
  41aac8:	000000ff ff000000 ffffffff ffffffff     ................
  41aad8:	00000000 ffff0000 ffffffff 00ffffff     ................
  41aae8:	00000000 ffffff00 ffffffff 0000ffff     ................
  41aaf8:	00000000 ffffffff 0000ffff 00000000     ................
  41ab08:	ffffffff ffffffff ffffffff 00ffffff     ................
  41ab18:	00000000 ffffff00 00000000 ffff0000     ................
  41ab28:	ffffffff ffffffff ffffffff 000000ff     ................
  41ab38:	ff000000 0000ffff 00000000 ffffffff     ................
  41ab48:	ffffffff ffffffff 00ffffff 00000000     ................
  41ab58:	00000000 ff000000 ffffffff ffffffff     ................
  41ab68:	ffffffff ffffffff ffffffff 00000000     ................
  41ab78:	00000000 ffffff00 ffffffff ffffffff     ................
  41ab88:	ffffffff ffffffff 0000ffff 00000000     ................
  41ab98:	ff000000 ffffffff ffffffff ffffffff     ................
  41aba8:	ffffffff ffffffff 00000000 ffff0000     ................
  41abb8:	ffffffff ffffffff ffffffff ffffffff     ................
  41abc8:	ffffffff 0000ffff 00000000 ffffffff     ................
  41abd8:	ffffffff ffffffff ffffffff ffffffff     ................
  41abe8:	000000ff ff000000 ffffffff ffffffff     ................
  41abf8:	ffffffff ffffffff ffffffff 00ffffff     ................
  41ac08:	00000000 ffffff00 ffffffff ffffffff     ................
  41ac18:	ffffffff ffffffff ffffffff ffffffff     ................
  41ac28:	ffffffff ffffffff ffffffff ffffffff     ................
  41ac38:	ffffffff ffffffff ffffffff ffffffff     ................
  41ac48:	ffffffff ffffffff ffffffff ffffffff     ................

0041ac58 <image_data_calibri_23_0x7a>:
  41ac58:	ffffffff ffffffff ffffffff ffffffff     ................
  41ac68:	ffffffff ffffffff ffffffff ffffffff     ................
  41ac78:	ffffffff ffffffff ffffffff ffffffff     ................
  41ac88:	ffffffff ffffffff ffffffff ffffffff     ................
  41ac98:	ffffffff ffffffff ffffffff ffffffff     ................
  41aca8:	ffffffff ffffffff ffffffff ffffffff     ................
  41acb8:	ffffffff ffffffff ffffffff ffffffff     ................
  41acc8:	ffffffff ffffffff ffffffff ffffffff     ................
  41acd8:	ffffffff ffffffff ffffffff ffffffff     ................
  41ace8:	ffffffff ffffffff ffffffff ffffffff     ................
  41acf8:	ffffffff ffffffff ffffffff ffffffff     ................
  41ad08:	ffffffff ffffffff ffffffff ffffffff     ................
	...
  41ad2c:	ffffff00 00ffffff 00000000 00000000     ................
	...
  41ad48:	ffffffff ffffffff ffffffff ffffffff     ................
  41ad58:	0000ffff 00000000 ffffffff ffffffff     ................
  41ad68:	ffffffff ffffffff ffffffff 000000ff     ................
  41ad78:	ff000000 ffffffff ffffffff ffffffff     ................
  41ad88:	ffffffff 000000ff ff000000 ffffffff     ................
  41ad98:	ffffffff ffffffff ffffffff 000000ff     ................
  41ada8:	ff000000 ffffffff ffffffff ffffffff     ................
  41adb8:	ffffffff ffffffff 00000000 ffff0000     ................
  41adc8:	ffffffff ffffffff ffffffff ffffffff     ................
  41add8:	00000000 ffff0000 ffffffff ffffffff     ................
  41ade8:	ffffffff ffffffff 00000000 ffff0000     ................
  41adf8:	ffffffff ffffffff ffffffff ffffffff     ................
  41ae08:	00ffffff 00000000 00000000 00000000     ................
	...
  41ae20:	ffffffff 0000ffff 00000000 00000000     ................
	...
  41ae38:	ff000000 ffffffff ffffffff ffffffff     ................
  41ae48:	ffffffff ffffffff ffffffff ffffffff     ................
  41ae58:	ffffffff ffffffff ffffffff ffffffff     ................
  41ae68:	ffffffff ffffffff ffffffff ffffffff     ................
  41ae78:	ffffffff ffffffff ffffffff ffffffff     ................
  41ae88:	ffffffff ffffffff ffffffff ffffffff     ................
  41ae98:	ffffffff ffffffff ffffffff ffffffff     ................
  41aea8:	ffffffff ffffffff ffffffff ffffffff     ................
  41aeb8:	ffffffff ffffffff ffffffff ffffffff     ................
  41aec8:	ffffffff ffffffff ffffffff ffffffff     ................
  41aed8:	ffffffff ffffffff                       ........

0041aee0 <image_data_calibri_23_0x7b>:
  41aee0:	ffffffff ffffffff ffffffff ffffffff     ................
  41aef0:	ffffffff ffffffff ffffffff ffffffff     ................
  41af00:	ffffffff ffffffff ffffffff ffffffff     ................
  41af10:	ffffffff 0000ffff 00000000 ffffffff     ................
  41af20:	ffffffff ffffffff 00000000 00000000     ................
  41af30:	ffffff00 ffffffff ffffffff 000000ff     ................
  41af40:	ff000000 ffffffff ffffffff ffffffff     ................
  41af50:	0000ffff 00000000 ffffffff ffffffff     ................
  41af60:	ffffffff 00ffffff 00000000 ffffff00     ................
  41af70:	ffffffff ffffffff ffffffff 00000000     ................
  41af80:	ffff0000 ffffffff ffffffff ffffffff     ................
  41af90:	000000ff ff000000 ffffffff ffffffff     ................
  41afa0:	00ffffff 00000000 ffffff00 ffffffff     ................
  41afb0:	ffffffff 000000ff 00000000 ffff0000     ................
  41afc0:	ffffffff ffffffff 0000ffff 00000000     ................
  41afd0:	ff000000 ffffffff ffffffff ffffffff     ................
  41afe0:	0000ffff 00000000 ffffffff ffffffff     ................
  41aff0:	ffffffff ffffffff 0000ffff 00000000     ................
  41b000:	ffffffff ffffffff ffffffff 00ffffff     ................
  41b010:	00000000 ffffff00 ffffffff ffffffff     ................
  41b020:	ffffffff 00000000 ffff0000 ffffffff     ................
  41b030:	ffffffff ffffffff 000000ff ff000000     ................
  41b040:	ffffffff ffffffff ffffffff 0000ffff     ................
  41b050:	00000000 ffffffff ffffffff ffffffff     ................
  41b060:	00ffffff 00000000 ffffff00 ffffffff     ................
  41b070:	ffffffff ffffffff 00000000 ffff0000     ................
  41b080:	ffffffff ffffffff ffffffff 000000ff     ................
  41b090:	00000000 ffff0000 ffffffff ffffffff     ................
  41b0a0:	ffffffff 000000ff ff000000 ffffffff     ................
  41b0b0:	ffffffff ffffffff ffffffff ffffffff     ................
  41b0c0:	ffffffff ffffffff ffffffff ffffffff     ................
  41b0d0:	ffffffff ffffffff                       ........

0041b0d8 <image_data_calibri_23_0x7c>:
  41b0d8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b0e8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b0f8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b108:	ffffffff ffffffff ffffffff ffffffff     ................
  41b118:	ffffffff ffffffff ffffffff 0000ffff     ................
  41b128:	00000000 ffffffff ffffffff ffffffff     ................
  41b138:	ffffffff ffffffff ffffffff 00ffffff     ................
  41b148:	00000000 ffffff00 ffffffff ffffffff     ................
  41b158:	ffffffff ffffffff ffffffff ffffffff     ................
  41b168:	00000000 ffff0000 ffffffff ffffffff     ................
  41b178:	ffffffff ffffffff ffffffff ffffffff     ................
  41b188:	000000ff ff000000 ffffffff ffffffff     ................
  41b198:	ffffffff ffffffff ffffffff ffffffff     ................
  41b1a8:	0000ffff 00000000 ffffffff ffffffff     ................
  41b1b8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b1c8:	00ffffff 00000000 ffffff00 ffffffff     ................
  41b1d8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b1e8:	ffffffff 00000000 ffff0000 ffffffff     ................
  41b1f8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b208:	ffffffff 000000ff ff000000 ffffffff     ................
  41b218:	ffffffff ffffffff ffffffff ffffffff     ................
  41b228:	ffffffff 0000ffff 00000000 ffffffff     ................
  41b238:	ffffffff ffffffff ffffffff ffffffff     ................
  41b248:	ffffffff 00ffffff 00000000 ffffff00     ................
  41b258:	ffffffff ffffffff ffffffff ffffffff     ................
  41b268:	ffffffff ffffffff 00000000 ffff0000     ................
  41b278:	ffffffff ffffffff ffffffff ffffffff     ................
  41b288:	ffffffff ffffffff 000000ff ff000000     ................
  41b298:	ffffffff ffffffff ffffffff ffffffff     ................
  41b2a8:	ffffffff ffffffff 0000ffff 00000000     ................
  41b2b8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b2c8:	ffffffff ffffffff 00ffffff 00000000     ................
  41b2d8:	ffffff00 ffffffff ffffffff ffffffff     ................
  41b2e8:	ffffffff ffffffff ffffffff 00000000     ................
  41b2f8:	ffff0000 ffffffff ffffffff ffffffff     ................
  41b308:	ffffffff ffffffff ffffffff 000000ff     ................
  41b318:	ff000000 ffffffff ffffffff ffffffff     ................
  41b328:	ffffffff ffffffff ffffffff 0000ffff     ................
  41b338:	00000000 ffffffff ffffffff ffffffff     ................
  41b348:	ffffffff ffffffff ffffffff 00ffffff     ................
  41b358:	00000000 ffffff00 ffffffff ffffffff     ................
  41b368:	ffffffff ffffffff ffffffff ffffffff     ................
  41b378:	00000000 ffff0000 ffffffff ffffffff     ................
  41b388:	ffffffff ffffffff ffffffff ffffffff     ................
  41b398:	000000ff ff000000 ffffffff ffffffff     ................
  41b3a8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b3b8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b3c8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b3d8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b3e8:	ffffffff ffffffff                       ........

0041b3f0 <image_data_calibri_23_0x7d>:
  41b3f0:	ffffffff ffffffff ffffffff ffffffff     ................
  41b400:	ffffffff ffffffff ffffffff ffffffff     ................
  41b410:	ffffffff ffffffff ffffffff 000000ff     ................
  41b420:	00000000 ffff0000 ffffffff ffffffff     ................
  41b430:	0000ffff 00000000 00000000 ffff0000     ................
  41b440:	ffffffff ffffffff ffffffff 000000ff     ................
  41b450:	ff000000 ffffffff ffffffff ffffffff     ................
  41b460:	0000ffff 00000000 ffffffff ffffffff     ................
  41b470:	ffffffff 00ffffff 00000000 ffffff00     ................
  41b480:	ffffffff ffffffff ffffffff 00000000     ................
  41b490:	ffff0000 ffffffff ffffffff ffffffff     ................
  41b4a0:	000000ff ff000000 ffffffff ffffffff     ................
  41b4b0:	ffffffff 0000ffff 00000000 ffffffff     ................
  41b4c0:	ffffffff ffffffff ffffffff 0000ffff     ................
  41b4d0:	00000000 ff000000 ffffffff ffffffff     ................
  41b4e0:	00ffffff 00000000 00000000 ffffffff     ................
  41b4f0:	ffffffff ffffffff 00000000 ffff0000     ................
  41b500:	ffffffff ffffffff 0000ffff 00000000     ................
  41b510:	ffffffff ffffffff ffffffff 00ffffff     ................
  41b520:	00000000 ffffff00 ffffffff ffffffff     ................
  41b530:	ffffffff 00000000 ffff0000 ffffffff     ................
  41b540:	ffffffff ffffffff 000000ff ff000000     ................
  41b550:	ffffffff ffffffff ffffffff 0000ffff     ................
  41b560:	00000000 ffffffff ffffffff ffffffff     ................
  41b570:	00ffffff 00000000 ffffff00 ffffffff     ................
  41b580:	ffffffff ffffffff 00000000 ffff0000     ................
  41b590:	ffffffff 00ffffff 00000000 00000000     ................
  41b5a0:	ff000000 ffffffff ffffffff 00000000     ................
  41b5b0:	00000000 ffffff00 ffffffff ffffffff     ................
  41b5c0:	ffffffff ffffffff ffffffff ffffffff     ................
  41b5d0:	ffffffff ffffffff ffffffff ffffffff     ................
  41b5e0:	ffffffff ffffffff                       ........

0041b5e8 <image_data_calibri_23_0x7e>:
  41b5e8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b5f8:	ffffffff ffffffff ffffffff ffffffff     ................
  41b608:	ffffffff ffffffff ffffffff ffffffff     ................
  41b618:	ffffffff ffffffff ffffffff ffffffff     ................
  41b628:	ffffffff ffffffff ffffffff ffffffff     ................
  41b638:	ffffffff ffffffff ffffffff ffffffff     ................
  41b648:	ffffffff ffffffff ffffffff ffffffff     ................
  41b658:	ffffffff ffffffff ffffffff ffffffff     ................
  41b668:	ffffffff ffffffff 0000ffff 00000000     ................
  41b678:	00000000 ffff0000 ffffffff ffffffff     ................
  41b688:	0000ffff ffffff00 00ffffff 00000000     ................
	...
  41b6a0:	ffff0000 ffffffff 00ffffff ffff0000     ................
  41b6b0:	000000ff ffffffff ffffffff 000000ff     ................
  41b6c0:	ff000000 ffffffff ffffffff ff000000     ................
  41b6d0:	0000ffff ffffff00 ffffffff 0000ffff     ................
	...
  41b6ec:	ffffff00 00ffffff ffff0000 ffffffff     ................
  41b6fc:	ffffffff 0000ffff 00000000 ff000000     ................
  41b70c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b71c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b72c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b73c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b74c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b75c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b76c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b77c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b78c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b79c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b7ac:	ffffffff ffffffff ffffffff ffffffff     ................
  41b7bc:	ffffffff ffffffff ffffffff ffffffff     ................
  41b7cc:	ffffffff ffffffff ffffffff ffffffff     ................
  41b7dc:	ffffffff ffffffff ffffffff ffffffff     ................
  41b7ec:	ffffffff ffffffff ffffffff ffffffff     ................
  41b7fc:	ffffffff ffffffff ffffffff ffffffff     ................
  41b80c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b81c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b82c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b83c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b84c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b85c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b86c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b87c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b88c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b89c:	ffffffff ffffffff ffffffff ffffffff     ................
  41b8ac:	ffffffff ffffffff ffffffff ffffffff     ................
  41b8bc:	ffffffff ffffffff ffffffff ffffffff     ................
  41b8cc:	ffffffff ffffffff ffffffff ffffffff     ................
  41b8dc:	ffffffff ffffffff ffffffff ffffffff     ................
  41b8ec:	ffffffff ffffffff ffffffff ffffffff     ................
  41b8fc:	ffffffff 0074786d 6c696146 74206465     ....mxt.Failed t
  41b90c:	7263206f 65746165 73657420 656c2074     o create test le
  41b91c:	61742064 0a0d6b73 00000000 0064636c     d task......lcd.
  41b92c:	00002a2a 002a2a2a 2a2a2a2a 00000000     **..***.****....
  41b93c:	63617473 766f206b 6c667265 2520776f     stack overflow %
  41b94c:	73252078 00000a0d                       x %s....

0041b954 <_global_impure_ptr>:
  41b954:	204001b8 33323130 37363534 42413938     ..@ 0123456789AB
  41b964:	46454443 00000000 33323130 37363534     CDEF....01234567
  41b974:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  41b984:	0000296c                                l)..

0041b988 <blanks.7217>:
  41b988:	20202020 20202020 20202020 20202020                     

0041b998 <zeroes.7218>:
  41b998:	30303030 30303030 30303030 30303030     0000000000000000
  41b9a8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0041b9b8 <_ctype_>:
  41b9b8:	20202000 20202020 28282020 20282828     .         ((((( 
  41b9c8:	20202020 20202020 20202020 20202020                     
  41b9d8:	10108820 10101010 10101010 10101010      ...............
  41b9e8:	04040410 04040404 10040404 10101010     ................
  41b9f8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  41ba08:	01010101 01010101 01010101 10101010     ................
  41ba18:	42421010 42424242 02020202 02020202     ..BBBBBB........
  41ba28:	02020202 02020202 02020202 10101010     ................
  41ba38:	00000020 00000000 00000000 00000000      ...............
	...

0041babc <_init>:
  41babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41babe:	bf00      	nop
  41bac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41bac2:	bc08      	pop	{r3}
  41bac4:	469e      	mov	lr, r3
  41bac6:	4770      	bx	lr

0041bac8 <__init_array_start>:
  41bac8:	00407639 	.word	0x00407639

0041bacc <__frame_dummy_init_array_entry>:
  41bacc:	0040018d                                ..@.

0041bad0 <_fini>:
  41bad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41bad2:	bf00      	nop
  41bad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41bad6:	bc08      	pop	{r3}
  41bad8:	469e      	mov	lr, r3
  41bada:	4770      	bx	lr

0041badc <__fini_array_start>:
  41badc:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <but0>:
20400014:	0064 0000 0064 0000 a9a9 00a9 8080 0080     d...d...........
20400024:	009c 0000 016a 0000 0000 0000 0000 0000     ....j...........

20400034 <but1>:
20400034:	0064 0000 0064 0000 a9a9 00a9 8080 0080     d...d...........
20400044:	0035 0000 0035 0000 0000 0000 0001 0000     5...5...........

20400054 <but2>:
20400054:	0064 0000 0064 0000 a9a9 00a9 8080 0080     d...d...........
20400064:	009c 0000 0035 0000 0000 0000 0002 0000     ....5...........

20400074 <but3>:
20400074:	0064 0000 0064 0000 a9a9 00a9 8080 0080     d...d...........
20400084:	0103 0000 0035 0000 0000 0000 0003 0000     ....5...........

20400094 <but4>:
20400094:	0064 0000 0064 0000 a9a9 00a9 8080 0080     d...d...........
204000a4:	0035 0000 009c 0000 0000 0000 0004 0000     5...............

204000b4 <but5>:
204000b4:	0064 0000 0064 0000 a9a9 00a9 8080 0080     d...d...........
204000c4:	009c 0000 009c 0000 0000 0000 0005 0000     ................

204000d4 <but6>:
204000d4:	0064 0000 0064 0000 a9a9 00a9 8080 0080     d...d...........
204000e4:	0103 0000 009c 0000 0000 0000 0006 0000     ................

204000f4 <but7>:
204000f4:	0064 0000 0064 0000 a9a9 00a9 8080 0080     d...d...........
20400104:	0035 0000 0103 0000 0000 0000 0007 0000     5...............

20400114 <but8>:
20400114:	0064 0000 0064 0000 a9a9 00a9 8080 0080     d...d...........
20400124:	009c 0000 0103 0000 0000 0000 0008 0000     ................

20400134 <but9>:
20400134:	0064 0000 0064 0000 a9a9 00a9 8080 0080     d...d...........
20400144:	0103 0000 0103 0000 0000 0000 0009 0000     ................

20400154 <butclear>:
20400154:	0064 0000 0064 0000 ffff 00ff 8080 0080     d...d...........
20400164:	0035 0000 016a 0000 0000 0000 000b 0000     5...j...........

20400174 <butx>:
20400174:	0064 0000 0064 0000 a9a9 00a9 8080 0080     d...d...........
20400184:	0103 0000 016a 0000 0000 0000 000a 0000     ....j...........

20400194 <pass>:
20400194:	0001 0000 0005 0000 0009 0000 0000 0000     ................
204001a4:	0000 0000                                   ....

204001a8 <radius>:
204001a8:	3333 3333 3333 3fd3                         333333.?

204001b0 <_impure_ptr>:
204001b0:	01b8 2040 0000 0000                         ..@ ....

204001b8 <impure_data>:
204001b8:	0000 0000 04a4 2040 050c 2040 0574 2040     ......@ ..@ t.@ 
	...
20400260:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400270:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204005e0 <__malloc_av_>:
	...
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 
204009c8:	09c0 2040 09c0 2040 09c8 2040 09c8 2040     ..@ ..@ ..@ ..@ 
204009d8:	09d0 2040 09d0 2040 09d8 2040 09d8 2040     ..@ ..@ ..@ ..@ 

204009e8 <__malloc_sbrk_base>:
204009e8:	ffff ffff                                   ....

204009ec <__malloc_trim_threshold>:
204009ec:	0000 0002                                   ....

204009f0 <__atexit_recursive_mutex>:
204009f0:	ca50 2040                                   P.@ 

204009f4 <__global_locale>:
204009f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a14:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a34:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a54:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a74:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a94:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400ab4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400ad4:	8731 0040 80c1 0040 0000 0000 b9b8 0041     1.@...@.......A.
20400ae4:	b9b4 0041 b924 0041 b924 0041 b924 0041     ..A.$.A.$.A.$.A.
20400af4:	b924 0041 b924 0041 b924 0041 b924 0041     $.A.$.A.$.A.$.A.
20400b04:	b924 0041 b924 0041 ffff ffff ffff ffff     $.A.$.A.........
20400b14:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20400b3c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
